import java_cup.runtime.*;
import java.io.FileReader;
import java.util.*;
parser code {:
    
    @Override
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" en la linea "+(s.left + 1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }
        System.err.println(m);
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error(message, info);
        System.exit(1); //To change body of generated methods, choose Tools | Templates.
    }
    
    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            parser p = new parser(
                    new Proyecto( new FileReader(args[0])));
            Object result = p.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    TablaSimbolos simbolo = new TablaSimbolos();
    TablaSimbolosFunciones tfuncion = new TablaSimbolosFunciones();
    TablaFunsiones fun = new TablaFunsiones();
    boolean Declaracion = true;
    boolean Funcion = false;
    boolean FCParametro = false;
    String ambito = "main";
    String idMetodo = "";
    String ambitoF = ambito;

    String dominio="";
    String dominioL="";

    TablaIntermedio cuadruTable = new TablaIntermedio();
:};

action code{:

    public List<GenericTreeNode> limpiar(GenericTree arbol){
         List<GenericTreeNode> tree = arbol.list();
                for (int i = 0; i < tree.size(); i++) {

                    for(int j = 0; j <tree.get(i).getNumberOfChildren(); j++){
                         if(tree.get(i).getData().getNombre() == tree.get(i).getChildren().get(j).getData().getNombre()) {


                           tree.add(i, tree.get(i).getChildren().get(j));
                           tree.remove(i + 1);
                           System.out.println("hola");
                         }
                    }

                }

                return tree;
    }

    public TablaIntermedio inta(GenericTree arbol){
      List<GenericTreeNode> nodos = arbol.buscar("SA");
      TablaIntermedio Table = new TablaIntermedio();
      int bandera = 0;

      for( int i = 0 ; i < nodos.size() ; i++ ){
        GenericTreeNode nodo = nodos.get(i);
        int a = nodos.get(i).getNumberOfChildren();



        switch (a){
          case 2:
            if (nodo.getChildren().get(1).getData().getNombre() == nodo.getChildren().get(1).getChildren().get(0).getData().getNombre()){
                String temp = "temp"+String.valueOf(bandera);
                Table.Ingresar(":=", nodo.getChildren().get(1).getData().getNombre(), temp);
                Table.Ingresar(":=", temp, nodo.getChildren().get(0).getData().getNombre());
                bandera ++;
            }
            break;
        }

      }
        return Table;
      //cuadruTable.PrintTabla();
    }
:};

terminal String ASSIG, DECLARACION, LLAVEIZQ, LLAVEDER, PARIZQ, PARDER, COMA, CORCHETEDER, CORCHETEIZQ, PUNTO;
terminal String OF,IF,ELSE,THEN,WHILE,DO,REPEAT,UNTIL,FOR,TO,DOWNTO,PROGRAM,BEGIN,END,PROCEDURE,FUNCTION,VAR, COMENTARIO, DIV, MOD, OR, NOT,AND;
terminal String CIERRE;
terminal String BOOL,ID,VCHAR, VSTRING, INTEGER, BOOLEAN, CHAR, STRING,ARRAY, OPSUMA, OPMULT, OPLOG, READ, WRITE;
terminal Integer NUM;

non terminal GenericTree Programa;
non terminal GenericTreeNode CP;
non terminal GenericTreeNode ZD;
non terminal GenericTreeNode CUP, CUF, CUPR;
non terminal GenericTreeNode ZDV;
non terminal GenericTreeNode DE,L;
non terminal GenericTreeNode TD;
non terminal GenericTreeNode TS, VR, DEI;
non terminal GenericTreeNode TE;
non terminal GenericTreeNode TA, TST;
non terminal GenericTreeNode SC, S, SA, SCI;
non terminal GenericTreeNode LITERAL, EXPRESION, CONDICION;
non terminal GenericTreeNode EB, LF,LP, PA, LA;
non terminal GenericTreeNode IS,IDO,EC,ER, EA;
non terminal GenericTreeNode RW, RR, RF, VARIABLE;
non terminal GenericTreeNode CF, CPR, AM, F, EX, WRT;
non terminal GenericTreeNode PFV, TEL, PF, PFVA,LEER;
non terminal GenericTreeNode DP, DF, DSP, ZDSP, AR, ESCR, MET, PFVADE, PAV, PAVA;
non terminal String OP,OL,COMENT;

Programa ::= CP:cp ZD:zd CUP:cup{:
        GenericTree tree= new GenericTree();
        GenericTreeNode pro= new GenericTreeNode(new Tipo("Programa", "Programa"));
        pro.addChild(cp);
        pro.addChild(zd);
        pro.addChild(cup);
        tree.setRoot(pro);

        List<GenericTreeNode> arbol = limpiar(tree);
                System.out.println("Raiz:"+tree.getRoot());
                System.out.println("--------------------------");
                for (int i = 0; i < arbol.size(); i++) {
                    System.out.println("Padre:"+arbol.get(i).getData().getNombre());
                    System.out.println();
                    System.out.println("Hijos:"+tree.Imprimir(i));
                    System.out.println("-------------------------------");
                }
        //simbolo.imprimir();
        //tfuncion.imprimir();
        cuadruTable = inta(tree);
        cuadruTable.PrintTabla();
:};

CP ::= PROGRAM:p ID:i CIERRE{:
        GenericTreeNode cp= new GenericTreeNode(new Tipo("CP", "CP"));
        GenericTreeNode pr= new GenericTreeNode(new Tipo(p, p));
        GenericTreeNode id= new GenericTreeNode(new Tipo(i, i));
        cp.addChild(pr);
        cp.addChild(id);
        RESULT=cp;
:}|error;

ZD ::= ZDV:zdv ZDSP:zdsp{:
        GenericTreeNode zd = new GenericTreeNode(new Tipo("ZD","ZD"));
        zd.addChild(zdv);
        zd.addChild(zdsp);
        RESULT=zd;
:}|error;

ZDV ::= VAR:var DE:de{:
        GenericTreeNode zdv= new GenericTreeNode(new Tipo("ZDV", "ZDV"));
        GenericTreeNode v= new GenericTreeNode(new Tipo(var, var));
        zdv.addChild(v);
        zdv.addChild(de);
        RESULT=zdv;
:};

DE ::= DE:d DEI:dei{:
        GenericTreeNode de= new GenericTreeNode(new Tipo("DE", "DE"));
        de.addChild(d);
        de.addChild(dei);
        RESULT=de;
:}
|DEI:dei{:
        GenericTreeNode de= new GenericTreeNode(new Tipo("DE", "DE"));
        de.addChild(dei);
        RESULT=de;
:};

DEI ::= ID:id COMA DEI:de{: 
        String tipo= "";
        if(Declaracion == true){
            simbolo.crear(id, de.getData().getTipo(),ambito);
            tipo = de.getData().getTipo();
        }else if((Funcion== true)&&(FCParametro==false)){
            tfuncion.crear(id, de.getData().getTipo(),ambito);
            tipo = de.getData().getTipo();
        }else if((Funcion== true)&&(FCParametro==true)){
            dominio = dominio+" X "+de.getData().getTipo();
            tipo = de.getData().getTipo();
        }

        GenericTreeNode dei= new GenericTreeNode(new Tipo("DEI", tipo));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        dei.addChild(i);
        dei.addChild(de);
        RESULT=dei;
:}
| ID:id DECLARACION TD:td CIERRE{:
        String tipo="";
        if(Declaracion == true){
            simbolo.crear(id, td.getData().getTipo(),ambito);
            tipo = td.getData().getTipo();

        }
        if((Funcion == true) && (FCParametro==false)) {
            tfuncion.crear(id, td.getData().getTipo(),ambito);
            tipo = td.getData().getTipo();
        }else if((Funcion == true) && (FCParametro==true)){
            tipo = td.getData().getTipo();

            if(dominio.isEmpty() == true){
                dominio = td.getData().getTipo();
            }else{
                dominio = dominio+" X "+td.getData().getTipo();
            }
        }

        GenericTreeNode dei= new GenericTreeNode(new Tipo("DEI", tipo));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        dei.addChild(i);
        dei.addChild(td);
        RESULT=dei;
:};

TD ::= TS:ss {:
        GenericTreeNode td = new GenericTreeNode(new Tipo(ss.getData().getNombre(), ss.getData().getTipo()));
        td.addChild(ss);
        RESULT=td;
:}
| TE:te{:
        GenericTreeNode td = new GenericTreeNode(new Tipo(te.getData().getNombre(), te.getData().getTipo()));
        td.addChild(te);
        RESULT=td;
:};

TS ::= INTEGER:in{:
        GenericTreeNode ts= new GenericTreeNode(new Tipo(in, in));
        RESULT= ts;
:}
| CHAR:c{:
        GenericTreeNode ts= new GenericTreeNode(new Tipo(c, c));
        RESULT= ts;
:}
| BOOLEAN:b{:
        GenericTreeNode ts= new GenericTreeNode(new Tipo(b, b));
        RESULT= ts;
:};

TE ::= TA:ta{:
        GenericTreeNode te = new GenericTreeNode(new Tipo(ta.getData().getNombre(), ta.getData().getTipo()));
        te.addChild(ta);
        RESULT=te;
:}
| TST:tst{:
        GenericTreeNode te = new GenericTreeNode(new Tipo(tst.getData().getNombre(), tst.getData().getTipo()));
        te.addChild(tst);
        RESULT=te;
:};

TA ::= ARRAY:ar LLAVEIZQ:li NUM:n PUNTO PUNTO NUM:n1 LLAVEDER:ld OF:o TD:td{:
        String tipo = ar+"("+n+".."+n1+","+td.getData().getTipo()+")";

        GenericTreeNode ta = new GenericTreeNode(new Tipo("TA", tipo));
        GenericTreeNode s = new GenericTreeNode(new Tipo(ar, ar));
        GenericTreeNode f = new GenericTreeNode(new Tipo(o, o));
        GenericTreeNode num = new GenericTreeNode(new Tipo("NUM", "NUM"));
        GenericTreeNode num2 = new GenericTreeNode(new Tipo("NUM2", "NUM2"));
        ta.addChild(s);
        ta.addChild(num);
        ta.addChild(num2);
        ta.addChild(f);
        ta.addChild(td);
        RESULT=ta;
:};

TST ::= STRING:st LLAVEIZQ:li NUM:n LLAVEDER:ld{:
        String tipo = "Array"+"("+1+".."+n+","+"String"+")";

        GenericTreeNode tst = new GenericTreeNode(new Tipo("TST", tipo));
        GenericTreeNode s = new GenericTreeNode(new Tipo(st, st));
        GenericTreeNode num = new GenericTreeNode(new Tipo("NUM", "NUM"));
        tst.addChild(s);
        tst.addChild(num);
        RESULT=tst;
:};

ZDSP ::= DSP:dsp{:
        GenericTreeNode zdsp = new GenericTreeNode(new Tipo("ZDSP", "ZDSP"));
        zdsp.addChild(dsp);
        RESULT=zdsp;
:}
|{:
        GenericTreeNode vacio = new GenericTreeNode(new Tipo("", ""));
        RESULT=vacio;
:};

DSP ::= DF:df ZDSP:zd{:
        GenericTreeNode dsp = new GenericTreeNode(new Tipo("DSP", "DSP"));
        dsp.addChild(df);
        dsp.addChild(zd);
        RESULT=dsp;
:}
| DP:dp ZDSP:zd{:
        GenericTreeNode dsp = new GenericTreeNode(new Tipo("DSP", "DSP"));
        dsp.addChild(dp);
        dsp.addChild(zd);
        RESULT=dsp;
:};

DF ::= CF:fc ZD:zd CUF:sc{:
        GenericTreeNode df = new GenericTreeNode(new Tipo("DF", "DF"));
        df.addChild(fc);
        df.addChild(zd);
        df.addChild(sc);
        RESULT=df;
:};

CF ::= FUNCTION:ft ID:id DECLARACION TEL:tel CIERRE {:
        GenericTreeNode proce= new GenericTreeNode(new Tipo("FUNCION", "FUNCION"));
        GenericTreeNode fc= new GenericTreeNode(new Tipo(ft, ft));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        proce.addChild(fc);
        proce.addChild(i);
        proce.addChild(tel);

        Declaracion = false;
        Funcion = true;
        idMetodo = id;
        tfuncion.crearid(id);
        fun.crear(id, "void->"+tel.getData().getTipo(), ambito, "void", tel.getData().getTipo());
        ambitoF = ambitoF+"."+idMetodo;
        ambito = ambitoF;

        RESULT=proce;
:}
| FUNCTION:ft ID:id PARIZQ{:
        Declaracion = false;
        Funcion = true; FCParametro =true;
:}

DE:pfv PARDER DECLARACION TEL:tel CIERRE{:
        GenericTreeNode proce= new GenericTreeNode(new Tipo("FUNCION", "FUNCION"));
        GenericTreeNode fc= new GenericTreeNode(new Tipo(ft, ft));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        proce.addChild(fc);
        proce.addChild(i);
        proce.addChild(pfv);
        proce.addChild(tel);
        RESULT=proce;

        tfuncion.crearid(id);
        idMetodo = id;
        fun.crear(id, dominio+"->"+tel.getData().getTipo(), ambito, dominio, tel.getData().getTipo());
        FCParametro = false;
        Declaracion = false;
        Funcion = true;
        ambitoF = ambitoF+"."+idMetodo;
        ambito = ambitoF;
        dominio="";
:};

TEL ::= TS:ts{:
        GenericTreeNode tel = new GenericTreeNode(new Tipo(ts.getData().getNombre(), ts.getData().getTipo()));
        tel.addChild(ts);
        RESULT= tel;
:}
| TST:tst{:
        GenericTreeNode tel = new GenericTreeNode(new Tipo(tst.getData().getNombre(), tst.getData().getTipo()));
        tel.addChild(tst);
        RESULT= tst;
:};

CUF ::= SC:sc{:
        GenericTreeNode cup = new GenericTreeNode(new Tipo("CUF", "CUF"));
        cup.addChild(sc);

        ambito=tfuncion.quitarAmbito(ambito,tfuncion.getId());
        ambitoF=ambito;
        RESULT=cup;
:};

DP ::= CPR:pc ZD:zd CUPR:sc{:
        GenericTreeNode dp = new GenericTreeNode(new Tipo("DP", "DP"));
        dp.addChild(pc);
        dp.addChild(zd);
        dp.addChild(sc);
        RESULT=dp;
:};


CPR ::= PROCEDURE:pc ID:id CIERRE{:
        GenericTreeNode proce= new GenericTreeNode(new Tipo("PROCEDURE", "PROCEDURE"));
        GenericTreeNode p= new GenericTreeNode(new Tipo(pc, pc));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        proce.addChild(p);
        proce.addChild(i);

        Declaracion = false;
        Funcion = true;
        idMetodo = id;
        tfuncion.crearid(id);
        fun.crear(id, "void->void", ambito, "void","void");
        ambito = ambito+"."+idMetodo;

        RESULT=proce;
:}
| PROCEDURE:pc ID:id PARIZQ{:
        Declaracion = false;
        Funcion = true;
        FCParametro =true;
:}

DE:pf PARDER CIERRE{:
        GenericTreeNode proce= new GenericTreeNode(new Tipo("PROCEDURE", "PROCEDURE"));
        GenericTreeNode p= new GenericTreeNode(new Tipo(pc, pc));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        GenericTreeNode pa= new GenericTreeNode(new Tipo(pf.getData().getNombre(), pf.getData().getTipo()));
        proce.addChild(p);
        proce.addChild(i);
        proce.addChild(pa);

        tfuncion.crearid(id);
        idMetodo = id;
        fun.crear(id, dominio+"->void", ambito, dominio, "void");
        FCParametro = false;
        Declaracion = false;
        Funcion = true;
        ambitoF = ambitoF+"."+idMetodo;
        ambito = ambitoF;
        dominio="";

        RESULT=proce;
:};

CUPR ::= SC:sc{:
        GenericTreeNode cup = new GenericTreeNode(new Tipo("CUPR", "CUPR"));
        cup.addChild(sc);

        ambito=tfuncion.quitarAmbito(ambito,tfuncion.getId());
        ambitoF=ambito;

        RESULT=cup;
:};

CUP ::= SC:sc{:
        GenericTreeNode cup = new GenericTreeNode(new Tipo("CUP", "CUP"));
        cup.addChild(sc);
        RESULT=cup;
:};

SC ::= BEGIN:bn S:s END:ed PUNTO{:
        GenericTreeNode sc = new GenericTreeNode(new Tipo("SC", "SC"));
        GenericTreeNode bg = new GenericTreeNode(new Tipo(bn, bn));
        GenericTreeNode e = new GenericTreeNode(new Tipo(ed, ed));
        sc.addChild(bg);
        sc.addChild(s);
        sc.addChild(e);
        RESULT=sc;
:};

SCI ::= BEGIN:bn S:s END:ed CIERRE{:
        GenericTreeNode sc = new GenericTreeNode(new Tipo("SC", "SC"));
        GenericTreeNode bg = new GenericTreeNode(new Tipo(bn, bn));
        GenericTreeNode e = new GenericTreeNode(new Tipo(ed, ed));
        sc.addChild(bg);
        sc.addChild(s);
        sc.addChild(e);
        RESULT=sc;
:};

S ::= SA:sa CIERRE S:s1{:
        GenericTreeNode s = new GenericTreeNode(new Tipo("S", "S"));
        s.addChild(sa);
        s.addChild(s1);
        RESULT=s;
:}
|{:
        GenericTreeNode vacio= new GenericTreeNode(new Tipo("", ""));
        RESULT=vacio;
:}
| SCI:sc S:s1{:
        GenericTreeNode s = new GenericTreeNode(new Tipo("S", "S"));
        s.addChild(sc);
        s.addChild(s1);
        RESULT=s;
:}
| LP:lp CIERRE S:s1{:
        GenericTreeNode s = new GenericTreeNode(new Tipo("S", "S"));
        s.addChild(lp);
        s.addChild(s1);
        RESULT=s;
:}
| EC:ec{:
        GenericTreeNode s = new GenericTreeNode(new Tipo("S", "S"));
        s.addChild(ec);
        RESULT=s;
:}
| MET:met CIERRE S:s1{:
        GenericTreeNode s = new GenericTreeNode(new Tipo("S", "S"));
        s.addChild(met);
        s.addChild(s1);
        RESULT=s;
:}|error S;

SA ::= ID:id ASSIG AR:ar{:
        GenericTreeNode sa = new GenericTreeNode(new Tipo("SA", "SA"));
        GenericTreeNode i = new GenericTreeNode(new Tipo(id, id));
        sa.addChild(i);
        sa.addChild(ar);

        if(simbolo.buscar(id)!=null){
            if(simbolo.prefijo(id, ambito)){
                if(ar.getData().getTipo().equals("VSTRING")){
                    String tipo = simbolo.buscarTipo(id).substring(9,simbolo.buscarTipo(id).length()-8);
                 
                    int m = Integer.parseInt(tipo);
                    if(m>=ar.getData().getNombre().length()){
                       System.out.println("correcto"); 
                    }else{
                        System.err.println("El tamaño del string es mayor al de la variable: "+id);
                    }
                }else
                if(simbolo.buscarTipo(id).equals(ar.getData().getTipo()))
                    System.out.println("correcto");
                else
                    System.err.println("Esta asignando un tipo distinto a la variable: "+id+","+ " tipo correcto: "+simbolo.buscarTipo(id));

            }else{
                System.err.println("La variable "+id+" no esta en este ambito.");
            }
        }else if(tfuncion.buscar(id)!=null){
            if(tfuncion.prefijo(id, ambito)){
                if(ar.getData().getTipo().equals("VSTRING")){
                    
                    String tipo = simbolo.buscarTipo(id).substring(9,simbolo.buscarTipo(id).length()-8);
                    System.out.println(tipo);
                    int m = Integer.parseInt(tipo);
                    if(m>=ar.getData().getNombre().length()){
                       System.out.println("correcto"); 
                    }else{
                        System.err.println("El tamaño del string es mayor al de la variable: "+id);
                    }
                }else
                if(tfuncion.buscarTipo(id).equals(ar.getData().getTipo()))
                    System.out.println("correcto");
                else
                    System.err.println("Esta asignando un tipo distinto a la variable: "+id+","+ " tipo correcto: "+tfuncion.buscarTipo(id));
            }else{
                System.err.println("La variable "+id+" no esta en este ambito.");
            }
        }else{
            System.err.println("La variable "+id+" no esta declarada.");
        }

        RESULT=sa;
:};

AR ::= AR:ar OPSUMA AM:am{:
        String tipo = "";
        if(ar.getData().getTipo().equals(am.getData().getTipo()) && ar.getData().getTipo().equals("Integer")){
            tipo=ar.getData().getTipo();
        }else{
            System.err.println("Solo se pueden sumar o restar Enteros");
            tipo=ar.getData().getTipo();
        }
        GenericTreeNode a= new GenericTreeNode(new Tipo("AR", tipo));
        a.addChild(ar);
        a.addChild(am);
        RESULT=a;
:}
| AM:am{:
        GenericTreeNode a= new GenericTreeNode(new Tipo(am.getData().getNombre(), am.getData().getTipo()));
        a.addChild(am);
        RESULT=a;
:};

AM ::= AM:am OP F:val {:
        String tipo = "";
        if(am.getData().getTipo().equals(val.getData().getTipo()) && am.getData().getTipo().equals("Integer")){
            tipo=am.getData().getTipo();
        }else{
            System.err.println("Solo se pueden multiplicar o dividir Enteros");
            tipo=am.getData().getTipo();
        }

        GenericTreeNode a= new GenericTreeNode(new Tipo("AM", tipo));
        a.addChild(am);
        a.addChild(val);
        RESULT=a;
:}
| F:val{:
        GenericTreeNode a= new GenericTreeNode(new Tipo(val.getData().getNombre(), val.getData().getTipo()));
        a.addChild(val);
        RESULT=a;
:};

F ::= EXPRESION:ex{:
        GenericTreeNode f= new GenericTreeNode(new Tipo(ex.getData().getNombre(), ex.getData().getTipo()));
        f.addChild(ex);
        RESULT=f;
:}
|PARIZQ AR:ar PARDER{:
        GenericTreeNode f= new GenericTreeNode(new Tipo(ar.getData().getNombre(), ar.getData().getTipo()));
        f.addChild(ar);
        RESULT=f;
:};

OP ::= OPMULT:op{:
        RESULT=op;
:}
|DIV:op{:
        RESULT=op;
:}|MOD:op{:
        RESULT=op;
:};

OL ::= OPLOG:op{:
        RESULT=op;
:}
|OR:op{:
        RESULT=op;
:}
|NOT:op{:
        RESULT=op;
:}
|AND:op{:
        RESULT=op;
:};

EXPRESION ::= LITERAL:lt {:
        GenericTreeNode ex = new GenericTreeNode(new Tipo(lt.getData().getNombre(), lt.getData().getTipo()));
        ex.addChild(lt);
        RESULT=ex;
:}
| ID:id{:
        String tipo = "";
        if(simbolo.buscar(id)!=null){
            if(simbolo.prefijo(id, ambito)){
                tipo=simbolo.buscarTipo(id);
            }else{
                System.err.println("La variable "+id+ " no esta en este ambito.");
                tipo=simbolo.buscarTipo(id);
            }

        }else if(tfuncion.buscar(id)!=null){
            if(tfuncion.prefijo(id, ambito)){
                tipo=tfuncion.buscarTipo(id);
            }else{
                System.err.println("La variable "+id+ " no esta en este ambito.");
                tipo=tfuncion.buscarTipo(id);
            }

        }
        else{
            System.err.println("La variable "+id+" no esta declarada");
            tipo=tfuncion.buscarTipo(id);
        }

        GenericTreeNode ex = new GenericTreeNode(new Tipo(id, tipo));
        GenericTreeNode i = new GenericTreeNode(new Tipo(id, id));
        ex.addChild(i);
        RESULT=ex;
:}
| LF:lf{:
        GenericTreeNode ex = new GenericTreeNode(new Tipo(lf.getData().getNombre(), lf.getData().getTipo()));
        ex.addChild(lf);
        RESULT=ex;
:}
| LA:la{:
        GenericTreeNode ex = new GenericTreeNode(new Tipo(la.getData().getNombre(), la.getData().getTipo()));
        ex.addChild(la);
        RESULT=ex;
:};

LA ::= ID:id LLAVEIZQ EXPRESION:ex LLAVEDER{:
        GenericTreeNode la = new GenericTreeNode(new Tipo("LA", "LA"));
        GenericTreeNode i = new GenericTreeNode(new Tipo(id, id));
        la.addChild(i);
        la.addChild(ex);
        RESULT=la; :};

LITERAL ::= NUM:n{:
        String num = "";
        num = String.valueOf(n);
        GenericTreeNode lt = new GenericTreeNode(new Tipo(num, "Integer"));
        RESULT=lt;
:}
| VCHAR:vc{:
        GenericTreeNode lt = new GenericTreeNode(new Tipo(vc, "char"));
        RESULT=lt;
:}
| BOOL:bl{:
        GenericTreeNode lt = new GenericTreeNode(new Tipo(bl, bl));
        RESULT=lt;
:}
| VSTRING:vs{:
        String cadena = vs.substring(1,vs.length()-1);
        GenericTreeNode lt = new GenericTreeNode(new Tipo(cadena, "VSTRING"));
        RESULT=lt;
:};

LF ::= ID:i PARIZQ PAV:pfv PARDER{:
        String tipo = "";
        if(fun.buscar(i)!=null){
            if(fun.prefijo(i, ambito)==true){
                if(fun.buscarDominio(i).equals(dominioL)){
                    tipo = fun.buscarRango(i);
                }else{
                    System.err.println("Los parametros no son compatibles con la funcion "+ i);
                    tipo = fun.buscarRango(i);
                }
            }else{
                System.err.println("La funcion "+i+ " no puede ser llamada en este ambito.");
                tipo = fun.buscarRango(i);
            }
        }else{
            System.err.println("La funcion "+i+" no esta declarada");
            tipo = fun.buscarRango(i);
        }
        dominioL = "";

        GenericTreeNode lf= new GenericTreeNode(new Tipo("LF", tipo));
        GenericTreeNode id= new GenericTreeNode(new Tipo(i, i));
        lf.addChild(id);
        lf.addChild(pfv);
        RESULT=lf;
:}
| ID:i PARIZQ PARDER{:
        String tipo = "";

        if(fun.buscar(i)!=null){
            if(fun.prefijo(i, ambito)==true){
                if(fun.buscarDominio(i).equals("void")){
                    tipo = fun.buscarRango(i);
                }else{
                    System.err.println("Los parametros no son compatibles con la funcion "+ i);
                    tipo = fun.buscarRango(i);
                }
            }else{
                System.err.println("La funcion "+i+ " no puede ser llamada en este ambito.");
                tipo = fun.buscarRango(i);
            }
        }else{
            System.err.println("La funcion "+i+" no esta declarada");
            tipo = fun.buscarRango(i);
        }

        GenericTreeNode lf= new GenericTreeNode(new Tipo("LF", tipo));
        GenericTreeNode id= new GenericTreeNode(new Tipo(i, i));
        lf.addChild(id);
        RESULT=lf;
:};

PAV ::= PAV:pa CIERRE EXPRESION:ex {:
        GenericTreeNode pav= new GenericTreeNode(new Tipo("PAV", "PAV"));
        pav.addChild(pa);
        pav.addChild(ex);
        RESULT=pav;
:};

PAV ::= EXPRESION:ex {:
        GenericTreeNode pav= new GenericTreeNode(new Tipo("PAV", "PAV"));
        pav.addChild(ex);
        RESULT=pav;
:};

LP ::= ID:id PARIZQ PAV:pa PARDER{:
        GenericTreeNode lp = new GenericTreeNode(new Tipo("LP", "LP"));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        lp.addChild(i);
        lp.addChild(pa);
        RESULT=lp;
:};

EC ::= EA:is{:
        GenericTreeNode ec = new GenericTreeNode(new Tipo("EC", "EC"));
        ec.addChild(is);
        RESULT=ec;
:}
|ER:er{:
        GenericTreeNode ec = new GenericTreeNode(new Tipo("EC", "EC"));
        ec.addChild(er);
        RESULT=ec;
:};

EA ::= IS:is{:
        GenericTreeNode ec = new GenericTreeNode(new Tipo("EA", "EA"));
        ec.addChild(is);
        RESULT=ec;
:};

IS ::= IF:ifc CONDICION:cd THEN:tn S:s IDO:ido{:
        GenericTreeNode is = new GenericTreeNode(new Tipo("IS", "IS"));
        GenericTreeNode fi = new GenericTreeNode(new Tipo(ifc, ifc));
        GenericTreeNode ten = new GenericTreeNode(new Tipo(tn, tn));
        is.addChild(fi);
        is.addChild(cd);
        is.addChild(ten);
        is.addChild(s);
        is.addChild(s);
        RESULT=is;
:};

IDO ::= ELSE:el S:s1{:
        GenericTreeNode ido = new GenericTreeNode(new Tipo("IDO", "IDO"));
        GenericTreeNode els = new GenericTreeNode(new Tipo(el, el));
        ido.addChild(els);
        ido.addChild(s1);
        RESULT=ido;
:};

ER ::= RW:rw {:
        GenericTreeNode er = new GenericTreeNode(new Tipo("ER", "ER"));
        er.addChild(rw);
        RESULT=er;
:}
| RR:rr {:
        GenericTreeNode er = new GenericTreeNode(new Tipo("ER", "ER"));
        er.addChild(rr);
        RESULT=er;
:}
| RF:rf {:
        GenericTreeNode er = new GenericTreeNode(new Tipo("ER", "ER"));
        er.addChild(rf);
        RESULT=er;
:};

RW ::= WHILE:wl CONDICION:cd DO:d S:s {:
        GenericTreeNode rw = new GenericTreeNode(new Tipo("RW", "RW"));
        GenericTreeNode f = new GenericTreeNode(new Tipo(wl, wl));
        GenericTreeNode tt = new GenericTreeNode(new Tipo(d, d));
        rw.addChild(f);
        rw.addChild(cd);
        rw.addChild(tt);
        rw.addChild(s);
        RESULT= rw;
:};

RR ::= REPEAT:rp S:s UNTIL:ul CONDICION:cd {:
        GenericTreeNode rr = new GenericTreeNode(new Tipo("RR", "RR"));
        GenericTreeNode f = new GenericTreeNode(new Tipo(rp, rp));
        GenericTreeNode tt = new GenericTreeNode(new Tipo(ul, ul));
        rr.addChild(f);
        rr.addChild(s);
        rr.addChild(tt);
        rr.addChild(cd);
        RESULT= rr;
:};

RF ::= FOR:fr SA:sa TO:t EXPRESION:ex DO:d S:s {:
        GenericTreeNode rf = new GenericTreeNode(new Tipo("RF", "RF"));
        GenericTreeNode f = new GenericTreeNode(new Tipo(fr, fr));
        GenericTreeNode tt = new GenericTreeNode(new Tipo(t, t));
        GenericTreeNode dd = new GenericTreeNode(new Tipo(d, d));
        rf.addChild(f);
        rf.addChild(sa);
        rf.addChild(tt);
        rf.addChild(ex);
        rf.addChild(dd);
        rf.addChild(s);
        RESULT= rf;
:}
| FOR:fr SA:sa DOWNTO:t EXPRESION:ex DO:d S:s {:
        GenericTreeNode rf = new GenericTreeNode(new Tipo("RF", "RF"));
        GenericTreeNode f = new GenericTreeNode(new Tipo(fr, fr));
        GenericTreeNode tt = new GenericTreeNode(new Tipo(t, t));
        GenericTreeNode dd = new GenericTreeNode(new Tipo(d, d));
        rf.addChild(f);
        rf.addChild(sa);
        rf.addChild(tt);
        rf.addChild(ex);
        rf.addChild(dd);
        rf.addChild(s);
        RESULT= rf;
:};

CONDICION ::= EX:ex OL CONDICION:ex2{:
        GenericTreeNode eb = new GenericTreeNode(new Tipo("CONDICION", "CONDICION"));
        eb.addChild(ex);
        eb.addChild(ex2);
        RESULT=eb;
:}
| EX:ar{:
        GenericTreeNode ex = new GenericTreeNode(new Tipo("EB", "EB"));
        ex.addChild(ar);
        RESULT=ex;
:};

EX ::= AR:ar{:
        GenericTreeNode ex = new GenericTreeNode(new Tipo("EXPRESION", "EXPRESION"));
        ex.addChild(ar);
        RESULT=ex;
:};

MET ::= ESCR:wt{:
        GenericTreeNode met = new GenericTreeNode(new Tipo("Metodo", "Metodo"));
        met.addChild(wt);
        RESULT=met;
:};

ESCR ::= WRITE:wt PARIZQ VSTRING:vs WRT:wrt PARDER {:
        GenericTreeNode escr = new GenericTreeNode(new Tipo(wt, wt));
        GenericTreeNode str = new GenericTreeNode(new Tipo(vs, vs));
        escr.addChild(str);
        escr.addChild(wrt);
        RESULT=escr;
:}
| LEER:lr{:
        GenericTreeNode escr = new GenericTreeNode(new Tipo("READ", "READ"));
        escr.addChild(lr);
        RESULT=escr;
:};

WRT ::= COMA ID:id{:
        GenericTreeNode wrt= new GenericTreeNode(new Tipo("WRT", "WRT"));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        wrt.addChild(i);
        RESULT=wrt;
:}
| {:
    GenericTreeNode wrt= new GenericTreeNode(new Tipo("WRT", "WRT"));
    RESULT=wrt;
:};

LEER ::= READ:rd PARIZQ ID:id PARDER{:
        GenericTreeNode leer = new GenericTreeNode(new Tipo(rd, rd));
        GenericTreeNode i = new GenericTreeNode(new Tipo(id, id));
        leer.addChild(i);
        RESULT=leer;
:};

COMENT ::= COMENTARIO:cm{:
        RESULT=cm;
:}|;
