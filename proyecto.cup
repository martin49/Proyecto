import java_cup.runtime.*;
import java.io.FileReader;
import java.util.*;
parser code {:
    
    @Override
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" en la linea "+(s.left + 1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }
        System.err.println(m);
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error(message, info);
        System.exit(1); //To change body of generated methods, choose Tools | Templates.
    }
    
    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            parser p = new parser(
                    new Proyecto( new FileReader(args[0])));
            Object result = p.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    TablaSimbolos simbolo = new TablaSimbolos();
    TablaSimbolosFunciones tfuncion = new TablaSimbolosFunciones();
    boolean Declaracion = true;
    boolean Funcion = false;
    String ambito = "main";
    String idMetodo = "";
    String ambitoF = ambito;
    TablaIntermedio cuadruTable = new TablaIntermedio();
:};

action code{:

    public TablaIntermedio inta(GenericTree arbol){
      List<GenericTreeNode> nodos = arbol.buscar("SA");
      TablaIntermedio Table = new TablaIntermedio();

      for( int i = 0 ; i < nodos.size() ; i++ ){
        GenericTreeNode nodo = nodos.get(i);
        int a = nodos.get(i).getNumberOfChildren();


        if (nodo.hasChildren()){

        }
        switch (a){
          case 2:
            List temp = nodos.get(i).getChildren();
            Table.Ingresar(":=", temp.get(1).toString(), temp.get(0).toString());
            break;
        }

      }
        return Table;
      //cuadruTable.PrintTabla();
    }
:};

terminal String ASSIG, DECLARACION, LLAVEIZQ, LLAVEDER, PARIZQ, PARDER, COMA, CORCHETEDER, CORCHETEIZQ, PUNTO;
terminal String OF,IF,ELSE,THEN,WHILE,DO,REPEAT,UNTIL,FOR,TO,DOWNTO,PROGRAM,BEGIN,END,PROCEDURE,FUNCTION,VAR, COMENTARIO, DIV, MOD, OR, NOT,AND;
terminal String CIERRE;
terminal String BOOL,ID,VCHAR, VSTRING, INTEGER, BOOLEAN, CHAR, STRING,ARRAY, OPSUMA, OPMULT, OPLOG, READ, WRITE;
terminal Integer NUM;

non terminal GenericTree Programa;
non terminal GenericTreeNode CP;
non terminal GenericTreeNode ZD;
non terminal GenericTreeNode CUP, CUF, CUPR;
non terminal GenericTreeNode ZDV;
non terminal GenericTreeNode DE,L;
non terminal GenericTreeNode TD;
non terminal GenericTreeNode TS, VR, DEI;
non terminal GenericTreeNode TE;
non terminal GenericTreeNode TA, TST;
non terminal GenericTreeNode SC, S, SA, SCI;
non terminal GenericTreeNode LITERAL, EXPRESION, CONDICION;
non terminal GenericTreeNode EB, LF,LP, PA;
non terminal GenericTreeNode IS,IDO,EC,ER, EA;
non terminal GenericTreeNode RW, RR, RF, VARIABLE;
non terminal GenericTreeNode CF, CPR, AM, F, EX, WRT;
non terminal GenericTreeNode PFV, TEL, PF, PFVA,LEER;
non terminal GenericTreeNode DP, DF, DSP, ZDSP, AR, ESCR, MET, PFVADE, PAV, PAVA;
non terminal String OP,OL,COMENT;

Programa ::= CP:cp ZD:zd CUP:cup{:
        GenericTree tree= new GenericTree();
        GenericTreeNode pro= new GenericTreeNode(new Tipo("Programa","Programa"));
        pro.addChild(cp);
        pro.addChild(zd);
        pro.addChild(cup);
        tree.setRoot(pro);

        System.out.println("Raiz:" +tree.getRoot().getData().getNombre());
        System.out.println("--------------------------");
        for (int i = 0; i < tree.list().size(); i++) {
            System.out.println("Padre:"+tree.list().get(i).getData().getNombre());
            System.out.println();
            try{
                System.out.println("Hijos:" + tree.Imprimir(i));
            }
            catch(IndexOutOfBoundsException e){
                System.out.println("Hijos: ");
            }
            System.out.println("-------------------------------");
        }

        cuadruTable = inta(tree);
        cuadruTable.PrintTabla();
:};

CP ::= PROGRAM:p ID:i CIERRE{:
                GenericTreeNode cp= new GenericTreeNode(new Tipo("CP", "CP"));
                GenericTreeNode pr= new GenericTreeNode(new Tipo(p, p));
                GenericTreeNode id= new GenericTreeNode(new Tipo(i, i));
                cp.addChild(pr);
                cp.addChild(id);
                RESULT=cp;
:}|error;


ZD ::= ZDV:zdv ZDSP:zdsp{:
        GenericTreeNode zd = new GenericTreeNode(new Tipo("ZD", "ZD"));
        zd.addChild(zdv);
        zd.addChild(zdsp);
        RESULT=zd;
:}|error;

ZDV ::= VAR:var DE:de{:
        GenericTreeNode zdv= new GenericTreeNode(new Tipo("ZDV", "ZDV"));
        GenericTreeNode v= new GenericTreeNode(new Tipo(var, var));
        zdv.addChild(v);
        zdv.addChild(de);
        RESULT=zdv;
:};

DE ::= DE:d DEI:dei{:
        GenericTreeNode de= new GenericTreeNode(new Tipo("DE", "DE"));
        de.addChild(d);de.addChild(dei);
        RESULT=de;
:}|DEI:dei{:
        GenericTreeNode de= new GenericTreeNode(new Tipo("DE", "DE"));
        de.addChild(dei);
        RESULT=de;
:};

DEI ::= ID:id COMA DEI:de{:
        GenericTreeNode dei= new GenericTreeNode(new Tipo("DEI", "DEI"));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        dei.addChild(i);dei.addChild(de);
        /*if(Declaracion == true){
                    simbolo.crear(id, simbolo.getTipo(),ambito);
                    simbolo.creartipo(simbolo.getTipo());
                }else if(Funcion== true){
                    tfuncion.crear(id, tfuncion.getTipo(), ambito);
                    tfuncion.creartipo(tfuncion.getTipo());
                }*/
        RESULT=dei;
:}| ID:id DECLARACION TD:td CIERRE{:
        GenericTreeNode dei= new GenericTreeNode(new Tipo("DEI", "DEI"));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        dei.addChild(i);
        dei.addChild(td);

        /*if(Declaracion == true){

              if(td.toString().equals("Array")){


                  String tipo = simbolo.getTipo();

                  simbolo.crear(id, tipo,ambito);
                  simbolo.creartipo(tipo);
              }else if(td.toString().equals("string")){
                  String tipo = simbolo.getTipo();
                  System.out.println(tipo);
                  simbolo.crear(id, tipo,ambito);
                  simbolo.creartipo(tipo);
              }else{
              simbolo.crear(id, td.toString(),ambito);
              simbolo.creartipo(td.toString());
              }
          }
          if(Funcion == true){
              if(td.toString().equals("Array")){
                  String tipof = tfuncion.getTipo();
                  tfuncion.crear(id, tipof,ambito);
                  tfuncion.creartipo(tipof);
              }else if(td.toString().equals("string")){
                  String tipof = tfuncion.getTipo();
                  System.out.println(tipof);
                  tfuncion.crear(id, tipof,ambito);
                  tfuncion.creartipo(tipof);
              }else{
                  tfuncion.crear(id, td.toString(),ambito);
                  tfuncion.creartipo(td.toString());
              }
          }*/
        RESULT=dei;
:};

TD ::= TS:ss {:
        GenericTreeNode td = new GenericTreeNode(new Tipo("TS", ss.getData().getTipo()));
        td.addChild(ss);
        RESULT=td;
:} | TE:te{:
        GenericTreeNode td = new GenericTreeNode(new Tipo("TE", te.getData().getTipo()));
        td.addChild(te);
        RESULT=td;
:};

TS ::= INTEGER:in{:
        GenericTreeNode ts= new GenericTreeNode(new Tipo(in, in));
        RESULT= ts;
:} | CHAR:c{:
        GenericTreeNode ts= new GenericTreeNode(new Tipo(c, c));
        RESULT= ts;
:} | BOOLEAN:b{:
    GenericTreeNode ts= new GenericTreeNode(new Tipo(b, b));
    RESULT= ts;
:};

TE ::= TA:ta{:
        GenericTreeNode te = new GenericTreeNode(new Tipo("TA", ta.getData().getTipo()));
        te.addChild(ta);
        RESULT=te;
:} | TST:tst{:
        GenericTreeNode te = new GenericTreeNode(new Tipo("TST", tst.getData().getTipo()));
        te.addChild(tst);
        RESULT=te;
:};

TA ::= ARRAY:ar LLAVEIZQ:li NUM:n PUNTO PUNTO NUM:n1 LLAVEDER:ld OF:o TD:td{:
        GenericTreeNode ta = new GenericTreeNode(new Tipo(ar, ar));
        GenericTreeNode s = new GenericTreeNode(new Tipo(ar, ar));
        GenericTreeNode f = new GenericTreeNode(new Tipo(o, o));
        GenericTreeNode num = new GenericTreeNode(new Tipo("NUM", "NUM"));
        GenericTreeNode num2 = new GenericTreeNode(new Tipo("NUM2","NUM2"));
        ta.addChild(s);
        ta.addChild(num);
        ta.addChild(num2);
        ta.addChild(f);

        /*if(Declaracion == true){
            simbolo.creartipo(ar+"("+n+".."+n1+","+td.toString()+")");
        }

        if(Funcion == true){
            tfuncion.creartipo(ar+"("+n+".."+n1+","+td.toString()+")");
        }*/

        RESULT=ta;
:};

TST ::= STRING:st LLAVEIZQ:li NUM:n LLAVEDER:ld{:
        GenericTreeNode tst = new GenericTreeNode(new Tipo(st, st));
        GenericTreeNode s = new GenericTreeNode(new Tipo(st, st));
        GenericTreeNode num = new GenericTreeNode(new Tipo("NUM", "NUM"));
        tst.addChild(s);
        tst.addChild(num);

        RESULT=tst;

        /*if(Declaracion == true){
            simbolo.creartipo("Array"+"("+1+".."+n+","+"String"+")");
        }

        if(Funcion == true){
            tfuncion.creartipo("Array"+"("+1+".."+n+","+"String"+")");
        }*/
:};

ZDSP ::= DSP:dsp{:
        GenericTreeNode zdsp = new GenericTreeNode(new Tipo("ZDSP", "ZDSP"));
        zdsp.addChild(dsp);
        RESULT=zdsp;
:}|{:
        GenericTreeNode vacio = new GenericTreeNode(new Tipo("", ""));
        RESULT=vacio;
:};

DSP ::= DF:df ZDSP:zd{:
        GenericTreeNode dsp = new GenericTreeNode(new Tipo("DSP", "DSP"));
        dsp.addChild(df);
        dsp.addChild(zd);
        RESULT=dsp;
:} | DP:dp ZDSP:zd{:
        GenericTreeNode dsp = new GenericTreeNode(new Tipo("DSP", "DSP"));
        dsp.addChild(dp);
        dsp.addChild(zd);
        RESULT=dsp;
:};

DF ::= CF:fc ZD:zd CUF:sc{:
        GenericTreeNode df = new GenericTreeNode(new Tipo("DF", "DF")); 
        df.addChild(fc); 
        df.addChild(zd); 
        df.addChild(sc);
        RESULT=df;
:};

CF ::= FUNCTION:ft ID:id DECLARACION TEL:tel CIERRE {:
        GenericTreeNode proce= new GenericTreeNode(new Tipo("FUNCION", "FUNCION"));
        GenericTreeNode fc= new GenericTreeNode(new Tipo(ft, ft)); 
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        proce.addChild(fc);
        proce.addChild(i);
        proce.addChild(tel);
              
       /* Declaracion = false;
        Funcion = true;
        idMetodo = id;
        tfuncion.crearid(id);
        simbolo.crear(id, "void->"+tel.toString(), ambito);
        ambitoF = ambitoF+"."+idMetodo;
        ambito = ambitoF;*/
        
    RESULT=proce;
:} | FUNCTION:ft ID:id PARIZQ PFV:pfv PARDER DECLARACION TEL:tel CIERRE{:
        GenericTreeNode proce= new GenericTreeNode(new Tipo("FUNCION", "FUNCION"));
        GenericTreeNode fc= new GenericTreeNode(new Tipo(ft, ft)); 
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id)); 
        proce.addChild(fc);
        proce.addChild(i);
        proce.addChild(pfv); 
        proce.addChild(tel); 
        RESULT=proce;
:};

TEL ::= TS:ts{:
        GenericTreeNode tel = new GenericTreeNode(new Tipo("TS", ts.getData().getTipo()));
        tel.addChild(ts); 
        RESULT= tel;
:} | TST:tst{:
        GenericTreeNode tel = new GenericTreeNode(new Tipo("TST", tst.getData().getTipo()));
        tel.addChild(tst); 
        RESULT= tst;
:};

PFV ::= DE:dei {:
        GenericTreeNode pfv= new GenericTreeNode(new Tipo("PFV", "PFV"));
        pfv.addChild(dei); 
        RESULT=pfv;
:};

CUF ::= SC:sc{:
        GenericTreeNode cup = new GenericTreeNode(new Tipo("CUF", "CUF")); 
        cup.addChild(sc);
        //ambito=tfuncion.quitarAmbito(ambito,tfuncion.getId());
        RESULT=cup;
:};

DP ::= CPR:pc ZD:zd CUPR:sc{:
        GenericTreeNode dp = new GenericTreeNode(new Tipo("DP", "DP")); 
        dp.addChild(pc); 
        dp.addChild(zd); 
        dp.addChild(sc); 
        RESULT=dp;
:};

CPR ::= PROCEDURE:pc ID:id CIERRE{: 
        GenericTreeNode proce= new GenericTreeNode(new Tipo("PROCEDURE", "PROCEDURE"));
        GenericTreeNode p= new GenericTreeNode(new Tipo(pc, pc)); 
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id)); 
        proce.addChild(p);
        proce.addChild(i);
        /*Declaracion = false;
        Funcion = true;
        idMetodo = id;
        tfuncion.crearid(id);
        simbolo.crear(id, "void->void", ambito);
        ambito = ambito+"."+idMetodo;*/

        RESULT=proce;
        
:} | PROCEDURE:pc ID:id PARIZQ PF:pf PARDER CIERRE{:
        GenericTreeNode proce= new GenericTreeNode(new Tipo("PROCEDURE", "PROCEDURE"));
        GenericTreeNode p= new GenericTreeNode(new Tipo(pc, pc)); 
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id)); 
        GenericTreeNode pa= new GenericTreeNode(new Tipo("PF", pf.getData().getTipo()));
        proce.addChild(p);
        proce.addChild(i);
        proce.addChild(pa); 
        RESULT=proce;
:};

PF ::= PFV:pfv {: 
        GenericTreeNode pf = new GenericTreeNode(new Tipo("PF", "PF")); 
        pf.addChild(pfv); 
        RESULT= pf;
:};

CUPR ::= SC:sc{:
        GenericTreeNode cup = new GenericTreeNode(new Tipo("CUPR", "CUPR")); 
        cup.addChild(sc);
        //ambito=tfuncion.quitarAmbito(ambito,tfuncion.getId());
        RESULT=cup;
:};

CUP ::= SC:sc{:
        GenericTreeNode cup = new GenericTreeNode(new Tipo("CUP", "CUP")); 
        cup.addChild(sc); 
        RESULT=cup;
:};

SC ::= BEGIN:bn S:s END:ed PUNTO{:
        GenericTreeNode sc = new GenericTreeNode(new Tipo("SC", "SC"));
        GenericTreeNode bg = new GenericTreeNode(new Tipo(bn, bn));
        GenericTreeNode e = new GenericTreeNode(new Tipo(ed, ed)); 
        sc.addChild(bg); 
        sc.addChild(s); 
        sc.addChild(e); 
        RESULT=sc;
:};

SCI ::= BEGIN:bn S:s END:ed CIERRE{:
        GenericTreeNode sc = new GenericTreeNode(new Tipo("SC", "SC"));
        GenericTreeNode bg = new GenericTreeNode(new Tipo(bn, bn));
        GenericTreeNode e = new GenericTreeNode(new Tipo(ed, ed)); 
        sc.addChild(bg); 
        sc.addChild(s); 
        sc.addChild(e); 
        RESULT=sc;
:};

S ::= SA:sa CIERRE S:s1{: 
        GenericTreeNode s = new GenericTreeNode(new Tipo("S", "S")); 
        s.addChild(sa); 
        s.addChild(s1); 
        RESULT=s;
        
:}|{:
        GenericTreeNode vacio= new GenericTreeNode(new Tipo("", ""));
        RESULT=vacio;
        
:}|SCI:sc S:s1{:
        GenericTreeNode s = new GenericTreeNode(new Tipo("S", "S")); 
        s.addChild(sc); 
        s.addChild(s1); 
        RESULT=s;
        
:}| LP:lp CIERRE S:s1{:
        GenericTreeNode s = new GenericTreeNode(new Tipo("S", "S")); 
        s.addChild(lp); 
        s.addChild(s1); 
        RESULT=s;
        
:}| EC:ec{:
        GenericTreeNode s = new GenericTreeNode(new Tipo("S", "S")); 
        s.addChild(ec); 
        RESULT=s; 
        
:}| MET:met CIERRE S:s1{: 
        GenericTreeNode s = new GenericTreeNode(new Tipo("S", "S")); 
        s.addChild(met);
        s.addChild(s1); 
        RESULT=s;
:}|error S;

SA ::= ID:id ASSIG AR:ar{: 
        GenericTreeNode sa = new GenericTreeNode(new Tipo("SA", "SA"));
        GenericTreeNode i = new GenericTreeNode(new Tipo(id, id)); 
        sa.addChild(i); 
        sa.addChild(ar);
        
        /*if(simbolo.buscarTipo(id).equals(simbolo.getTipo()))
            System.out.println("correcto");
        else
            System.err.println("Esta asignando un tipo distinto a la variable: "+id+","+ " tipo correcto: "+simbolo.buscarTipo(id));*/

        RESULT=sa; 
:};

AR ::= AR:ar OPSUMA AM:am{:

        GenericTreeNode a= new GenericTreeNode(new Tipo("AR","AR"));
        a.addChild(ar);
        a.addChild(am); 
        RESULT=a;

        /*String tipov = "";
        String tipov2 = "";

        if(simbolo.isinteger(am.toString())){
           tipov="Integer";
        }else{
            //System.out.println(simbolo.buscarTipo(am.toString()));
            tipov=simbolo.buscarTipo(am.toString());
        }
        if(simbolo.isinteger(ar.toString())){
           tipov2="Integer";
        }else{
            //System.out.println(simbolo.buscarTipo(am.toString()));
            tipov2=simbolo.buscarTipo(ar.toString());
        }
        //System.out.println(tipov);
        if(tipov.equals(tipov2) && tipov.equals("Integer")){
            simbolo.creartipo(tipov);
        }else{
            System.err.println("Solo se pueden sumar o restar Enteros");
        }*/
        
:} | AM:am{:
        GenericTreeNode a= new GenericTreeNode(new Tipo("AM", am.getData().getTipo()));
        a.addChild(am); 
        RESULT=a;

        /*String tipov="";
        if(am.toString()=="VCHAR"){
                tipov = "char";
                simbolo.creartipo(tipov);
        }else if(simbolo.isinteger(am.toString())==true){
                tipov = "Integer";
                simbolo.creartipo(tipov);
        }else{
            tipov=simbolo.buscarTipo(am.toString());
            simbolo.creartipo(tipov);
        }*/
:};

AM ::= AM:am OP F:val {:
        GenericTreeNode a= new GenericTreeNode(new Tipo("AM", am.getData().getTipo()));
        a.addChild(am);
        a.addChild(val); 
        RESULT=a;

        /*String tipov = "";
        String tipov2 = "";
    
        if(simbolo.isinteger(am.toString())==true){
           tipov="Integer";
        }else{
            //System.out.println(simbolo.buscarTipo(am.toString()));
            tipov=simbolo.buscarTipo(am.toString());
        }
        if(simbolo.isinteger(val.toString())==true){
           tipov2="Integer";
        }else{
            //System.out.println(simbolo.buscarTipo(am.toString()));
            tipov2=simbolo.buscarTipo(val.toString());
        }
        //System.out.println(tipov);
        if(tipov.equals(tipov2) && tipov.equals("Integer")){
            simbolo.creartipo(tipov);
        }else{
            System.err.println("Solo se pueden multiplicar o dividir Enteros");
        }*/

:} | F:val{:
        GenericTreeNode a= new GenericTreeNode(new Tipo("VAL", val.getData().getNombre()));
        a.addChild(val); 
        RESULT=a;

        /*String tipov="";
        if(val.toString()=="VCHAR"){
                tipov = "char";
                simbolo.creartipo(tipov);
        }else if(simbolo.isinteger(val.toString())==true){
                tipov = "Integer";
                simbolo.creartipo(tipov);
        }else{
            tipov=simbolo.buscarTipo(val.toString());
            simbolo.creartipo(tipov);
        }*/
:};

F ::= EXPRESION:ex{:
        GenericTreeNode f= new GenericTreeNode(new Tipo("EX", ex.getData().getNombre()));
        f.addChild(ex); 
        RESULT=f;

        /*String tipov = "";
        if(ex.toString()=="VCHAR"){
                tipov = "char";
                simbolo.creartipo(tipov);
        }else if(simbolo.isinteger(ex.toString())==true){
                tipov = "Integer";
                simbolo.creartipo(tipov);
        }else{
            tipov=simbolo.buscarTipo(ex.toString());
            simbolo.creartipo(tipov);
        }*/

:} | PARIZQ AR:ar PARDER{:
        GenericTreeNode f= new GenericTreeNode(new Tipo("F", "F")); 
        f.addChild(ar); 
        RESULT=f;
:};

OP ::= OPMULT:op{:
        RESULT=op;

:}|DIV:op{:
        RESULT=op;

:}|MOD:op{:
        RESULT=op;
:};

OL ::= OPLOG:op{:
        RESULT=op;

:}|OR:op{:
        RESULT=op;

:}|NOT:op{:
        RESULT=op;

:}|AND:op{:
        RESULT=op;
:};

EXPRESION ::= LITERAL:lt {:
        GenericTreeNode ex = new GenericTreeNode(new Tipo("LT", lt.getData().getTipo()));
        ex.addChild(lt);
        RESULT=ex;

:} | ID:id{:
        GenericTreeNode ex = new GenericTreeNode(new Tipo(id, id));
        GenericTreeNode i = new GenericTreeNode(new Tipo(id, id));
        ex.addChild(i);
        RESULT=ex;

:}|LF:lf{:
        GenericTreeNode ex = new GenericTreeNode(new Tipo("FUNCION","FUNCION") );
        ex.addChild(lf);
        RESULT=ex;
:};

LITERAL ::= NUM:n{:
        String num = String.valueOf(n);
        GenericTreeNode lt = new GenericTreeNode(new Tipo(num, num));
        RESULT=lt;

:} | VCHAR:vc{:
        GenericTreeNode lt = new GenericTreeNode(new Tipo("VCHAR", "VCHAR"));
        RESULT=lt;

:} | BOOL:bl{:
        GenericTreeNode lt = new GenericTreeNode(new Tipo(bl, bl));
        RESULT=lt;

:} | VSTRING:vs{:
        GenericTreeNode lt = new GenericTreeNode(new Tipo("VSTRING", "VSTRING"));
        RESULT=lt;
:};

LF ::= ID:i PARIZQ PAV:pfv PARDER{:
        GenericTreeNode lf= new GenericTreeNode(new Tipo("LF", "LF"));
        GenericTreeNode id= new GenericTreeNode(new Tipo(i, i));
        lf.addChild(id);
        lf.addChild(pfv);
        RESULT=lf;
:};

PAV ::= PAV:pa CIERRE EXPRESION:ex {:
        GenericTreeNode pav= new GenericTreeNode(new Tipo("PAV", "PAV"));
        pav.addChild(pa);
        pav.addChild(ex);
        RESULT=pav;
:};

PAV ::= EXPRESION:ex {:
        GenericTreeNode pav= new GenericTreeNode(new Tipo("PAV", "PAV"));
        pav.addChild(ex);
        RESULT=pav;
:};

LP ::= ID:id PARIZQ PAV:pa PARDER{:
        GenericTreeNode lp = new GenericTreeNode(new Tipo("LP", "LP"));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        lp.addChild(i);
        lp.addChild(pa);
        RESULT=lp;
:};

EC ::= EA:is{:
        GenericTreeNode ec = new GenericTreeNode(new Tipo("EC", "EC"));
        ec.addChild(is);
        RESULT=ec;

:}|ER:er{:
        GenericTreeNode ec = new GenericTreeNode(new Tipo("EC", "EC"));
        ec.addChild(er);
        RESULT=ec;
:};

EA ::= IS:is{:
        GenericTreeNode ec = new GenericTreeNode(new Tipo("EA", "EA"));
        ec.addChild(is);
        RESULT=ec;
:};

IS ::= IF:ifc CONDICION:cd THEN:tn S:s IDO:ido{:
        GenericTreeNode is = new GenericTreeNode(new Tipo("IS", "IS"));
        GenericTreeNode fi = new GenericTreeNode(new Tipo(ifc, ifc));
        GenericTreeNode ten = new GenericTreeNode(new Tipo(tn, tn));
        is.addChild(fi);
        is.addChild(cd);
        is.addChild(ten);
        is.addChild(s);
        is.addChild(s);
        RESULT=is;
:};

IDO ::= ELSE:el S:s1{:
        GenericTreeNode ido = new GenericTreeNode(new Tipo("IDO", "IDO"));
        GenericTreeNode els = new GenericTreeNode(new Tipo("el", "el"));
        ido.addChild(els);
        ido.addChild(s1);
        RESULT=ido;
:};

ER ::= RW:rw {:
        GenericTreeNode er = new GenericTreeNode(new Tipo("ER", "ER"));
        er.addChild(rw);
        RESULT=er;

:} | RR:rr {:
        GenericTreeNode er = new GenericTreeNode(new Tipo("ER", "ER"));
        er.addChild(rr);
        RESULT=er;

:} | RF:rf {:
        GenericTreeNode er = new GenericTreeNode(new Tipo("ER", "ER"));
        er.addChild(rf);
        RESULT=er;
:};

RW ::= WHILE:wl CONDICION:cd DO:d S:s {:
        GenericTreeNode rw = new GenericTreeNode(new Tipo("RW", "RW"));
        GenericTreeNode f = new GenericTreeNode(new Tipo(wl, wl));
        GenericTreeNode tt = new GenericTreeNode(new Tipo(d, d));
        rw.addChild(f);
        rw.addChild(cd);
        rw.addChild(tt);
        rw.addChild(s);
        RESULT= rw;
:};

RR ::= REPEAT:rp S:s UNTIL:ul CONDICION:cd {:
        GenericTreeNode rr = new GenericTreeNode(new Tipo("RR", "RR"));
        GenericTreeNode f = new GenericTreeNode(new Tipo(rp, rp));
        GenericTreeNode tt = new GenericTreeNode(new Tipo(ul, ul));
        rr.addChild(f);
        rr.addChild(s);
        rr.addChild(tt);
        rr.addChild(cd);
        RESULT= rr;
:};

RF ::= FOR:fr SA:sa TO:t EXPRESION:ex DO:d S:s {:
        GenericTreeNode rf = new GenericTreeNode(new Tipo("RF", "RF"));
        GenericTreeNode f = new GenericTreeNode(new Tipo(fr, fr));
        GenericTreeNode tt = new GenericTreeNode(new Tipo(t, t));
        GenericTreeNode dd = new GenericTreeNode(new Tipo(d, d));
        rf.addChild(f);
        rf.addChild(sa);
        rf.addChild(tt);
        rf.addChild(ex);
        rf.addChild(dd);
        rf.addChild(s);
        RESULT= rf;

:} | FOR:fr SA:sa DOWNTO:t EXPRESION:ex DO:d S:s {:
        GenericTreeNode rf = new GenericTreeNode(new Tipo("RF", "RF"));
        GenericTreeNode f = new GenericTreeNode(new Tipo(fr, fr));
        GenericTreeNode tt = new GenericTreeNode(new Tipo(t, t));
        GenericTreeNode dd = new GenericTreeNode(new Tipo(d, d));
        rf.addChild(f);
        rf.addChild(sa);
        rf.addChild(tt);
        rf.addChild(ex);
        rf.addChild(dd);
        rf.addChild(s);
        RESULT= rf;
:};

CONDICION ::= EX:ex OL CONDICION:ex2{:
        GenericTreeNode eb = new GenericTreeNode(new Tipo("CONDICION", "CONDICION"));
        eb.addChild(ex);
        eb.addChild(ex2);
        RESULT=eb;

:}|EX:ar{:
        GenericTreeNode ex = new GenericTreeNode(new Tipo("EB", "EB"));
        ex.addChild(ar);
        RESULT=ex;
:};

EX ::= AR:ar{:
        GenericTreeNode ex = new GenericTreeNode(new Tipo("EXPRESION", "EXPRESION"));
        ex.addChild(ar);
        RESULT=ex;
:};

MET ::= ESCR:wt{:
        GenericTreeNode met = new GenericTreeNode(new Tipo("metodo", "metodo"));
        met.addChild(wt);
        RESULT=met;
:};

ESCR ::= WRITE:wt PARIZQ VSTRING:vs WRT:wrt PARDER {:
        GenericTreeNode escr = new GenericTreeNode(new Tipo(wt, wt));
        GenericTreeNode str = new GenericTreeNode(new Tipo(vs, vs));
        escr.addChild(str);
        escr.addChild(wrt);
        RESULT=escr;

:} | LEER:lr{:
        GenericTreeNode escr = new GenericTreeNode(new Tipo("READ", "READ"));
        escr.addChild(lr);
        RESULT=escr;
:};

WRT ::= COMA ID:id{:
        GenericTreeNode wrt= new GenericTreeNode(new Tipo("WRT", "WRT"));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        wrt.addChild(i);
        RESULT=wrt;

:}|{:
        GenericTreeNode wrt= new GenericTreeNode(new Tipo("WRT", "WRT"));
        RESULT=wrt;
:};

LEER ::= READ:rd PARIZQ ID:id PARDER{:
        GenericTreeNode leer = new GenericTreeNode(new Tipo(rd, rd));
        GenericTreeNode i = new GenericTreeNode(new Tipo(id, id));
        leer.addChild(i);
        RESULT=leer;
:};

COMENT ::= COMENTARIO:cm{:
        RESULT=cm;
:}|;