import java_cup.runtime.*;
import java.io.FileReader;
import java.util.*;
parser code {:
    
    @Override
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" en la linea "+(s.left + 1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
            m.append(" "+s.value.toString());
        }
        System.err.println(m);
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error(message, info);
        System.exit(1); //To change body of generated methods, choose Tools | Templates.
    }
    
    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            parser p = new parser(
                    new Proyecto( new FileReader(args[0])));
            Object result = p.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    TablaSimbolos simbolo = new TablaSimbolos();
    TablaSimbolosFunciones tfuncion = new TablaSimbolosFunciones();
    TablaFunsiones fun = new TablaFunsiones();
    boolean Declaracion = true;
    boolean Funcion = false;
    boolean FCParametro = false;
    String ambito = "main";
    String idMetodo = "";
    String ambitoF = ambito;
    int contador = 0;
    String dominio="";
    String dominioL="";
    int num_parametros=0;

    TablaIntermedio tabla = new TablaIntermedio();
    ArrayList<String> valores = new ArrayList<String>();
    boolean pase = false;
    int contador2 = 0;





:};

action code{:

    public GenericTreeNode comprobar(GenericTreeNode a, String muro){
          if (a.getData().getNombre().equals(muro) && a.hasChildren()){


            return comprobar(a.getChildren().get(0), muro);

          }
          else {
            return a;
          }
        }



        public void inta(List<GenericTreeNode> listaNodos){

          for( int i = 0 ; i < listaNodos.size() ; i++ ) {

            GenericTreeNode padreNodo = listaNodos.get(i);
            String padreNombre = padreNodo.getData().getNombre();


            List<GenericTreeNode> actualHijos = padreNodo.getChildren();
            System.out.println("nPadre: "+padreNombre);
            ArrayList<String> temporal = new ArrayList<String>();
            for (int j = 0; j < actualHijos.size(); j++) {

              GenericTreeNode hijoNodo = actualHijos.get(j);
              String hijoNombre = hijoNodo.getData().getNombre();

              System.out.println("nHijo: "+hijoNombre);
              if(TablaSimbolos.isinteger(hijoNombre)==false) {
                pase = false;
                if (hijoNodo.hasChildren()) {

                  List<GenericTreeNode> ultimoHijos = new ArrayList<GenericTreeNode>();
                  if ((hijoNodo.getNumberOfChildren() == 1) && (!hijoNombre.equals(hijoNodo.getChildren().get(0).getData().getNombre())) && (TablaSimbolos.isinteger(hijoNodo.getChildren().get(0).getData().getNombre()))) {

                    GenericTreeNode ultimo = comprobar(hijoNodo, hijoNombre);
                    hijoNodo.setChildren(ultimo.getChildren());
                    pase = true;
                    if (padreNombre.equals("SA")) {
                      temporal.add(":=");
                      temporal.add(hijoNodo.getChildren().get(0).getData().getNombre());
                      //tabla.Ingresar(":=", "", hijoNombre);
                      //valores.add(hijoNombre);
                      //valores.add(":=");
                    } else if (padreNodo.getData().getNombre().equals("AR")) {
                      temporal.add("+");
                      temporal.add(hijoNodo.getChildren().get(0).getData().getNombre());
                      System.out.println("se agrego:");
                      System.out.println(temporal);

                    } else if (padreNodo.getData().getNombre().equals("AM")) {
                      temporal.add("*");
                      temporal.add(hijoNodo.getChildren().get(0).getData().getNombre());
                      System.out.println("se agrego:");
                      System.out.println(temporal);


                    } else {
                      //valores.add(hijoNombre);
                      //valores.add(temp);
                      //contador2++;
                    }


                  } else {

                    ultimoHijos.add(hijoNodo);
                    inta(ultimoHijos);




                  }


                }else {

                  pase = true;

                  if (padreNombre.equals("SA")){
                    temporal.add(":=");
                    temporal.add(hijoNombre);

                    System.out.println("se agrego:");
                    System.out.println(temporal);
                  }

                  else if(padreNodo.getData().getNombre().equals("AR")){
                    temporal.add("+");
                    temporal.add(hijoNombre);
                    // tabla.Ingresar("+", hijoNombre, "", "");
                    //valores.add(hijoNombre);
                    //valores.add("+");

                  }
                  else if(padreNodo.getData().getNombre().equals("AM")){
                    temporal.add("*");
                    temporal.add(hijoNombre);

                    //tabla.Ingresar("*", hijoNombre, "", "");
                    //valores.add(hijoNombre);
                    //valores.add("*");
                  }
                  else {
                    //valores.add(hijoNombre);
                    //valores.add(temp);
                    //contador2++;
                  }
                }
              }
              else {

                pase = true;

                if (padreNombre.equals("SA")){
                  temporal.add(":=");
                  temporal.add(hijoNombre);

                }

                else if(padreNodo.getData().getNombre().equals("AR")){
                  temporal.add("+");
                  temporal.add(hijoNombre);

                }
                else if(padreNodo.getData().getNombre().equals("AM")){
                  temporal.add("*");
                  temporal.add(hijoNombre);

                }
                else {
                  //valores.add(hijoNombre);
                  //valores.add(temp);
                  //contador2++;
                }
              }

            }
            if(temporal.size()==2){
                for (int k = 0; k < valores.size(); k++) {
                  temporal.add(valores.get(k));
                }
              pase = true;
              valores.clear();
              }



            if (pase) {

              if (temporal.get(0).equals("*")){
                if (temporal.size() == 2){
                  for (int k = 0; k < temporal.size();  k++) {
                    valores.add(temporal.get(k));
                  }
                }else {
                  if (contador2 == 0) {
                    String temp = "temp" + contador2;
                    tabla.Ingresar("*", temporal.get(1), temporal.get(3), temp);
                    valores.add("*");
                    valores.add(temp);
                    contador2++;
                  } else {
                    String temp = "temp" + (contador2 - 1);
                    String temp1 = "temp" + contador2;
                    tabla.Ingresar("*", temporal.get(1), temp, temp1);
                    valores.add("*");
                    valores.add(temp1);
                    contador2++;
                  }
                }


              }
              else if (temporal.get(0).equals("+")){
                if (temporal.size() == 2){
                  for (int k = 0; k < temporal.size();  k++) {
                    valores.add(temporal.get(k));
                  }
                }else{
                    if(contador2==0){

                    String temp = "temp"+contador2;
                    tabla.Ingresar("+", temporal.get(1), temporal.get(3), temp);
                    valores.add("+"); valores.add(temp);
                    contador2++;


                }else{
                  String temp = "temp"+(contador2-1);
                  String temp1 = "temp"+contador2;
                  tabla.Ingresar("+", temporal.get(1), temp, temp1);
                      valores.add("+"); valores.add(temp1);
                  contador2++;
                }
              }
              }else if (temporal.get(0).equals(":=")){
                if(contador2==0){
                  if(temporal.size() == 2){
                    String temp = "temp"+contador2;
                    tabla.Ingresar(":=", temporal.get(1),temp);
                    contador2++;
                  }else{
                    String temp = "temp"+(contador2);
                    tabla.Ingresar(":=", temporal.get(3),temp);
                    tabla.Ingresar(":=",temp, temporal.get(1));
                    contador2++;
                  }

                }else{
                  if(temporal.size() == 2){
                    String temp = "temp"+(contador2-1);
                    tabla.Ingresar(":=", temporal.get(1),temp);
                    contador2++;
                  }else{
                    String temp = "temp"+(contador2-1);
                    tabla.Ingresar(":=", temporal.get(3),temp);
                    tabla.Ingresar(":=",temp, temporal.get(1));
                    contador2++;
                  }
                }
              }
              pase = false;
              tabla.eliminar();
              tabla.PrintTabla();
              /*System.out.println(va);
              String operador = valores.get(0);
              String arg1 = valores.get(2);
              String result = valores.get(3);

              tabla.Ingresar(operador, arg1, result);

              String arg2 = valores.get(3);
              String result2 = valores.get(1);

              tabla.Ingresar(operador, arg2, result2);*/
            }


             // valores.clear();

          }
        }

:};

terminal String ASSIG, DECLARACION, LLAVEIZQ, LLAVEDER, PARIZQ, PARDER, COMA, CORCHETEDER, CORCHETEIZQ, PUNTO;
terminal String OF,IF,ELSE,THEN,WHILE,DO,REPEAT,UNTIL,FOR,TO,DOWNTO,PROGRAM,BEGIN,END,PROCEDURE,FUNCTION,VAR, COMENTARIO, DIV, MOD, OR, NOT,AND;
terminal String CIERRE;
terminal String BOOL,ID,VCHAR, VSTRING, INTEGER, BOOLEAN, CHAR, STRING,ARRAY, OPSUMA, OPMULT, OPLOG, READ, WRITE;
terminal Integer NUM;

non terminal GenericTree Programa;
non terminal GenericTreeNode CP;
non terminal GenericTreeNode ZD;
non terminal GenericTreeNode CUP, CUF, CUPR;
non terminal GenericTreeNode ZDV;
non terminal GenericTreeNode DE;
non terminal GenericTreeNode TD;
non terminal GenericTreeNode TS, DEI;
non terminal GenericTreeNode TE;
non terminal GenericTreeNode TA, TST;
non terminal GenericTreeNode SC, S, SA, SCI;
non terminal GenericTreeNode LITERAL, EXPRESION, CONDICION, CONDICIONOPL;
non terminal GenericTreeNode LF,LP, LA;
non terminal GenericTreeNode IS,IDO,EC,ER, EA;
non terminal GenericTreeNode RW, RR, RF;
non terminal GenericTreeNode CF, CPR, AM, F, EX, WRT;
non terminal GenericTreeNode TEL, LEER, IDA;
non terminal GenericTreeNode DP, DF, DSP, ZDSP, AR, ESCR, MET, PAV;
non terminal String OP,OL, OPL;

Programa ::= CP:cp ZD:zd CUP:cup{:
        GenericTree tree= new GenericTree();
        GenericTreeNode pro= new GenericTreeNode(new Tipo("Programa", "Programa"));
        pro.addChild(cp);
        pro.addChild(zd);
        pro.addChild(cup);
        tree.setRoot(pro);

                System.out.println("Raiz:"+tree.getRoot());
                System.out.println("--------------------------");
                for (int i = 0; i < tree.list().size(); i++) {
                    System.out.println("Padre:"+tree.list().get(i).getData().getNombre());
                    System.out.println();
                    System.out.println("Hijos:"+tree.Imprimir(i));
                    System.out.println("-------------------------------");
                }
        //simbolo.imprimir();
        //tfuncion.imprimir();
        List<GenericTreeNode> spunki = tree.buscar("SA");
        inta(spunki);
:};

CP ::= PROGRAM:p ID:i CIERRE{:
        GenericTreeNode cp= new GenericTreeNode(new Tipo("CP", "CP"));
        GenericTreeNode pr= new GenericTreeNode(new Tipo(p, p));
        GenericTreeNode id= new GenericTreeNode(new Tipo(i, i));
        cp.addChild(pr);
        cp.addChild(id);
        RESULT=cp;
:}|error ZD;

ZD ::= ZDV:zdv ZDSP:zdsp{:
        GenericTreeNode zd = new GenericTreeNode(new Tipo("ZD","ZD"));
        zd.addChild(zdv);
        zd.addChild(zdsp);
        RESULT=zd;
:};

ZDV ::= VAR:var DE:de{:
        GenericTreeNode zdv= new GenericTreeNode(new Tipo("ZDV", "ZDV"));
        GenericTreeNode v= new GenericTreeNode(new Tipo(var, var));
        zdv.addChild(v);
        zdv.addChild(de);
        RESULT=zdv;
:}|error DE;

DE ::= DEI:dei DE:d {:
        GenericTreeNode de= new GenericTreeNode(new Tipo("DE", "DE"));
        de.addChild(dei);
        de.addChild(d);
        RESULT=de;
:}
|DEI:dei{:
        GenericTreeNode de= new GenericTreeNode(new Tipo("DE", "DE"));
        de.addChild(dei);
        RESULT=de;
:};

DEI ::= ID:id COMA DEI:de{: 
        String tipo= "";
        if(Declaracion == true){
            simbolo.crear(id, de.getData().getTipo(),ambito);
            tipo = de.getData().getTipo();
        }else if((Funcion== true)&&(FCParametro==false)){
            
            if(de.getData().getTipo().equals("Integer")){
                contador = contador + 4;
            }else{
                contador = contador + 1;
            }
            tfuncion.crear(id, de.getData().getTipo(),ambito, contador);
            tipo = de.getData().getTipo();
        }else if((Funcion== true)&&(FCParametro==true)){
            num_parametros = num_parametros + 1;
            dominio = dominio+" X "+de.getData().getTipo();
            tipo = de.getData().getTipo();
        }

        GenericTreeNode dei= new GenericTreeNode(new Tipo("DEI", tipo));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        dei.addChild(i);
        dei.addChild(de);
        RESULT=dei;
:}
| ID:id DECLARACION TD:td CIERRE{:
        String tipo="";
        if(Declaracion == true){
            simbolo.crear(id, td.getData().getTipo(),ambito);
            tipo = td.getData().getTipo();

        }
        if((Funcion == true) && (FCParametro==false)) {
            if(td.getData().getTipo().equals("Integer")){
                contador = contador + 4;
            }else{
                contador = contador + 1;
            }
            tfuncion.crear(id, td.getData().getTipo(),ambito, contador);
            tipo = td.getData().getTipo();
        }else if((Funcion == true) && (FCParametro==true)){
            num_parametros = num_parametros + 1;
            tipo = td.getData().getTipo();

            if(dominio.isEmpty() == true){
                dominio = td.getData().getTipo();
            }else{
                dominio = dominio+" X "+td.getData().getTipo();
            }
        }

        GenericTreeNode dei= new GenericTreeNode(new Tipo("DEI", tipo));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        dei.addChild(i);
        dei.addChild(td);
        RESULT=dei;
:};

TD ::= TS:ss {:
        GenericTreeNode td = new GenericTreeNode(new Tipo(ss.getData().getNombre(), ss.getData().getTipo()));
        td.addChild(ss);
        RESULT=td;
:}
| TE:te{:
        GenericTreeNode td = new GenericTreeNode(new Tipo(te.getData().getNombre(), te.getData().getTipo()));
        td.addChild(te);
        RESULT=td;
:}|error ZDSP;

TS ::= INTEGER:in{:
        GenericTreeNode ts= new GenericTreeNode(new Tipo(in, in));
        RESULT= ts;
:}
| CHAR:c{:
        GenericTreeNode ts= new GenericTreeNode(new Tipo(c, c));
        RESULT= ts;
:}
| BOOLEAN:b{:
        GenericTreeNode ts= new GenericTreeNode(new Tipo(b, b));
        RESULT= ts;
:};

TE ::= TA:ta{:
        GenericTreeNode te = new GenericTreeNode(new Tipo(ta.getData().getNombre(), ta.getData().getTipo()));
        te.addChild(ta);
        RESULT=te;
:}
| TST:tst{:
        GenericTreeNode te = new GenericTreeNode(new Tipo(tst.getData().getNombre(), tst.getData().getTipo()));
        te.addChild(tst);
        RESULT=te;
:};

TA ::= ARRAY:ar LLAVEIZQ:li NUM:n PUNTO PUNTO NUM:n1 LLAVEDER:ld OF:o TD:td{:
        String tipo = ar+"("+n+".."+n1+","+td.getData().getTipo()+")";

        GenericTreeNode ta = new GenericTreeNode(new Tipo("TA", tipo));
        GenericTreeNode s = new GenericTreeNode(new Tipo(ar, ar));
        GenericTreeNode f = new GenericTreeNode(new Tipo(o, o));
        GenericTreeNode num = new GenericTreeNode(new Tipo("NUM", "NUM"));
        GenericTreeNode num2 = new GenericTreeNode(new Tipo("NUM2", "NUM2"));
        ta.addChild(s);
        ta.addChild(num);
        ta.addChild(num2);
        ta.addChild(f);
        ta.addChild(td);
        RESULT=ta;
:};

TST ::= STRING:st LLAVEIZQ:li NUM:n LLAVEDER:ld{:
        String tipo = "Array"+"("+1+".."+n+","+"String"+")";

        GenericTreeNode tst = new GenericTreeNode(new Tipo("TST", tipo));
        GenericTreeNode s = new GenericTreeNode(new Tipo(st, st));
        GenericTreeNode num = new GenericTreeNode(new Tipo("NUM", "NUM"));
        tst.addChild(s);
        tst.addChild(num);
        RESULT=tst;
:};

ZDSP ::= DSP:dsp{:
        GenericTreeNode zdsp = new GenericTreeNode(new Tipo("ZDSP", "ZDSP"));
        zdsp.addChild(dsp);
        RESULT=zdsp;
:}
|{:
        GenericTreeNode vacio = new GenericTreeNode(new Tipo("", ""));
        RESULT=vacio;
:};

DSP ::= DF:df ZDSP:zd{:
        GenericTreeNode dsp = new GenericTreeNode(new Tipo("DSP", "DSP"));
        dsp.addChild(df);
        dsp.addChild(zd);
        RESULT=dsp;
:}
| DP:dp ZDSP:zd{:
        GenericTreeNode dsp = new GenericTreeNode(new Tipo("DSP", "DSP"));
        dsp.addChild(dp);
        dsp.addChild(zd);
        RESULT=dsp;
:};

DF ::= CF:fc ZD:zd CUF:sc{:
        GenericTreeNode df = new GenericTreeNode(new Tipo("DF", "DF"));
        df.addChild(fc);
        df.addChild(zd);
        df.addChild(sc);
        RESULT=df;
:};

CF ::= FUNCTION:ft ID:id DECLARACION TEL:tel CIERRE {:
        GenericTreeNode proce= new GenericTreeNode(new Tipo("FUNCION", "FUNCION"));
        GenericTreeNode fc= new GenericTreeNode(new Tipo(ft, ft));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        proce.addChild(fc);
        proce.addChild(i);
        proce.addChild(tel);

        contador = 0;
        Declaracion = false;
        Funcion = true;
        idMetodo = id;
        tfuncion.crearid(id);
        fun.crear(id, "void->"+tel.getData().getTipo(), ambito, "void", tel.getData().getTipo(), num_parametros);
        ambitoF = ambitoF+"."+idMetodo;
        ambito = ambitoF;

        RESULT=proce;
:}
| FUNCTION:ft ID:id PARIZQ{:
        Declaracion = false;
        Funcion = true; FCParametro =true;
:}

DE:pfv PARDER DECLARACION TEL:tel CIERRE{:
        GenericTreeNode proce= new GenericTreeNode(new Tipo("FUNCION", "FUNCION"));
        GenericTreeNode fc= new GenericTreeNode(new Tipo(ft, ft));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        proce.addChild(fc);
        proce.addChild(i);
        proce.addChild(pfv);
        proce.addChild(tel);
        RESULT=proce;
        contador=0;
        tfuncion.crearid(id);
        idMetodo = id;
        fun.crear(id, dominio+"->"+tel.getData().getTipo(), ambito, dominio, tel.getData().getTipo(),num_parametros);
        FCParametro = false;
        Declaracion = false;
        Funcion = true;
        ambitoF = ambitoF+"."+idMetodo;
        ambito = ambitoF;
        dominio="";
        num_parametros = 0;
:};

TEL ::= TS:ts{:
        GenericTreeNode tel = new GenericTreeNode(new Tipo(ts.getData().getNombre(), ts.getData().getTipo()));
        tel.addChild(ts);
        RESULT= tel;
:}
| TST:tst{:
        GenericTreeNode tel = new GenericTreeNode(new Tipo(tst.getData().getNombre(), tst.getData().getTipo()));
        tel.addChild(tst);
        RESULT= tst;
:};

CUF ::= SC:sc{:
        GenericTreeNode cup = new GenericTreeNode(new Tipo("CUF", "CUF"));
        cup.addChild(sc);

        ambito=tfuncion.quitarAmbito(ambito,tfuncion.getId());
        ambitoF=ambito;
        RESULT=cup;
:}|error CUP;

DP ::= CPR:pc ZD:zd CUPR:sc{:
        GenericTreeNode dp = new GenericTreeNode(new Tipo("DP", "DP"));
        dp.addChild(pc);
        dp.addChild(zd);
        dp.addChild(sc);
        RESULT=dp;
:};


CPR ::= PROCEDURE:pc ID:id CIERRE{:
        GenericTreeNode proce= new GenericTreeNode(new Tipo("PROCEDURE", "PROCEDURE"));
        GenericTreeNode p= new GenericTreeNode(new Tipo(pc, pc));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        proce.addChild(p);
        proce.addChild(i);
        contador = 0;
        Declaracion = false;
        Funcion = true;
        idMetodo = id;
        tfuncion.crearid(id);
        fun.crear(id, "void->void", ambito, "void","void",num_parametros);
        ambito = ambito+"."+idMetodo;
        RESULT=proce;
:}
| PROCEDURE:pc ID:id PARIZQ{:
        Declaracion = false;
        Funcion = true;
        FCParametro =true;
:}

DE:pf PARDER CIERRE{:
        GenericTreeNode proce= new GenericTreeNode(new Tipo("PROCEDURE", "PROCEDURE"));
        GenericTreeNode p= new GenericTreeNode(new Tipo(pc, pc));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        GenericTreeNode pa= new GenericTreeNode(new Tipo(pf.getData().getNombre(), pf.getData().getTipo()));
        proce.addChild(p);
        proce.addChild(i);
        proce.addChild(pa);
        contador=0;
        tfuncion.crearid(id);
        idMetodo = id;
        fun.crear(id, dominio+"->void", ambito, dominio, "void",num_parametros);
        FCParametro = false;
        Declaracion = false;
        Funcion = true;
        ambitoF = ambitoF+"."+idMetodo;
        ambito = ambitoF;
        dominio="";
        num_parametros = 0;

        RESULT=proce;
:};

CUPR ::= SC:sc{:
        GenericTreeNode cup = new GenericTreeNode(new Tipo("CUPR", "CUPR"));
        cup.addChild(sc);

        ambito=tfuncion.quitarAmbito(ambito,tfuncion.getId());
        ambitoF=ambito;

        RESULT=cup;
:}|error CUP;

CUP ::= SC:sc{:
        GenericTreeNode cup = new GenericTreeNode(new Tipo("CUP", "CUP"));
        cup.addChild(sc);
        RESULT=cup;
:};

SC ::= BEGIN:bn S:s END:ed PUNTO{:
        GenericTreeNode sc = new GenericTreeNode(new Tipo("SC", "SC"));
        GenericTreeNode bg = new GenericTreeNode(new Tipo(bn, bn));
        GenericTreeNode e = new GenericTreeNode(new Tipo(ed, ed));
        sc.addChild(bg);
        sc.addChild(s);
        sc.addChild(e);
        RESULT=sc;
:};

SCI ::= BEGIN:bn S:s END:ed CIERRE{:
        GenericTreeNode sc = new GenericTreeNode(new Tipo("SC", "SC"));
        GenericTreeNode bg = new GenericTreeNode(new Tipo(bn, bn));
        GenericTreeNode e = new GenericTreeNode(new Tipo(ed, ed));
        sc.addChild(bg);
        sc.addChild(s);
        sc.addChild(e);
        RESULT=sc;
:};

S ::= SA:sa CIERRE S:s1{:
        GenericTreeNode s = new GenericTreeNode(new Tipo("S", "S"));
        s.addChild(sa);
        s.addChild(s1);
        RESULT=s;
:}
|{:
        GenericTreeNode vacio= new GenericTreeNode(new Tipo("", ""));
        RESULT=vacio;
:}
| SCI:sc S:s1{:
        GenericTreeNode s = new GenericTreeNode(new Tipo("S", "S"));
        s.addChild(sc);
        s.addChild(s1);
        RESULT=s;
:}
| LP:lp CIERRE S:s1{:
        GenericTreeNode s = new GenericTreeNode(new Tipo("S", "S"));
        s.addChild(lp);
        s.addChild(s1);
        RESULT=s;
:}
| EC:ec{:
        GenericTreeNode s = new GenericTreeNode(new Tipo("S", "S"));
        s.addChild(ec);
        RESULT=s;
:}
| MET:met CIERRE S:s1{:
        GenericTreeNode s = new GenericTreeNode(new Tipo("S", "S"));
        s.addChild(met);
        s.addChild(s1);
        RESULT=s;
:}|error S;

SA ::= IDA:id ASSIG AR:ar{:
        GenericTreeNode sa = new GenericTreeNode(new Tipo("SA", "SA"));
        sa.addChild(id);
        sa.addChild(ar);
        if(ar.getData().getTipo().equals("VSTRING")){
            if(simbolo.buscarTipo(id.getData().getNombre())!=null){
               String tipo = simbolo.buscarTipo(id.getData().getNombre()).substring(9,simbolo.buscarTipo(id.getData().getNombre()).length()-8);
                    int m = Integer.parseInt(tipo);
                    if(m>=ar.getData().getNombre().length()){
                       System.out.println("correcto"); 
                    }else{
                        System.err.println("El tamaño del string es mayor al de la variable: "+id);
                    }  
            }else if(tfuncion.buscarTipo(id.getData().getNombre())!=null){
               String tipo = tfuncion.buscarTipo(id.getData().getNombre()).substring(9,tfuncion.buscarTipo(id.getData().getNombre()).length()-8);
                    int m = Integer.parseInt(tipo);
                    if(m>=ar.getData().getNombre().length()){
                       System.out.println("correcto"); 
                    }else{
                        System.err.println("El tamaño del string es mayor al de la variable: "+id);
                    }  
            }else{
                System.err.println("No se encuentra: ");
            }
                       
            }else
                if(id.getData().getTipo().equals(ar.getData().getTipo()))
                    System.out.println("correcto");
                else
                    System.err.println("Esta asignando un tipo distinto a la variable: "+id.getData().getNombre()+","+ " tipo correcto: "+id.getData().getTipo());
        RESULT=sa;
:};

IDA ::= ID:id{:String tipo = "";
        if(simbolo.buscar(id)!=null){
            if(simbolo.prefijo(id, ambito)){
                tipo=simbolo.buscarTipo(id);
            }else{
                System.err.println("La variable "+id+ " no esta en este ambito.");
                tipo=simbolo.buscarTipo(id);
            }

        }else if(tfuncion.buscar(id)!=null){
            if(tfuncion.prefijo(id, ambito)){
                tipo=tfuncion.buscarTipo(id);
            }else{
                System.err.println("La variable "+id+ " no esta en este ambito.");
                tipo=tfuncion.buscarTipo(id);
            }

        }
        else{
            System.err.println("La variable "+id+" no esta declarada");
            tipo=tfuncion.buscarTipo(id);
        }
        GenericTreeNode ida = new GenericTreeNode(new Tipo(id, tipo));
        GenericTreeNode i = new GenericTreeNode(new Tipo(id, id));
        ida.addChild(i);
        RESULT=ida;
        :}|LA:la{:
            GenericTreeNode ida = new GenericTreeNode(new Tipo(la.getData().getNombre(), la.getData().getTipo()));
            ida.addChild(la);
            RESULT=ida;
        :};

AR ::= AR:ar OPSUMA AM:am{:
        String tipo = "";
        if(ar.getData().getTipo().equals(am.getData().getTipo()) && ar.getData().getTipo().equals("Integer")){
            tipo=ar.getData().getTipo();
        }else{
            System.err.println("Solo se pueden sumar o restar Enteros");
            tipo=ar.getData().getTipo();
        }
        GenericTreeNode a= new GenericTreeNode(new Tipo("AR", tipo));
        a.addChild(ar);
        a.addChild(am);
        RESULT=a;
:}
| AM:am{:
        GenericTreeNode a= new GenericTreeNode(new Tipo("AR", am.getData().getTipo()));
        a.addChild(am);
        RESULT=a;
:};

AM ::= AM:am OP F:val {:
        String tipo = "";
        if(am.getData().getTipo().equals(val.getData().getTipo()) && am.getData().getTipo().equals("Integer")){
            tipo=am.getData().getTipo();
        }else{
            System.err.println("Solo se pueden multiplicar o dividir Enteros");
            tipo=am.getData().getTipo();
        }

        GenericTreeNode a= new GenericTreeNode(new Tipo("AM", tipo));
        a.addChild(am);
        a.addChild(val);
        RESULT=a;
:}
| F:val{:
        GenericTreeNode a= new GenericTreeNode(new Tipo("AM", val.getData().getTipo()));
        a.addChild(val);
        RESULT=a;
:};

F ::= EXPRESION:ex{:
        GenericTreeNode f= new GenericTreeNode(new Tipo(ex.getData().getNombre(), ex.getData().getTipo()));
        f.addChild(ex);
        RESULT=f;
:}
|PARIZQ AR:ar PARDER{:
        GenericTreeNode f= new GenericTreeNode(new Tipo("AR", ar.getData().getTipo()));
        f.addChild(ar);
        RESULT=f;
:};

OP ::= OPMULT:op{:
        RESULT=op;
:}
|DIV:op{:
        RESULT=op;
:}|MOD:op{:
        RESULT=op;
:};

OL ::= OPLOG:op{:
        RESULT=op;
:};

OPL ::= OR:op{:
        RESULT=op;
    :}
|NOT:op{:
        RESULT=op;
:}
|AND:op{:
        RESULT=op;
:};

EXPRESION ::= LITERAL:lt {:
        GenericTreeNode ex = new GenericTreeNode(new Tipo(lt.getData().getNombre(), lt.getData().getTipo()));
        ex.addChild(lt);
        RESULT=ex;
:}
| ID:id{:
        String tipo = "";
        if(simbolo.buscar(id)!=null){
            if(simbolo.prefijo(id, ambito)){
                tipo=simbolo.buscarTipo(id);
            }else{
                System.err.println("La variable "+id+ " no esta en este ambito.");
                tipo=simbolo.buscarTipo(id);
            }

        }else if(tfuncion.buscar(id)!=null){
            if(tfuncion.prefijo(id, ambito)){
                tipo=tfuncion.buscarTipo(id);
            }else{
                System.err.println("La variable "+id+ " no esta en este ambito.");
                tipo=tfuncion.buscarTipo(id);
            }

        }
        else{
            System.err.println("La variable "+id+" no esta declarada");
            tipo=tfuncion.buscarTipo(id);
        }

        GenericTreeNode ex = new GenericTreeNode(new Tipo(id, tipo));
        GenericTreeNode i = new GenericTreeNode(new Tipo(id, id));
        ex.addChild(i);
        RESULT=ex;
:}
| LF:lf{:
        GenericTreeNode ex = new GenericTreeNode(new Tipo(lf.getData().getNombre(), lf.getData().getTipo()));
        ex.addChild(lf);
        RESULT=ex;
:}
| LA:la{:
        GenericTreeNode ex = new GenericTreeNode(new Tipo("LA", la.getData().getTipo()));
        ex.addChild(la);
        RESULT=ex;
:};

LA ::= ID:id LLAVEIZQ EXPRESION:ex LLAVEDER{:
        String tipo = "";
                if(simbolo.buscar(id)!=null){
                    if(simbolo.prefijo(id, ambito)==true){
                        if(ex.getData().getTipo().equals("Integer")){
                            tipo=simbolo.buscarTipo(id).substring(11, simbolo.buscarTipo(id).length()-1);
                        }else{
                            System.err.println("El index de: "+id+" debe ser entero");
                            tipo=simbolo.buscarTipo(id).substring(11, simbolo.buscarTipo(id).length()-1);
                        }
                    }else{
                        System.err.println("El array "+id+ " no puede ser llamada en este ambito.");
                        tipo=simbolo.buscarTipo(id).substring(11, simbolo.buscarTipo(id).length()-1);
                    }
                    
                }else if(tfuncion.buscar(id)!=null){
                    if(tfuncion.prefijo(id, ambito)==true){
                        if(ex.getData().getTipo().equals("Integer")){
                            tipo=tfuncion.buscarTipo(id).substring(11, tfuncion.buscarTipo(id).length()-1);
                            
                        }else{
                            System.err.println("El index de: "+id+" debe ser entero");
                            tipo=tfuncion.buscarTipo(id).substring(11, tfuncion.buscarTipo(id).length()-1);
                        }
                    }else{
                        System.err.println("El array "+id+ " no puede ser llamada en este ambito.");
                        tipo=tfuncion.buscarTipo(id).substring(11, tfuncion.buscarTipo(id).length()-1);
                    }
                    
                }
        GenericTreeNode la = new GenericTreeNode(new Tipo(id, tipo));
        GenericTreeNode i = new GenericTreeNode(new Tipo(id, id));
        la.addChild(i);
        la.addChild(ex);
        RESULT=la; :};

LITERAL ::= NUM:n{:
        String num = "";
        num = String.valueOf(n);
        GenericTreeNode lt = new GenericTreeNode(new Tipo(num, "Integer"));
        RESULT=lt;
:}
| VCHAR:vc{:
        String cadena = vc.substring(1,vc.length()-1);
        GenericTreeNode lt = new GenericTreeNode(new Tipo(cadena, "char"));
        RESULT=lt;
:}
| BOOL:bl{:
        GenericTreeNode lt = new GenericTreeNode(new Tipo(bl, bl));
        RESULT=lt;
:}
| VSTRING:vs{:
        String cadena = vs.substring(1,vs.length()-1);
        GenericTreeNode lt = new GenericTreeNode(new Tipo(cadena, "VSTRING"));
        RESULT=lt;
:};

LF ::= ID:i PARIZQ PAV:pfv PARDER{:
        String tipo = "";
        if(fun.buscar(i)!=null){
            if(fun.prefijo(i, ambito)==true){
                if(fun.buscarDominio(i).equals(dominioL)){
                    tipo = fun.buscarRango(i);
                }else{
                    System.err.println("Los parametros no son compatibles con la funcion "+ i);
                    tipo = fun.buscarRango(i);
                }
            }else{
                System.err.println("La funcion "+i+ " no puede ser llamada en este ambito.");
                tipo = fun.buscarRango(i);
            }
        }else{
            System.err.println("La funcion "+i+" no esta declarada");
            tipo = fun.buscarRango(i);
        }
        dominioL = "";

        GenericTreeNode lf= new GenericTreeNode(new Tipo("LF", tipo));
        GenericTreeNode id= new GenericTreeNode(new Tipo(i, i));
        lf.addChild(id);
        lf.addChild(pfv);
        RESULT=lf;
:}
| ID:i PARIZQ PARDER{:
        String tipo = "";

        if(fun.buscar(i)!=null){
            if(fun.prefijo(i, ambito)==true){
                if(fun.buscarDominio(i).equals("void")){
                    tipo = fun.buscarRango(i);
                }else{
                    System.err.println("Los parametros no son compatibles con la funcion "+ i);
                    tipo = fun.buscarRango(i);
                }
            }else{
                System.err.println("La funcion "+i+ " no puede ser llamada en este ambito.");
                tipo = fun.buscarRango(i);
            }
        }else{
            System.err.println("La funcion "+i+" no esta declarada");
            tipo = fun.buscarRango(i);
        }

        GenericTreeNode lf= new GenericTreeNode(new Tipo("LF", tipo));
        GenericTreeNode id= new GenericTreeNode(new Tipo(i, i));
        lf.addChild(id);
        RESULT=lf;
:};

PAV ::= PAV:pa COMA EXPRESION:ex{:
        GenericTreeNode pav= new GenericTreeNode(new Tipo("PAV", "PAV"));
        pav.addChild(pa);
        pav.addChild(ex);
        if(dominioL.isEmpty() == true){
                dominioL = ex.getData().getTipo();
            }else{
                dominioL = dominioL+" X "+ex.getData().getTipo();
            }
        RESULT=pav;
:};

PAV ::= EXPRESION:ex {:
        GenericTreeNode pav= new GenericTreeNode(new Tipo("PAV", "PAV"));
        if(dominioL.isEmpty() == true){
                dominioL = ex.getData().getTipo();
            }else{
                dominioL = dominioL+" X "+ex.getData().getTipo();
            }
        pav.addChild(ex);
        RESULT=pav;
:};

LP ::= ID:id PARIZQ PAV:pa PARDER{:
        String tipo = "";
        if(fun.buscar(id)!=null){
            if(fun.prefijo(id, ambito)==true){
                if(fun.buscarDominio(id).equals(dominioL)){
                    tipo = fun.buscarRango(id);
                }else{
                    System.err.println("Los parametros no son compatibles con el procedimiento: "+ id);
                    tipo = fun.buscarRango(id);
                }
            }else{
                System.err.println("El procedimiento: "+id+ " no puede ser llamada en este ambito.");
                tipo = fun.buscarRango(id);
            }
        }else{
            System.err.println("El Procedimiento: "+id+" no esta declarada");
            tipo = fun.buscarRango(id);
        }
        dominioL = "";
        GenericTreeNode lp = new GenericTreeNode(new Tipo("LP", tipo));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        lp.addChild(i);
        lp.addChild(pa);
        RESULT=lp;
:}|ID:id PARIZQ PARDER{:
    String tipo = "";

        if(fun.buscar(id)!=null){
            if(fun.prefijo(id, ambito)==true){
                if(fun.buscarDominio(id).equals("void")){
                    tipo = fun.buscarRango(id);
                }else{
                    System.err.println("Los parametros no son compatibles con el procedimiento: "+ id);
                    tipo = fun.buscarRango(id);
                }
            }else{
                System.err.println("El procedimiento: "+id+ " no puede ser llamada en este ambito.");
                tipo = fun.buscarRango(id);
            }
        }else{
            System.err.println("El procedimiento: "+id+" no esta declarada");
            tipo = fun.buscarRango(id);
        }

        GenericTreeNode lp= new GenericTreeNode(new Tipo("LP", tipo));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        lp.addChild(i);
        RESULT=lp;:};

EC ::= EA:is{:
        GenericTreeNode ec = new GenericTreeNode(new Tipo("EC", "EC"));
        ec.addChild(is);
        RESULT=ec;
:}
|ER:er{:
        GenericTreeNode ec = new GenericTreeNode(new Tipo("EC", "EC"));
        ec.addChild(er);
        RESULT=ec;
:};

EA ::= IS:is{:
        GenericTreeNode ec = new GenericTreeNode(new Tipo("EA", "EA"));
        ec.addChild(is);
        RESULT=ec;
:};

IS ::= IF:ifc CONDICION:cd THEN:tn S:s IDO:ido{:
        GenericTreeNode is = new GenericTreeNode(new Tipo("IS", "IS"));
        GenericTreeNode fi = new GenericTreeNode(new Tipo(ifc, ifc));
        GenericTreeNode ten = new GenericTreeNode(new Tipo(tn, tn));
        is.addChild(fi);
        is.addChild(cd);
        is.addChild(ten);
        is.addChild(s);
        is.addChild(s);
        RESULT=is;
:};

IDO ::= ELSE:el S:s1{:
        GenericTreeNode ido = new GenericTreeNode(new Tipo("IDO", "IDO"));
        GenericTreeNode els = new GenericTreeNode(new Tipo(el, el));
        ido.addChild(els);
        ido.addChild(s1);
        RESULT=ido;
:};

ER ::= RW:rw {:
        GenericTreeNode er = new GenericTreeNode(new Tipo("ER", "ER"));
        er.addChild(rw);
        RESULT=er;
:}
| RR:rr {:
        GenericTreeNode er = new GenericTreeNode(new Tipo("ER", "ER"));
        er.addChild(rr);
        RESULT=er;
:}
| RF:rf {:
        GenericTreeNode er = new GenericTreeNode(new Tipo("ER", "ER"));
        er.addChild(rf);
        RESULT=er;
:};

RW ::= WHILE:wl CONDICION:cd DO:d S:s {:
        GenericTreeNode rw = new GenericTreeNode(new Tipo("RW", "RW"));
        GenericTreeNode f = new GenericTreeNode(new Tipo(wl, wl));
        GenericTreeNode tt = new GenericTreeNode(new Tipo(d, d));
        rw.addChild(f);
        rw.addChild(cd);
        rw.addChild(tt);
        rw.addChild(s);
        RESULT= rw;
:};

RR ::= REPEAT:rp S:s UNTIL:ul CONDICION:cd {:
        GenericTreeNode rr = new GenericTreeNode(new Tipo("RR", "RR"));
        GenericTreeNode f = new GenericTreeNode(new Tipo(rp, rp));
        GenericTreeNode tt = new GenericTreeNode(new Tipo(ul, ul));
        rr.addChild(f);
        rr.addChild(s);
        rr.addChild(tt);
        rr.addChild(cd);
        RESULT= rr;
:};

RF ::= FOR:fr SA:sa TO:t EXPRESION:ex DO:d S:s {:
        GenericTreeNode rf = new GenericTreeNode(new Tipo("RF", "RF"));
        GenericTreeNode f = new GenericTreeNode(new Tipo(fr, fr));
        GenericTreeNode tt = new GenericTreeNode(new Tipo(t, t));
        GenericTreeNode dd = new GenericTreeNode(new Tipo(d, d));
        rf.addChild(f);
        rf.addChild(sa);
        rf.addChild(tt);
        rf.addChild(ex);
        rf.addChild(dd);
        rf.addChild(s);
        RESULT= rf;
:}
| FOR:fr SA:sa DOWNTO:t EXPRESION:ex DO:d S:s {:
        GenericTreeNode rf = new GenericTreeNode(new Tipo("RF", "RF"));
        GenericTreeNode f = new GenericTreeNode(new Tipo(fr, fr));
        GenericTreeNode tt = new GenericTreeNode(new Tipo(t, t));
        GenericTreeNode dd = new GenericTreeNode(new Tipo(d, d));
        rf.addChild(f);
        rf.addChild(sa);
        rf.addChild(tt);
        rf.addChild(ex);
        rf.addChild(dd);
        rf.addChild(s);
        RESULT= rf;
:};

CONDICION ::= CONDICION:ex OL CONDICIONOPL:ex2{:
        String tipo="";
        if(ex.getData().getTipo().equals("Integer") && ex2.getData().getTipo().equals("Integer")){
            tipo= ex.getData().getTipo();
        }else{
            System.err.println("Las expresiones que esta tratando de comparar tienen tipos distintos");
            tipo=ex.getData().getTipo();
        }
        GenericTreeNode eb = new GenericTreeNode(new Tipo("CONDICION", tipo));
        eb.addChild(ex);
        eb.addChild(ex2);
        RESULT=eb;
:}| CONDICIONOPL:opl{:GenericTreeNode a= new GenericTreeNode(new Tipo(opl.getData().getNombre(), opl.getData().getTipo()));
        a.addChild(opl);
        RESULT=a;:};


CONDICIONOPL ::= CONDICIONOPL:opl OPL EX:ex{:
    String tipo="";
        if(opl.getData().getTipo().equals("Integer") && ex.getData().getTipo().equals("Integer")){
            tipo= opl.getData().getTipo();
        }else{
            System.err.println("Las expresiones que esta tratando de comparar tienen tipos distintos");
            tipo=opl.getData().getTipo();
        }
        GenericTreeNode eb = new GenericTreeNode(new Tipo("CONDICIONOPL", tipo));
        eb.addChild(opl);
        eb.addChild(ex);
        RESULT=eb;

    :}| EX:ar{:
        GenericTreeNode ex = new GenericTreeNode(new Tipo(ar.getData().getNombre(), ar.getData().getTipo()));
        ex.addChild(ar);
        RESULT=ex;
:};

EX ::= AR:ar{:
        GenericTreeNode ex = new GenericTreeNode(new Tipo(ar.getData().getNombre(), ar.getData().getTipo()));
        ex.addChild(ar);
        RESULT=ex;
:};

MET ::= ESCR:wt{:
        GenericTreeNode met = new GenericTreeNode(new Tipo("Metodo", "Metodo"));
        met.addChild(wt);
        RESULT=met;
:};

ESCR ::= WRITE:wt PARIZQ VSTRING:vs WRT:wrt PARDER {:
        GenericTreeNode escr = new GenericTreeNode(new Tipo(wt, wt));
        GenericTreeNode str = new GenericTreeNode(new Tipo(vs, vs));
        escr.addChild(str);
        escr.addChild(wrt);
        RESULT=escr;
:}
| LEER:lr{:
        GenericTreeNode escr = new GenericTreeNode(new Tipo("READ", "READ"));
        escr.addChild(lr);
        RESULT=escr;
:};

WRT ::= COMA ID:id{:
        GenericTreeNode wrt= new GenericTreeNode(new Tipo("WRT", "WRT"));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        wrt.addChild(i);
        RESULT=wrt;
:}
| {:
    GenericTreeNode wrt= new GenericTreeNode(new Tipo("WRT", "WRT"));
    RESULT=wrt;
:};

LEER ::= READ:rd PARIZQ ID:id PARDER{:
        GenericTreeNode leer = new GenericTreeNode(new Tipo(rd, rd));
        GenericTreeNode i = new GenericTreeNode(new Tipo(id, id));
        leer.addChild(i);
        RESULT=leer;
:};
