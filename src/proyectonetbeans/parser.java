
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\005\000\002\002\004\000\002\003" +
    "\005\000\002\003\004\000\002\004\004\000\002\010\004" +
    "\000\002\010\004\000\002\011\004\000\002\011\003\000" +
    "\002\014\005\000\002\014\006\000\002\012\003\000\002" +
    "\012\003\000\002\012\004\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\015\003\000\002\015\003" +
    "\000\002\016\013\000\002\017\006\000\002\055\003\000" +
    "\002\055\002\000\002\054\004\000\002\054\004\000\002" +
    "\053\005\000\002\042\007\000\002\065\002\000\002\042" +
    "\013\000\002\047\003\000\002\047\003\000\002\006\003" +
    "\000\002\006\004\000\002\052\005\000\002\043\005\000" +
    "\002\066\002\000\002\043\011\000\002\007\003\000\002" +
    "\007\004\000\002\005\003\000\002\020\006\000\002\023" +
    "\006\000\002\021\005\000\002\021\002\000\002\021\004" +
    "\000\002\021\005\000\002\021\003\000\002\021\005\000" +
    "\002\021\004\000\002\022\005\000\002\051\003\000\002" +
    "\051\003\000\002\056\005\000\002\056\003\000\002\044" +
    "\005\000\002\044\003\000\002\045\003\000\002\045\005" +
    "\000\002\062\003\000\002\062\003\000\002\062\003\000" +
    "\002\063\003\000\002\064\003\000\002\064\003\000\002" +
    "\064\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\032\006\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\030\006\000\002\030\005\000\002\061\005\000\002" +
    "\061\003\000\002\031\006\000\002\031\005\000\002\034" +
    "\003\000\002\034\003\000\002\036\003\000\002\033\010" +
    "\000\002\033\006\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\037\006\000\002\040\006\000\002" +
    "\041\010\000\002\041\010\000\002\026\005\000\002\026" +
    "\003\000\002\027\005\000\002\027\003\000\002\046\003" +
    "\000\002\060\003\000\002\060\003\000\002\057\010\000" +
    "\002\057\006\000\002\050\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\006\003\004\031\007\001\002\000\006\003" +
    "\014\036\012\001\002\000\004\002\315\001\002\000\006" +
    "\003\014\036\012\001\002\000\004\047\010\001\002\000" +
    "\004\045\011\001\002\000\006\003\uffff\036\uffff\001\002" +
    "\000\004\047\034\001\002\000\004\032\104\001\002\000" +
    "\004\047\034\001\002\000\014\003\uffeb\032\uffeb\034\020" +
    "\035\024\036\uffeb\001\002\000\012\003\uffec\032\uffec\036" +
    "\uffec\045\uffec\001\002\000\016\003\uffeb\032\uffeb\034\020" +
    "\035\024\036\uffeb\045\uffeb\001\002\000\004\047\302\001" +
    "\002\000\010\003\ufffd\032\ufffd\036\ufffd\001\002\000\006" +
    "\003\014\036\012\001\002\000\006\003\014\036\012\001" +
    "\002\000\004\047\027\001\002\000\016\003\uffeb\032\uffeb" +
    "\034\020\035\024\036\uffeb\045\uffeb\001\002\000\012\003" +
    "\uffea\032\uffea\036\uffea\045\uffea\001\002\000\006\005\030" +
    "\010\031\001\002\000\012\052\041\053\044\054\053\055" +
    "\045\001\002\000\004\047\uffe6\001\002\000\004\047\034" +
    "\001\002\000\004\011\072\001\002\000\006\005\040\012" +
    "\037\001\002\000\020\003\ufff9\011\ufff9\032\ufff9\034\ufff9" +
    "\035\ufff9\036\ufff9\047\034\001\002\000\016\003\ufffa\011" +
    "\ufffa\032\ufffa\034\ufffa\035\ufffa\036\ufffa\001\002\000\004" +
    "\047\034\001\002\000\016\003\046\052\041\053\044\054" +
    "\053\055\045\056\043\001\002\000\004\045\ufff3\001\002" +
    "\000\004\045\ufff6\001\002\000\004\006\061\001\002\000" +
    "\004\045\ufff1\001\002\000\004\006\056\001\002\000\010" +
    "\034\020\035\024\045\uffeb\001\002\000\004\045\uffef\001" +
    "\002\000\004\045\ufff5\001\002\000\004\045\054\001\002" +
    "\000\004\045\ufff0\001\002\000\004\045\ufff2\001\002\000" +
    "\020\003\ufff7\011\ufff7\032\ufff7\034\ufff7\035\ufff7\036\ufff7" +
    "\047\ufff7\001\002\000\004\045\ufff4\001\002\000\004\064" +
    "\057\001\002\000\004\007\060\001\002\000\004\045\uffed" +
    "\001\002\000\004\064\062\001\002\000\004\015\063\001" +
    "\002\000\004\015\064\001\002\000\004\064\065\001\002" +
    "\000\004\007\066\001\002\000\004\016\067\001\002\000" +
    "\016\003\046\052\041\053\044\054\053\055\045\056\043" +
    "\001\002\000\004\045\uffee\001\002\000\020\003\ufff8\011" +
    "\ufff8\032\ufff8\034\ufff8\035\ufff8\036\ufff8\047\ufff8\001\002" +
    "\000\004\005\073\001\002\000\012\052\041\053\044\054" +
    "\053\055\045\001\002\000\004\045\077\001\002\000\004" +
    "\045\uffe4\001\002\000\004\045\uffe3\001\002\000\006\003" +
    "\uffe5\036\uffe5\001\002\000\004\045\101\001\002\000\006" +
    "\003\uffe7\036\uffe7\001\002\000\006\003\103\032\104\001" +
    "\002\000\004\032\104\001\002\000\026\003\133\017\125" +
    "\022\120\024\137\026\136\032\131\033\uffd6\047\127\062" +
    "\107\063\126\001\002\000\016\003\uffe8\032\uffe8\034\uffe8" +
    "\035\uffe8\036\uffe8\045\uffe8\001\002\000\016\003\uffe2\032" +
    "\uffe2\034\uffe2\035\uffe2\036\uffe2\045\uffe2\001\002\000\004" +
    "\010\270\001\002\000\010\020\uffac\025\uffac\033\uffac\001" +
    "\002\000\010\020\uffd3\025\uffd3\033\uffd3\001\002\000\010" +
    "\020\uffaf\025\uffaf\033\uffaf\001\002\000\010\020\uffb1\025" +
    "\uffb1\033\uffb1\001\002\000\004\004\266\001\002\000\032" +
    "\003\133\017\125\020\uffd6\022\120\024\137\025\uffd6\026" +
    "\136\032\131\033\uffd6\047\127\062\107\063\126\001\002" +
    "\000\010\020\uffab\025\uffab\033\uffab\001\002\000\004\045" +
    "\263\001\002\000\016\010\152\046\145\047\153\050\147" +
    "\051\160\064\143\001\002\000\004\045\uff9f\001\002\000" +
    "\004\033\256\001\002\000\004\045\uffa0\001\002\000\004" +
    "\045\254\001\002\000\016\010\152\046\145\047\153\050" +
    "\147\051\160\064\143\001\002\000\004\010\241\001\002" +
    "\000\010\004\uffcf\006\202\010\235\001\002\000\010\020" +
    "\uffaa\025\uffaa\033\uffaa\001\002\000\026\003\133\017\125" +
    "\022\120\024\137\026\136\032\131\033\uffd6\047\127\062" +
    "\107\063\126\001\002\000\004\004\uffce\001\002\000\032" +
    "\003\133\017\125\020\uffd6\022\120\024\137\025\uffd6\026" +
    "\136\032\131\033\uffd6\047\127\062\107\063\126\001\002" +
    "\000\010\020\uffb0\025\uffb0\033\uffb0\001\002\000\004\045" +
    "\227\001\002\000\004\047\215\001\002\000\026\003\133" +
    "\017\125\022\120\024\137\025\uffd6\026\136\032\131\047" +
    "\127\062\107\063\126\001\002\000\004\025\141\001\002" +
    "\000\016\010\152\046\145\047\153\050\147\051\160\064" +
    "\143\001\002\000\044\011\uffcc\020\uffcc\021\uffcc\023\uffcc" +
    "\025\uffcc\027\uffcc\030\uffcc\033\uffcc\040\176\041\175\042" +
    "\uffcc\043\uffcc\044\uffcc\045\uffcc\057\uffcc\060\177\061\uffcc" +
    "\001\002\000\050\007\uffbb\011\uffbb\012\uffbb\020\uffbb\021" +
    "\uffbb\023\uffbb\025\uffbb\027\uffbb\030\uffbb\033\uffbb\040\uffbb" +
    "\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\057\uffbb\060" +
    "\uffbb\061\uffbb\001\002\000\024\020\uffa2\021\uffa2\023\uffa2" +
    "\025\uffa2\033\uffa2\042\uffa2\043\uffa2\044\uffa2\061\uffa2\001" +
    "\002\000\050\007\uffb9\011\uffb9\012\uffb9\020\uffb9\021\uffb9" +
    "\023\uffb9\025\uffb9\027\uffb9\030\uffb9\033\uffb9\040\uffb9\041" +
    "\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\057\uffb9\060\uffb9" +
    "\061\uffb9\001\002\000\050\007\uffc0\011\uffc0\012\uffc0\020" +
    "\uffc0\021\uffc0\023\uffc0\025\uffc0\027\uffc0\030\uffc0\033\uffc0" +
    "\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\057" +
    "\uffc0\060\uffc0\061\uffc0\001\002\000\050\007\uffba\011\uffba" +
    "\012\uffba\020\uffba\021\uffba\023\uffba\025\uffba\027\uffba\030" +
    "\uffba\033\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba" +
    "\045\uffba\057\uffba\060\uffba\061\uffba\001\002\000\024\020" +
    "\uffa4\021\uffa4\023\uffa4\025\uffa4\033\uffa4\042\170\043\166" +
    "\044\165\061\uffa4\001\002\000\050\007\uffbe\011\uffbe\012" +
    "\uffbe\020\uffbe\021\uffbe\023\uffbe\025\uffbe\027\uffbe\030\uffbe" +
    "\033\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045" +
    "\uffbe\057\uffbe\060\uffbe\061\uffbe\001\002\000\016\010\152" +
    "\046\145\047\153\050\147\051\160\064\143\001\002\000" +
    "\054\006\202\007\uffbf\010\201\011\uffbf\012\uffbf\020\uffbf" +
    "\021\uffbf\023\uffbf\025\uffbf\027\uffbf\030\uffbf\033\uffbf\040" +
    "\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\057\uffbf" +
    "\060\uffbf\061\uffbf\001\002\000\050\007\uffbd\011\uffbd\012" +
    "\uffbd\020\uffbd\021\uffbd\023\uffbd\025\uffbd\027\uffbd\030\uffbd" +
    "\033\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045" +
    "\uffbd\057\uffbd\060\uffbd\061\uffbd\001\002\000\026\020\uffa1" +
    "\021\uffa1\023\uffa1\025\uffa1\033\uffa1\042\uffa1\043\uffa1\044" +
    "\uffa1\057\172\061\uffa1\001\002\000\044\011\uffc9\020\uffc9" +
    "\021\uffc9\023\uffc9\025\uffc9\027\uffc9\030\uffc9\033\uffc9\040" +
    "\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\057\uffc9" +
    "\060\uffc9\061\uffc9\001\002\000\044\011\uffca\020\uffca\021" +
    "\uffca\023\uffca\025\uffca\027\uffca\030\uffca\033\uffca\040\uffca" +
    "\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\057\uffca\060" +
    "\uffca\061\uffca\001\002\000\050\007\uffb8\011\uffb8\012\uffb8" +
    "\020\uffb8\021\uffb8\023\uffb8\025\uffb8\027\uffb8\030\uffb8\033" +
    "\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8" +
    "\057\uffb8\060\uffb8\061\uffb8\001\002\000\012\020\uffa8\025" +
    "\uffa8\033\uffa8\061\163\001\002\000\016\010\152\046\145" +
    "\047\153\050\147\051\160\064\143\001\002\000\016\010" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\064\uffc4\001\002" +
    "\000\024\020\uffa5\021\uffa5\023\uffa5\025\uffa5\033\uffa5\042" +
    "\170\043\166\044\165\061\uffa5\001\002\000\016\010\uffc1" +
    "\046\uffc1\047\uffc1\050\uffc1\051\uffc1\064\uffc1\001\002\000" +
    "\016\010\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\064\uffc2" +
    "\001\002\000\016\010\152\046\145\047\153\050\147\051" +
    "\160\064\143\001\002\000\016\010\uffc3\046\uffc3\047\uffc3" +
    "\050\uffc3\051\uffc3\064\uffc3\001\002\000\024\020\uffa3\021" +
    "\uffa3\023\uffa3\025\uffa3\033\uffa3\042\uffa3\043\uffa3\044\uffa3" +
    "\061\uffa3\001\002\000\016\010\152\046\145\047\153\050" +
    "\147\051\160\064\143\001\002\000\044\011\uffcd\020\uffcd" +
    "\021\uffcd\023\uffcd\025\uffcd\027\uffcd\030\uffcd\033\uffcd\040" +
    "\176\041\175\042\uffcd\043\uffcd\044\uffcd\045\uffcd\057\uffcd" +
    "\060\177\061\uffcd\001\002\000\016\010\152\046\145\047" +
    "\153\050\147\051\160\064\143\001\002\000\016\010\uffc5" +
    "\046\uffc5\047\uffc5\050\uffc5\051\uffc5\064\uffc5\001\002\000" +
    "\016\010\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\064\uffc6" +
    "\001\002\000\016\010\uffc7\046\uffc7\047\uffc7\050\uffc7\051" +
    "\uffc7\064\uffc7\001\002\000\044\011\uffcb\020\uffcb\021\uffcb" +
    "\023\uffcb\025\uffcb\027\uffcb\030\uffcb\033\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\057\uffcb\060\uffcb" +
    "\061\uffcb\001\002\000\016\011\206\046\145\047\153\050" +
    "\147\051\160\064\143\001\002\000\014\046\145\047\153" +
    "\050\147\051\160\064\143\001\002\000\004\007\204\001" +
    "\002\000\052\004\uffbc\007\uffbc\011\uffbc\012\uffbc\020\uffbc" +
    "\021\uffbc\023\uffbc\025\uffbc\027\uffbc\030\uffbc\033\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\057\uffbc" +
    "\060\uffbc\061\uffbc\001\002\000\006\011\211\012\210\001" +
    "\002\000\050\007\uffb6\011\uffb6\012\uffb6\020\uffb6\021\uffb6" +
    "\023\uffb6\025\uffb6\027\uffb6\030\uffb6\033\uffb6\040\uffb6\041" +
    "\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\057\uffb6\060\uffb6" +
    "\061\uffb6\001\002\000\006\011\uffb4\012\uffb4\001\002\000" +
    "\014\046\145\047\153\050\147\051\160\064\143\001\002" +
    "\000\050\007\uffb7\011\uffb7\012\uffb7\020\uffb7\021\uffb7\023" +
    "\uffb7\025\uffb7\027\uffb7\030\uffb7\033\uffb7\040\uffb7\041\uffb7" +
    "\042\uffb7\043\uffb7\044\uffb7\045\uffb7\057\uffb7\060\uffb7\061" +
    "\uffb7\001\002\000\006\011\uffb5\012\uffb5\001\002\000\006" +
    "\011\214\057\172\001\002\000\044\011\uffc8\020\uffc8\021" +
    "\uffc8\023\uffc8\025\uffc8\027\uffc8\030\uffc8\033\uffc8\040\uffc8" +
    "\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\057\uffc8\060" +
    "\uffc8\061\uffc8\001\002\000\006\004\uffcf\006\202\001\002" +
    "\000\006\027\217\030\220\001\002\000\014\046\145\047" +
    "\153\050\147\051\160\064\143\001\002\000\014\046\145" +
    "\047\153\050\147\051\160\064\143\001\002\000\004\023" +
    "\222\001\002\000\032\003\133\017\125\020\uffd6\022\120" +
    "\024\137\025\uffd6\026\136\032\131\033\uffd6\047\127\062" +
    "\107\063\126\001\002\000\010\020\uffa6\025\uffa6\033\uffa6" +
    "\001\002\000\004\023\225\001\002\000\032\003\133\017" +
    "\125\020\uffd6\022\120\024\137\025\uffd6\026\136\032\131" +
    "\033\uffd6\047\127\062\107\063\126\001\002\000\010\020" +
    "\uffa7\025\uffa7\033\uffa7\001\002\000\032\003\133\017\125" +
    "\020\uffd6\022\120\024\137\025\uffd6\026\136\032\131\033" +
    "\uffd6\047\127\062\107\063\126\001\002\000\010\020\uffd7" +
    "\025\uffd7\033\uffd7\001\002\000\010\020\uffd1\025\uffd1\033" +
    "\uffd1\001\002\000\004\033\233\001\002\000\004\045\234" +
    "\001\002\000\032\003\uffd8\017\uffd8\020\uffd8\022\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\032\uffd8\033\uffd8\047\uffd8\062\uffd8" +
    "\063\uffd8\001\002\000\016\011\237\046\145\047\153\050" +
    "\147\051\160\064\143\001\002\000\006\011\240\012\210" +
    "\001\002\000\004\045\uffb2\001\002\000\004\045\uffb3\001" +
    "\002\000\004\051\242\001\002\000\006\011\244\012\243" +
    "\001\002\000\014\046\145\047\153\050\147\051\160\064" +
    "\143\001\002\000\004\045\uff9d\001\002\000\004\011\246" +
    "\001\002\000\004\045\uff9e\001\002\000\006\021\250\061" +
    "\163\001\002\000\032\003\133\017\125\020\uffd6\022\120" +
    "\024\137\025\uffd6\026\136\032\131\033\uffd6\047\127\062" +
    "\107\063\126\001\002\000\010\020\252\025\uffad\033\uffad" +
    "\001\002\000\032\003\133\017\125\020\uffd6\022\120\024" +
    "\137\025\uffd6\026\136\032\131\033\uffd6\047\127\062\107" +
    "\063\126\001\002\000\010\020\uffae\025\uffae\033\uffae\001" +
    "\002\000\032\003\133\017\125\020\uffd6\022\120\024\137" +
    "\025\uffd6\026\136\032\131\033\uffd6\047\127\062\107\063" +
    "\126\001\002\000\010\020\uffd2\025\uffd2\033\uffd2\001\002" +
    "\000\004\015\257\001\002\000\020\002\uffd9\003\uffd9\032" +
    "\uffd9\034\uffd9\035\uffd9\036\uffd9\045\uffd9\001\002\000\006" +
    "\023\261\061\163\001\002\000\032\003\133\017\125\020" +
    "\uffd6\022\120\024\137\025\uffd6\026\136\032\131\033\uffd6" +
    "\047\127\062\107\063\126\001\002\000\010\020\uffa9\025" +
    "\uffa9\033\uffa9\001\002\000\032\003\133\017\125\020\uffd6" +
    "\022\120\024\137\025\uffd6\026\136\032\131\033\uffd6\047" +
    "\127\062\107\063\126\001\002\000\010\020\uffd4\025\uffd4" +
    "\033\uffd4\001\002\000\010\020\uffd5\025\uffd5\033\uffd5\001" +
    "\002\000\016\010\152\046\145\047\153\050\147\051\160" +
    "\064\143\001\002\000\012\027\uffd0\030\uffd0\045\uffd0\057" +
    "\172\001\002\000\014\046\145\047\153\050\147\051\160" +
    "\064\143\001\002\000\004\011\272\001\002\000\004\045" +
    "\uff9c\001\002\000\016\003\uffe1\032\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\045\uffe1\001\002\000\020\002\uffda\003\uffda\032" +
    "\uffda\034\uffda\035\uffda\036\uffda\045\uffda\001\002\000\006" +
    "\003\276\032\104\001\002\000\004\032\104\001\002\000" +
    "\016\003\uffe0\032\uffe0\034\uffe0\035\uffe0\036\uffe0\045\uffe0" +
    "\001\002\000\016\003\uffdc\032\uffdc\034\uffdc\035\uffdc\036" +
    "\uffdc\045\uffdc\001\002\000\016\003\uffdb\032\uffdb\034\uffdb" +
    "\035\uffdb\036\uffdb\045\uffdb\001\002\000\006\010\303\045" +
    "\304\001\002\000\004\047\uffde\001\002\000\006\003\uffdf" +
    "\036\uffdf\001\002\000\004\047\034\001\002\000\004\011" +
    "\307\001\002\000\004\045\310\001\002\000\006\003\uffdd" +
    "\036\uffdd\001\002\000\012\003\uffe9\032\uffe9\036\uffe9\045" +
    "\uffe9\001\002\000\014\003\ufffb\032\ufffb\034\ufffb\035\ufffb" +
    "\036\ufffb\001\002\000\004\002\001\001\002\000\014\003" +
    "\ufffc\032\ufffc\034\ufffc\035\ufffc\036\ufffc\001\002\000\004" +
    "\002\000\001\002\000\006\003\ufffe\036\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\006\002\004\003\005\001\001\000\006\004" +
    "\315\010\014\001\001\000\002\001\001\000\006\004\012" +
    "\010\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\313\014\034\001\001\000\006" +
    "\005\312\020\273\001\001\000\006\011\311\014\034\001" +
    "\001\000\016\042\022\043\021\052\016\053\024\054\015" +
    "\055\020\001\001\000\002\001\001\000\016\042\022\043" +
    "\021\052\016\053\024\054\015\055\310\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\274\010\014\001" +
    "\001\000\006\004\101\010\014\001\001\000\002\001\001" +
    "\000\016\042\022\043\021\052\016\053\024\054\015\055" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\074\017\075\047\077\001\001\000\004\065\031\001" +
    "\001\000\006\011\032\014\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\035\014\034\001\001\000" +
    "\002\001\001\000\004\014\070\001\001\000\014\012\050" +
    "\013\041\015\047\016\051\017\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\042\022\043\021\052\016\053" +
    "\024\054\015\055\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\067\013\041\015" +
    "\047\016\051\017\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\074\017\075\047" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\104\020\105\001\001\000\006\005\272" +
    "\020\273\001\001\000\042\021\121\022\134\023\114\031" +
    "\116\032\131\033\111\034\110\035\133\036\112\037\107" +
    "\040\115\041\127\050\120\051\113\057\122\060\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\021\264\022\134" +
    "\023\114\031\116\032\131\033\111\034\110\035\133\036" +
    "\112\037\107\040\115\041\127\050\120\051\113\057\122" +
    "\060\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\024\145\025\155\026\257\027\147\030\150\032\153" +
    "\044\141\045\156\046\143\056\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\024\145\025\155\026\246\027\147\030\150\032" +
    "\153\044\141\045\156\046\143\056\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\021" +
    "\231\022\134\023\114\031\116\032\131\033\111\034\110" +
    "\035\133\036\112\037\107\040\115\041\127\050\120\051" +
    "\113\057\122\060\123\001\001\000\002\001\001\000\042" +
    "\021\230\022\134\023\114\031\116\032\131\033\111\034" +
    "\110\035\133\036\112\037\107\040\115\041\127\050\120" +
    "\051\113\057\122\060\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\022\215\032\131\051\113\001\001" +
    "\000\042\021\137\022\134\023\114\031\116\032\131\033" +
    "\111\034\110\035\133\036\112\037\107\040\115\041\127" +
    "\050\120\051\113\057\122\060\123\001\001\000\002\001" +
    "\001\000\026\024\145\025\155\026\160\027\147\030\150" +
    "\032\153\044\141\045\156\046\143\056\154\001\001\000" +
    "\004\062\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\064\166\001\001\000\002\001\001\000\020\024\145" +
    "\025\155\030\150\032\153\044\141\045\156\056\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\063\161\001\001\000\024\024\145\025\155\027\163" +
    "\030\150\032\153\044\141\045\156\046\143\056\154\001" +
    "\001\000\002\001\001\000\004\064\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\024\145\025\155\030" +
    "\150\032\153\044\141\045\156\046\170\056\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\024\145\025" +
    "\155\030\150\032\153\044\172\045\156\001\001\000\004" +
    "\062\173\001\001\000\014\024\145\025\155\030\150\032" +
    "\153\045\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\024\145\025" +
    "\206\030\150\032\153\061\204\001\001\000\012\024\145" +
    "\025\202\030\150\032\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\024\145\025\211\030\150\032\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\024\145\025\223\030\150\032\153\001\001\000\012" +
    "\024\145\025\220\030\150\032\153\001\001\000\002\001" +
    "\001\000\042\021\222\022\134\023\114\031\116\032\131" +
    "\033\111\034\110\035\133\036\112\037\107\040\115\041" +
    "\127\050\120\051\113\057\122\060\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\021\225\022\134\023" +
    "\114\031\116\032\131\033\111\034\110\035\133\036\112" +
    "\037\107\040\115\041\127\050\120\051\113\057\122\060" +
    "\123\001\001\000\002\001\001\000\042\021\227\022\134" +
    "\023\114\031\116\032\131\033\111\034\110\035\133\036" +
    "\112\037\107\040\115\041\127\050\120\051\113\057\122" +
    "\060\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\024\145\025\206\030\150\032\153\061\235\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\024\145\025\244\030" +
    "\150\032\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\063\161\001\001\000\042\021" +
    "\250\022\134\023\114\031\116\032\131\033\111\034\110" +
    "\035\133\036\112\037\107\040\115\041\127\050\120\051" +
    "\113\057\122\060\123\001\001\000\002\001\001\000\042" +
    "\021\252\022\134\023\114\031\116\032\131\033\111\034" +
    "\110\035\133\036\112\037\107\040\115\041\127\050\120" +
    "\051\113\057\122\060\123\001\001\000\002\001\001\000" +
    "\042\021\254\022\134\023\114\031\116\032\131\033\111" +
    "\034\110\035\133\036\112\037\107\040\115\041\127\050" +
    "\120\051\113\057\122\060\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\161\001" +
    "\001\000\042\021\261\022\134\023\114\031\116\032\131" +
    "\033\111\034\110\035\133\036\112\037\107\040\115\041" +
    "\127\050\120\051\113\057\122\060\123\001\001\000\002" +
    "\001\001\000\042\021\263\022\134\023\114\031\116\032" +
    "\131\033\111\034\110\035\133\036\112\037\107\040\115" +
    "\041\127\050\120\051\113\057\122\060\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\024\145\025\155" +
    "\030\150\032\153\044\141\045\156\056\266\001\001\000" +
    "\002\001\001\000\012\024\145\025\270\030\150\032\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\276\020\277\001\001" +
    "\000\006\005\300\020\273\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\066\304\001\001\000\002\001\001\000\006\011\305\014" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    @Override
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" en la linea "+(s.left + 1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
            m.append(" "+s.value.toString());
        }
        System.err.println(m);
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error(message, info);
        System.exit(1); //To change body of generated methods, choose Tools | Templates.
    }
    
    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            parser p = new parser(
                    new Proyecto( new FileReader(args[0])));
            Object result = p.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    TablaSimbolos simbolo = new TablaSimbolos();
    TablaSimbolosFunciones tfuncion = new TablaSimbolosFunciones();
    TablaFunsiones fun = new TablaFunsiones();
    boolean Declaracion = true;
    boolean Funcion = false;
    boolean FCParametro = false;
    String ambito = "main";
    String idMetodo = "";
    String ambitoF = ambito;
    int contador = 0;
    String dominio="";
    String dominioL="";
    int num_parametros=0;
    int contEtq = 0;
    ArrayList<String> etqList = new ArrayList<String>();
    TablaIntermedio tabla = new TablaIntermedio();
    ArrayList<String> valores = new ArrayList<String>();
    boolean pase = false;
    int contador2 = 0;







/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



   public String new_etq(){
       String etq = "etq"+contEtq;
       contEtq++;
       return  etq;
     }

      public GenericTreeNode sacar(GenericTreeNode a){
        if (a.hasChildren() && (a.getNumberOfChildren() < 2) ){

          return sacar(a.getChildren().get(0));
        }
        else {
          return a;
        }
      }

      public void inta(GenericTreeNode padre){

           if (padre.hasChildren()){
             

          
             for (int i = 0; i < padre.getNumberOfChildren(); i++) {
               if (padre.getChildren().get(i).getData().getNombre().equals("S")){
                 //etqList.add(new_etq());
               }
             }




             if (padre.getNumberOfChildren() >= 2){
               for( int i = 0 ; i < padre.getNumberOfChildren(); i++ ) {


                 if(padre.getChildren().get(i).getData().getNombre().equals("SA")){
                  if(etqList.size()>0){
                    tabla.Ingresar("GEN", etqList.get(0), " ");
                    etqList.remove(0);
                  }
                   vSA(padre.getChildren().get(i));

                 }
                 else if (padre.getChildren().get(i).getData().getNombre().equals("CONDICION<")){
                   vCONDICIONm(padre.getChildren().get(i));
                 }
                 else if (padre.getChildren().get(i).getData().getNombre().equals("CONDICION>")){
                   vCONDICIONM(padre.getChildren().get(i));
                 }else if (padre.getChildren().get(i).getData().getNombre().equals("CONDICION<>")){
                   vCONDICIONNE(padre.getChildren().get(i));
                 }else if (padre.getChildren().get(i).getData().getNombre().equals("CONDICION=")){
                   vCONDICIONE(padre.getChildren().get(i));
                 }else if (padre.getChildren().get(i).getData().getNombre().equals("CONDICION>=")){
                   vCONDICIONME(padre.getChildren().get(i));
                 }else if (padre.getChildren().get(i).getData().getNombre().equals("CONDICION<=")){
                   vCONDICIONMNE(padre.getChildren().get(i));
                 }

                 if (padre.getNumberOfChildren() >=3 && i==1 && padre.getData().getNombre().equals("RF")){
                   String tempi = tabla.getTabla().get(tabla.getTabla().size() - 1).getResultado();
                   tabla.Ingresar("if<",  tempi, padre.getChildren().get(1).getData().getNombre(),new_etq());
                 }

                 else {
                   inta(padre.getChildren().get(i));
                 }

               }
             }
             else{


                 if (padre.getChildren().get(0).getData().getNombre().equals("SA")) {
                   vSA(padre.getChildren().get(0));

                 } else if (padre.getChildren().get(0).getData().getNombre().equals("CONDICION<")) {
                   vCONDICIONm(padre.getChildren().get(0));
                 } else if (padre.getChildren().get(0).getData().getNombre().equals("CONDICION>")) {
                   vCONDICIONM(padre.getChildren().get(0));
                 } else if (padre.getChildren().get(0).getData().getNombre().equals("")) {

                 }else if (padre.getChildren().get(0).getData().getNombre().equals("CONDICION=")) {
                   vCONDICIONE(padre.getChildren().get(0));
                 }else if (padre.getChildren().get(0).getData().getNombre().equals("CONDICION>=")) {
                   vCONDICIONME(padre.getChildren().get(0));
                 }else if (padre.getChildren().get(0).getData().getNombre().equals("CONDICION<=")) {
                   vCONDICIONMNE(padre.getChildren().get(0));
                 }else if (padre.getChildren().get(0).getData().getNombre().equals("CONDICION<>")) {
                   vCONDICIONNE(padre.getChildren().get(0));
                 }

                 else {
                   inta(padre.getChildren().get(0));
                 }

             }

           }
           else {

           }
      }

      public void vCONDICIONE(GenericTreeNode sa){

        Cuadrupla adios = new Cuadrupla();
        Cuadrupla adios2 = new Cuadrupla();

        for (int i = 0; i < sa.getNumberOfChildren(); i++) {
          GenericTreeNode hijo = sacar(sa.getChildren().get(i));
          if (hijo.getNumberOfChildren() < 2) {

            if (i == 0) {
              adios.setOperador("if =");
              adios.setArg1(hijo.getData().getNombre());
            }
            else {
              adios.setArg2(hijo.getData().getNombre());
              adios.setResultado("_"+etqList.get(0));
            }

          }
          else{
            if (hijo.getData().getNombre().equals("CONDICION<")){
             vCONDICIONm(hijo);
           }else if (hijo.getData().getNombre().equals("CONDICION>")){
             vCONDICIONM(hijo);
           }else if (hijo.getData().getNombre().equals("CONDICION<>")){
             vCONDICIONNE(hijo);
           }else if (hijo.getData().getNombre().equals("CONDICION=")){
             vCONDICIONE(hijo);
           }else if (hijo.getData().getNombre().equals("CONDICION>=")){
             vCONDICIONME(hijo);
           }else if (hijo.getData().getNombre().equals("CONDICION<=")){
             vCONDICIONMNE(hijo);
           }
            else if(hijo.getData().getNombre().equals("AM")){
              String temp = "t" + contador;
              String temp1 = vAM(hijo);
              adios.setArg1(temp1);
              contador++;
            }
          }
        }
        tabla.AgregarCuad(adios);
        if(etqList.size()>1){
                tabla.Ingresar("GOTO", etqList.get(1), "");
              }

      }

      public void vCONDICIONME(GenericTreeNode sa){

        Cuadrupla adios = new Cuadrupla();
        Cuadrupla adios2 = new Cuadrupla();

        for (int i = 0; i < sa.getNumberOfChildren(); i++) {
          GenericTreeNode hijo = sacar(sa.getChildren().get(i));
          if (hijo.getNumberOfChildren() < 2) {

            if (i == 0) {
              adios.setOperador("if >=");
              adios.setArg1(hijo.getData().getNombre());
            }
            else {
              adios.setArg2(hijo.getData().getNombre());
              adios.setResultado("_"+etqList.get(0));
            }

          }
          else{
            if (hijo.getData().getNombre().equals("CONDICION<")){
             vCONDICIONm(hijo);
           }else if (hijo.getData().getNombre().equals("CONDICION>")){
             vCONDICIONM(hijo);
           }else if (hijo.getData().getNombre().equals("CONDICION<>")){
             vCONDICIONNE(hijo);
           }else if (hijo.getData().getNombre().equals("CONDICION=")){
             vCONDICIONE(hijo);
           }else if (hijo.getData().getNombre().equals("CONDICION>=")){
             vCONDICIONME(hijo);
           }else if (hijo.getData().getNombre().equals("CONDICION<=")){
             vCONDICIONMNE(hijo);
           }
            else if(hijo.getData().getNombre().equals("AM")){
              String temp = "t" + contador;
              String temp1 = vAM(hijo);
              adios.setArg1(temp1);
              contador++;
            }
          }
        }
        tabla.AgregarCuad(adios);
        if(etqList.size()>1){
                tabla.Ingresar("GOTO", etqList.get(1), "");
              }

      }

      public void vCONDICIONMNE(GenericTreeNode sa){

        Cuadrupla adios = new Cuadrupla();
        Cuadrupla adios2 = new Cuadrupla();

        for (int i = 0; i < sa.getNumberOfChildren(); i++) {
          GenericTreeNode hijo = sacar(sa.getChildren().get(i));
          if (hijo.getNumberOfChildren() < 2) {

            if (i == 0) {
              adios.setOperador("if <=");
              adios.setArg1(hijo.getData().getNombre());
            }
            else {
              adios.setArg2(hijo.getData().getNombre());
              adios.setResultado("_"+etqList.get(0));
            }

          }
          else{
            if (hijo.getData().getNombre().equals("CONDICION<")){
             vCONDICIONm(hijo);
           }else if (hijo.getData().getNombre().equals("CONDICION>")){
             vCONDICIONM(hijo);
           }else if (hijo.getData().getNombre().equals("CONDICION<>")){
             vCONDICIONNE(hijo);
           }else if (hijo.getData().getNombre().equals("CONDICION=")){
             vCONDICIONE(hijo);
           }else if (hijo.getData().getNombre().equals("CONDICION>=")){
             vCONDICIONME(hijo);
           }else if (hijo.getData().getNombre().equals("CONDICION<=")){
             vCONDICIONMNE(hijo);
           }
            else if(hijo.getData().getNombre().equals("AM")){
              String temp = "t" + contador;
              String temp1 = vAM(hijo);
              adios.setArg1(temp1);
              contador++;
            }
          }
        }
        tabla.AgregarCuad(adios);
        if(etqList.size()>1){
                tabla.Ingresar("GOTO", etqList.get(1), "");
              }

      }

      public void vCONDICIONM(GenericTreeNode sa){

        Cuadrupla adios = new Cuadrupla();
        Cuadrupla adios2 = new Cuadrupla();

        for (int i = 0; i < sa.getNumberOfChildren(); i++) {
          GenericTreeNode hijo = sacar(sa.getChildren().get(i));
          if (hijo.getNumberOfChildren() < 2) {

            if (i == 0) {
              adios.setOperador("if >");
              adios.setArg1(hijo.getData().getNombre());
            }
            else {
              adios.setArg2(hijo.getData().getNombre());
              adios.setResultado("_"+etqList.get(0));
            }

          }
          else{
            if (hijo.getData().getNombre().equals("CONDICION<")){
             vCONDICIONm(hijo);
           }else if (hijo.getData().getNombre().equals("CONDICION>")){
             vCONDICIONM(hijo);
           }else if (hijo.getData().getNombre().equals("CONDICION<>")){
             vCONDICIONNE(hijo);
           }else if (hijo.getData().getNombre().equals("CONDICION=")){
             vCONDICIONE(hijo);
           }else if (hijo.getData().getNombre().equals("CONDICION>=")){
             vCONDICIONME(hijo);
           }else if (hijo.getData().getNombre().equals("CONDICION<=")){
             vCONDICIONMNE(hijo);
           }
            else if(hijo.getData().getNombre().equals("AM")){
              String temp = "t" + contador;
              String temp1 = vAM(hijo);
              adios.setArg1(temp1);
              contador++;
            }
          }
        }
        tabla.AgregarCuad(adios);
        if(etqList.size()>1){
                tabla.Ingresar("GOTO", etqList.get(1), "");
              }

      }



     public void vCONDICIONm(GenericTreeNode sa){

       Cuadrupla adios = new Cuadrupla();
       Cuadrupla adios2 = new Cuadrupla();
       String act = new_etq();

       for (int i = 0; i < sa.getNumberOfChildren(); i++) {
         GenericTreeNode hijo = sacar(sa.getChildren().get(i));
         if (hijo.getNumberOfChildren() < 2) {

           if (i == 0) {
             adios.setOperador("if <");
             adios.setArg1(hijo.getData().getNombre());
           }
           else {
             adios.setArg2(hijo.getData().getNombre());
             adios.setResultado("_"+etqList.get(0));
           }

         }
         else{
           if (hijo.getData().getNombre().equals("CONDICION<")){
             vCONDICIONm(hijo);
           }else if (hijo.getData().getNombre().equals("CONDICION>")){
             vCONDICIONM(hijo);
           }else if (hijo.getData().getNombre().equals("CONDICION<>")){
             vCONDICIONNE(hijo);
           }else if (hijo.getData().getNombre().equals("CONDICION=")){
             vCONDICIONE(hijo);
           }else if (hijo.getData().getNombre().equals("CONDICION>=")){
             vCONDICIONME(hijo);
           }else if (hijo.getData().getNombre().equals("CONDICION<=")){
             vCONDICIONMNE(hijo);
           }
           else if(hijo.getData().getNombre().equals("AM")){
             String temp = "t" + contador;
             String temp1 = vAM(hijo);
             adios.setArg1(temp1);
             contador++;
           }
         }
       }
       tabla.AgregarCuad(adios);
       if(etqList.size()>1){
                tabla.Ingresar("GOTO", etqList.get(1), "");
              }

     }

     public void vCONDICIONNE(GenericTreeNode sa){

       Cuadrupla adios = new Cuadrupla();
       Cuadrupla adios2 = new Cuadrupla();

       for (int i = 0; i < sa.getNumberOfChildren(); i++) {
         GenericTreeNode hijo = sacar(sa.getChildren().get(i));
         if (hijo.getNumberOfChildren() < 2) {

           if (i == 0) {
             adios.setOperador("if <>");
             adios.setArg1(hijo.getData().getNombre());
           }
           else {
             adios.setArg2(hijo.getData().getNombre());
             adios.setResultado("_"+etqList.get(0));
           }

         }
         else{
           if (hijo.getData().getNombre().equals("CONDICION<")){
             vCONDICIONm(hijo);
           }else if (hijo.getData().getNombre().equals("CONDICION>")){
             vCONDICIONM(hijo);
           }else if (hijo.getData().getNombre().equals("CONDICION<>")){
             vCONDICIONNE(hijo);
           }else if (hijo.getData().getNombre().equals("CONDICION=")){
             vCONDICIONE(hijo);
           }else if (hijo.getData().getNombre().equals("CONDICION>=")){
             vCONDICIONME(hijo);
           }else if (hijo.getData().getNombre().equals("CONDICION<=")){
             vCONDICIONMNE(hijo);
           }
           else if(hijo.getData().getNombre().equals("AM")){
             String temp = "t" + contador;
             String temp1 = vAM(hijo);
             adios.setArg1(temp1);
             contador++;
           }
         }
       }
       tabla.AgregarCuad(adios);
       if(etqList.size()>1){
                tabla.Ingresar("GOTO", etqList.get(1), "");
              }

     }

     public String vAR(GenericTreeNode ar){
                  Cuadrupla adios = new Cuadrupla();
                  String resultado = "";
                  ArrayList<String> segunda = new ArrayList<String>();

                  for (int i = 0; i < ar.getNumberOfChildren(); i++) {

                    GenericTreeNode hijo = sacar(ar.getChildren().get(i));

                    if (hijo.getNumberOfChildren() < 2) {
                      String temp = "t" + contador;
                      if (i == 0) {
                        adios.setOperador("+");
                        adios.setArg1(hijo.getData().getNombre());

                      }
                      else {
                          if (!resultado.equals("")){
                            adios.setOperador("+");
                            adios.setArg1(resultado);
                            adios.setArg2(hijo.getData().getNombre());
                            adios.setResultado(temp);
                            tabla.AgregarCuad(adios);
                            contador++;

                            resultado = temp;
                          }
                          else {
                            adios.setArg2(hijo.getData().getNombre());
                            adios.setResultado(temp);
                            tabla.AgregarCuad(adios);
                            contador++;

                            resultado = temp;
                          }
                      }
                    }
                    else{
                      if (hijo.getData().getNombre().equals("AR+")) {
                        resultado = vAR(hijo);
                      }else if (hijo.getData().getNombre().equals("AR-")){
                        resultado = vARM(hijo);
                      }

                      else if(hijo.getData().getNombre().equals("AM*")){
                        resultado = vAM(hijo);
                        segunda.add(resultado);
                      }else if(hijo.getData().getNombre().equals("AM/")){
                        resultado = vAMD(hijo);
                        segunda.add(resultado);
                      }

                    }
                  }
                    if (segunda.size() == 2){
                      String temp = "t" + contador;
                      adios.setOperador("+");
                      adios.setArg1(segunda.get(0));
                      adios.setArg2(segunda.get(1));
                      adios.setResultado(temp);
                      tabla.AgregarCuad(adios);
                      contador++;

                      resultado = temp;
                    }

                    if (adios.getArg2() == null || adios.getResultado() == null){
                      String temp = "t" + contador;
                      adios.setArg2(resultado);
                      adios.setResultado(temp);
                      tabla.AgregarCuad(adios);
                      contador++;

                      resultado = temp;

                    }

                    return resultado;

                }
        
        public String vARM(GenericTreeNode ar){
                  Cuadrupla adios = new Cuadrupla();
                  String resultado = "";
                  ArrayList<String> segunda = new ArrayList<String>();

                  for (int i = 0; i < ar.getNumberOfChildren(); i++) {

                    GenericTreeNode hijo = sacar(ar.getChildren().get(i));

                    if (hijo.getNumberOfChildren() < 2) {
                      String temp = "t" + contador;
                      if (i == 0) {
                        adios.setOperador("-");
                        adios.setArg1(hijo.getData().getNombre());

                      }
                      else {
                          if (!resultado.equals("")){
                            adios.setOperador("-");
                            adios.setArg1(resultado);
                            adios.setArg2(hijo.getData().getNombre());
                            adios.setResultado(temp);
                            tabla.AgregarCuad(adios);
                            contador++;

                            resultado = temp;
                          }
                          else {
                            adios.setArg2(hijo.getData().getNombre());
                            adios.setResultado(temp);
                            tabla.AgregarCuad(adios);
                            contador++;

                            resultado = temp;
                          }
                      }
                    }
                    else{
                      if (hijo.getData().getNombre().equals("AR+")) {
                        resultado = vAR(hijo);
                      }else if (hijo.getData().getNombre().equals("AR-")) {
                        resultado = vARM(hijo);
                      }

                      else if(hijo.getData().getNombre().equals("AM*")){
                        resultado = vAM(hijo);
                        segunda.add(resultado);
                      }else if(hijo.getData().getNombre().equals("AM/")){
                        resultado = vAMD(hijo);
                        segunda.add(resultado);
                      }

                    }
                  }
                    if (segunda.size() == 2){
                      String temp = "t" + contador;
                      adios.setOperador("-");
                      adios.setArg1(segunda.get(0));
                      adios.setArg2(segunda.get(1));
                      adios.setResultado(temp);
                      tabla.AgregarCuad(adios);
                      contador++;

                      resultado = temp;
                    }

                    if (adios.getArg2() == null || adios.getResultado() == null){
                      String temp = "t" + contador;
                      adios.setArg2(resultado);
                      adios.setResultado(temp);
                      tabla.AgregarCuad(adios);
                      contador++;

                      resultado = temp;

                    }

                    return resultado;

                }

              public String vAM(GenericTreeNode ar){
                Cuadrupla adios = new Cuadrupla();
                String resultado = "";

                for (int i = 0; i < ar.getNumberOfChildren(); i++) {
                  GenericTreeNode hijo = sacar(ar.getChildren().get(i));
                  if (hijo.getNumberOfChildren() < 2) {
                    String temp = "t" + contador;
                    if (i == 0) {
                      adios.setOperador("*");
                      adios.setArg1(hijo.getData().getNombre());

                    }
                    else {
                      if (!resultado.equals("")){
                        adios.setOperador("*");
                        adios.setArg1(resultado);
                        adios.setArg2(hijo.getData().getNombre());
                        adios.setResultado(temp);
                        tabla.AgregarCuad(adios);
                        contador++;

                        resultado = temp;
                      }
                      else {
                        adios.setArg2(hijo.getData().getNombre());
                        adios.setResultado(temp);
                        tabla.AgregarCuad(adios);
                        contador++;

                        resultado = temp;
                      }
                    }
                  }
                  else{
                    if (hijo.getData().getNombre().equals("AM*")) {
                      resultado = vAM(hijo);
                    }else if (hijo.getData().getNombre().equals("AM/")) {
                        resultado = vAMD(hijo);
                      }

                  }
                }

                return resultado;

              }
              
              public String vAMD(GenericTreeNode ar){
                Cuadrupla adios = new Cuadrupla();
                String resultado = "";

                for (int i = 0; i < ar.getNumberOfChildren(); i++) {
                  GenericTreeNode hijo = sacar(ar.getChildren().get(i));
                  if (hijo.getNumberOfChildren() < 2) {
                    String temp = "t" + contador;
                    if (i == 0) {
                      adios.setOperador("/");
                      adios.setArg1(hijo.getData().getNombre());

                    }
                    else {
                      if (!resultado.equals("")){
                        adios.setOperador("/");
                        adios.setArg1(resultado);
                        adios.setArg2(hijo.getData().getNombre());
                        adios.setResultado(temp);
                        tabla.AgregarCuad(adios);
                        contador++;

                        resultado = temp;
                      }
                      else {
                        adios.setArg2(hijo.getData().getNombre());
                        adios.setResultado(temp);
                        tabla.AgregarCuad(adios);
                        contador++;

                        resultado = temp;
                      }
                    }
                  }
                  else{
                    if (hijo.getData().getNombre().equals("AM*")) {
                      resultado = vAM(hijo);
                    }else if (hijo.getData().getNombre().equals("AM/")) {
                        resultado = vAMD(hijo);
                      }

                  }
                }

                return resultado;

              }


                public void vSA(GenericTreeNode sa){

                  Cuadrupla adios = new Cuadrupla();
                  Cuadrupla adios2 = new Cuadrupla();

                  for (int i = 0; i < sa.getNumberOfChildren(); i++) {
                    GenericTreeNode hijo = sacar(sa.getChildren().get(i));
                    if (hijo.getNumberOfChildren() < 2) {
                      String temp = "t" + contador;
                      if (i == 0) {
                        adios.setOperador(":=");
                        adios.setResultado(hijo.getData().getNombre());
                      }
                      else {

                        adios2.setOperador(":=");
                        adios2.setResultado(temp);
                        adios2.setArg1(hijo.getData().getNombre());
                        adios2.setArg2("1");
                        tabla.AgregarCuad(adios2);
                        adios.setArg1(temp);
                        adios.setArg2("0");
                        contador++;

                      }

                    }
                    else{
                      if (hijo.getData().getNombre().equals("AR+")){
                        String temp = "t" + contador;
                        String temp1 = vAR(hijo);
                        adios.setArg1(temp1);
                        contador++;
                      }else if (hijo.getData().getNombre().equals("AR-")){
                        String temp = "t" + contador;
                        String temp1 = vARM(hijo);
                        adios.setArg1(temp1);
                        contador++;
                      }
                      else if(hijo.getData().getNombre().equals("AM*")){
                        String temp = "t" + contador;
                        String temp1 = vAM(hijo);
                        adios.setArg1(temp1);
                        contador++;
                      }else if(hijo.getData().getNombre().equals("AM/")){
                        String temp = "t" + contador;
                        String temp1 = vAMD(hijo);
                        adios.setArg1(temp1);
                        contador++;
                      }
                    }
                  }
                  tabla.AgregarCuad(adios);
                }


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= CP ZD CUP 
            {
              GenericTree RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode cp = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int zdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int zdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode zd = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cupleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cupright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode cup = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTree tree= new GenericTree();
        GenericTreeNode pro= new GenericTreeNode(new Tipo("Programa", "Programa"));
        pro.addChild(cp);
        pro.addChild(zd);
        pro.addChild(cup);
        tree.setRoot(pro);
        tree.list();
        GenericTreeNode cupo = tree.buscar("CUP").get(0);
        inta(cupo);
          



              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTree start_val = (GenericTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CP ::= PROGRAM ID CIERRE 
            {
              GenericTreeNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        GenericTreeNode cp= new GenericTreeNode(new Tipo("CP", "CP"));
        GenericTreeNode pr= new GenericTreeNode(new Tipo(p, p));
        GenericTreeNode id= new GenericTreeNode(new Tipo(i, i));
        cp.addChild(pr);
        cp.addChild(id);
        RESULT=cp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CP ::= error ZD 
            {
              GenericTreeNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ZD ::= ZDV ZDSP 
            {
              GenericTreeNode RESULT =null;
		int zdvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int zdvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode zdv = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int zdspleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int zdspright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode zdsp = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode zd = new GenericTreeNode(new Tipo("ZD","ZD"));
        zd.addChild(zdv);
        zd.addChild(zdsp);
        RESULT=zd;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ZD",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ZDV ::= VAR DE 
            {
              GenericTreeNode RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int deleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode de = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode zdv= new GenericTreeNode(new Tipo("ZDV", "ZDV"));
        GenericTreeNode v= new GenericTreeNode(new Tipo(var, var));
        zdv.addChild(v);
        zdv.addChild(de);
        RESULT=zdv;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ZDV",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ZDV ::= error DE 
            {
              GenericTreeNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ZDV",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DE ::= DEI DE 
            {
              GenericTreeNode RESULT =null;
		int deileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int deiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode dei = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode d = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode de= new GenericTreeNode(new Tipo("DE", "DE"));
        de.addChild(dei);
        de.addChild(d);
        RESULT=de;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DE ::= DEI 
            {
              GenericTreeNode RESULT =null;
		int deileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode dei = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode de= new GenericTreeNode(new Tipo("DE", "DE"));
        de.addChild(dei);
        RESULT=de;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DEI ::= ID COMA DEI 
            {
              GenericTreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int deleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode de = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String tipo= "";
        if(Declaracion == true){
            simbolo.crear(id, de.getData().getTipo(),ambito);
            tipo = de.getData().getTipo();
        }else if((Funcion== true)&&(FCParametro==false)){

            if(de.getData().getTipo().equals("Integer")){
                contador = contador + 4;
            }else{
                contador = contador + 1;
            }
            tfuncion.crear(id, de.getData().getTipo(),ambito, contador);
            tipo = de.getData().getTipo();
        }else if((Funcion== true)&&(FCParametro==true)){
            num_parametros = num_parametros + 1;
            dominio = dominio+" X "+de.getData().getTipo();
            tipo = de.getData().getTipo();
        }

        GenericTreeNode dei= new GenericTreeNode(new Tipo("DEI", tipo));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        dei.addChild(i);
        dei.addChild(de);
        RESULT=dei;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEI",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEI ::= ID DECLARACION TD CIERRE 
            {
              GenericTreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode td = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        String tipo="";
        if(Declaracion == true){
            simbolo.crear(id, td.getData().getTipo(),ambito);
            tipo = td.getData().getTipo();

        }
        if((Funcion == true) && (FCParametro==false)) {
            if(td.getData().getTipo().equals("Integer")){
                contador = contador + 4;
            }else{
                contador = contador + 1;
            }
            tfuncion.crear(id, td.getData().getTipo(),ambito, contador);
            tipo = td.getData().getTipo();
        }else if((Funcion == true) && (FCParametro==true)){
            num_parametros = num_parametros + 1;
            tipo = td.getData().getTipo();

            if(dominio.isEmpty() == true){
                dominio = td.getData().getTipo();
            }else{
                dominio = dominio+" X "+td.getData().getTipo();
            }
        }

        GenericTreeNode dei= new GenericTreeNode(new Tipo("DEI", tipo));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        dei.addChild(i);
        dei.addChild(td);
        RESULT=dei;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEI",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TD ::= TS 
            {
              GenericTreeNode RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ss = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode td = new GenericTreeNode(new Tipo(ss.getData().getNombre(), ss.getData().getTipo()));
        td.addChild(ss);
        RESULT=td;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TD",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TD ::= TE 
            {
              GenericTreeNode RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode te = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode td = new GenericTreeNode(new Tipo(te.getData().getNombre(), te.getData().getTipo()));
        td.addChild(te);
        RESULT=td;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TD",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TD ::= error ZDSP 
            {
              GenericTreeNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TD",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TS ::= INTEGER 
            {
              GenericTreeNode RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode ts= new GenericTreeNode(new Tipo(in, in));
        RESULT= ts;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TS ::= CHAR 
            {
              GenericTreeNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode ts= new GenericTreeNode(new Tipo(c, c));
        RESULT= ts;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TS ::= BOOLEAN 
            {
              GenericTreeNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode ts= new GenericTreeNode(new Tipo(b, b));
        RESULT= ts;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TE ::= TA 
            {
              GenericTreeNode RESULT =null;
		int taleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int taright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ta = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode te = new GenericTreeNode(new Tipo(ta.getData().getNombre(), ta.getData().getTipo()));
        te.addChild(ta);
        RESULT=te;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TE ::= TST 
            {
              GenericTreeNode RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode tst = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode te = new GenericTreeNode(new Tipo(tst.getData().getNombre(), tst.getData().getTipo()));
        te.addChild(tst);
        RESULT=te;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TA ::= ARRAY LLAVEIZQ NUM PUNTO PUNTO NUM LLAVEDER OF TD 
            {
              GenericTreeNode RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String ar = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String li = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ld = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode td = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String tipo = ar+"("+n+".."+n1+","+td.getData().getTipo()+")";

        GenericTreeNode ta = new GenericTreeNode(new Tipo("TA", tipo));
        GenericTreeNode s = new GenericTreeNode(new Tipo(ar, ar));
        GenericTreeNode f = new GenericTreeNode(new Tipo(o, o));
        GenericTreeNode num = new GenericTreeNode(new Tipo("NUM", "NUM"));
        GenericTreeNode num2 = new GenericTreeNode(new Tipo("NUM2", "NUM2"));
        ta.addChild(s);
        ta.addChild(num);
        ta.addChild(num2);
        ta.addChild(f);
        ta.addChild(td);
        RESULT=ta;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TA",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TST ::= STRING LLAVEIZQ NUM LLAVEDER 
            {
              GenericTreeNode RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String li = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ld = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String tipo = "Array"+"("+1+".."+n+","+"String"+")";

        GenericTreeNode tst = new GenericTreeNode(new Tipo("TST", tipo));
        GenericTreeNode s = new GenericTreeNode(new Tipo(st, st));
        GenericTreeNode num = new GenericTreeNode(new Tipo("NUM", "NUM"));
        tst.addChild(s);
        tst.addChild(num);
        RESULT=tst;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ZDSP ::= DSP 
            {
              GenericTreeNode RESULT =null;
		int dspleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dspright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode dsp = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode zdsp = new GenericTreeNode(new Tipo("ZDSP", "ZDSP"));
        zdsp.addChild(dsp);
        RESULT=zdsp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ZDSP",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ZDSP ::= 
            {
              GenericTreeNode RESULT =null;
		
        GenericTreeNode vacio = new GenericTreeNode(new Tipo("", ""));
        RESULT=vacio;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ZDSP",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DSP ::= DF ZDSP 
            {
              GenericTreeNode RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode df = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int zdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int zdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode zd = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode dsp = new GenericTreeNode(new Tipo("DSP", "DSP"));
        dsp.addChild(df);
        dsp.addChild(zd);
        RESULT=dsp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DSP",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DSP ::= DP ZDSP 
            {
              GenericTreeNode RESULT =null;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode dp = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int zdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int zdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode zd = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode dsp = new GenericTreeNode(new Tipo("DSP", "DSP"));
        dsp.addChild(dp);
        dsp.addChild(zd);
        RESULT=dsp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DSP",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DF ::= CF ZD CUF 
            {
              GenericTreeNode RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode fc = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int zdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int zdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode zd = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode sc = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode df = new GenericTreeNode(new Tipo("DF", "DF"));
        df.addChild(fc);
        df.addChild(zd);
        df.addChild(sc);
        RESULT=df;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DF",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CF ::= FUNCTION ID DECLARACION TEL CIERRE 
            {
              GenericTreeNode RESULT =null;
		int ftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ft = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int telleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int telright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode tel = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        GenericTreeNode proce= new GenericTreeNode(new Tipo("FUNCION", "FUNCION"));
        GenericTreeNode fc= new GenericTreeNode(new Tipo(ft, ft));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        proce.addChild(fc);
        proce.addChild(i);
        proce.addChild(tel);

        contador = 0;
        Declaracion = false;
        Funcion = true;
        idMetodo = id;
        tfuncion.crearid(id);
        fun.crear(id, "void->"+tel.getData().getTipo(), ambito, "void", tel.getData().getTipo(), num_parametros);
        ambitoF = ambitoF+"."+idMetodo;
        ambito = ambitoF;

        RESULT=proce;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CF",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$0 ::= 
            {
              GenericTreeNode RESULT =null;
		int ftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ft = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

        Declaracion = false;
        Funcion = true; FCParametro =true;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CF ::= FUNCTION ID PARIZQ NT$0 DE PARDER DECLARACION TEL CIERRE 
            {
              GenericTreeNode RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (GenericTreeNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String ft = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pfvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pfvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		GenericTreeNode pfv = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int telleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int telright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode tel = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        GenericTreeNode proce= new GenericTreeNode(new Tipo("FUNCION", "FUNCION"));
        GenericTreeNode fc= new GenericTreeNode(new Tipo(ft, ft));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        proce.addChild(fc);
        proce.addChild(i);
        proce.addChild(pfv);
        proce.addChild(tel);
        RESULT=proce;
        contador=0;
        tfuncion.crearid(id);
        idMetodo = id;
        fun.crear(id, dominio+"->"+tel.getData().getTipo(), ambito, dominio, tel.getData().getTipo(),num_parametros);
        FCParametro = false;
        Declaracion = false;
        Funcion = true;
        ambitoF = ambitoF+"."+idMetodo;
        ambito = ambitoF;
        dominio="";
        num_parametros = 0;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CF",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TEL ::= TS 
            {
              GenericTreeNode RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ts = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode tel = new GenericTreeNode(new Tipo(ts.getData().getNombre(), ts.getData().getTipo()));
        tel.addChild(ts);
        RESULT= tel;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEL",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TEL ::= TST 
            {
              GenericTreeNode RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode tst = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode tel = new GenericTreeNode(new Tipo(tst.getData().getNombre(), tst.getData().getTipo()));
        tel.addChild(tst);
        RESULT= tst;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEL",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CUF ::= SC 
            {
              GenericTreeNode RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode sc = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode cup = new GenericTreeNode(new Tipo("CUF", "CUF"));
        cup.addChild(sc);

        ambito=tfuncion.quitarAmbito(ambito,tfuncion.getId());
        ambitoF=ambito;
        RESULT=cup;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUF",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CUF ::= error CUP 
            {
              GenericTreeNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUF",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DP ::= CPR ZD CUPR 
            {
              GenericTreeNode RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode pc = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int zdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int zdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode zd = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode sc = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode dp = new GenericTreeNode(new Tipo("DP", "DP"));
        dp.addChild(pc);
        dp.addChild(zd);
        dp.addChild(sc);
        RESULT=dp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DP",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CPR ::= PROCEDURE ID CIERRE 
            {
              GenericTreeNode RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        GenericTreeNode proce= new GenericTreeNode(new Tipo("PROCEDURE", "PROCEDURE"));
        GenericTreeNode p= new GenericTreeNode(new Tipo(pc, pc));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        proce.addChild(p);
        proce.addChild(i);
        contador = 0;
        Declaracion = false;
        Funcion = true;
        idMetodo = id;
        tfuncion.crearid(id);
        fun.crear(id, "void->void", ambito, "void","void",num_parametros);
        ambito = ambito+"."+idMetodo;
        RESULT=proce;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$1 ::= 
            {
              GenericTreeNode RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

        Declaracion = false;
        Funcion = true;
        FCParametro =true;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CPR ::= PROCEDURE ID PARIZQ NT$1 DE PARDER CIERRE 
            {
              GenericTreeNode RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (GenericTreeNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode pf = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        GenericTreeNode proce= new GenericTreeNode(new Tipo("PROCEDURE", "PROCEDURE"));
        GenericTreeNode p= new GenericTreeNode(new Tipo(pc, pc));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        GenericTreeNode pa= new GenericTreeNode(new Tipo(pf.getData().getNombre(), pf.getData().getTipo()));
        proce.addChild(p);
        proce.addChild(i);
        proce.addChild(pa);
        contador=0;
        tfuncion.crearid(id);
        idMetodo = id;
        fun.crear(id, dominio+"->void", ambito, dominio, "void",num_parametros);
        FCParametro = false;
        Declaracion = false;
        Funcion = true;
        ambitoF = ambitoF+"."+idMetodo;
        ambito = ambitoF;
        dominio="";
        num_parametros = 0;

        RESULT=proce;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CUPR ::= SC 
            {
              GenericTreeNode RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode sc = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode cup = new GenericTreeNode(new Tipo("CUPR", "CUPR"));
        cup.addChild(sc);

        ambito=tfuncion.quitarAmbito(ambito,tfuncion.getId());
        ambitoF=ambito;

        RESULT=cup;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUPR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CUPR ::= error CUP 
            {
              GenericTreeNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUPR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CUP ::= SC 
            {
              GenericTreeNode RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode sc = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode cup = new GenericTreeNode(new Tipo("CUP", "CUP"));
        cup.addChild(sc);
        RESULT=cup;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SC ::= BEGIN S END PUNTO 
            {
              GenericTreeNode RESULT =null;
		int bnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String bn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode s = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int edleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int edright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ed = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        GenericTreeNode sc = new GenericTreeNode(new Tipo("SC", "SC"));
        GenericTreeNode bg = new GenericTreeNode(new Tipo(bn, bn));
        GenericTreeNode e = new GenericTreeNode(new Tipo(ed, ed));
        sc.addChild(bg);
        sc.addChild(s);
        sc.addChild(e);
        RESULT=sc;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SC",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SCI ::= BEGIN S END CIERRE 
            {
              GenericTreeNode RESULT =null;
		int bnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String bn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode s = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int edleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int edright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ed = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        GenericTreeNode sc = new GenericTreeNode(new Tipo("SC", "SC"));
        GenericTreeNode bg = new GenericTreeNode(new Tipo(bn, bn));
        GenericTreeNode e = new GenericTreeNode(new Tipo(ed, ed));
        sc.addChild(bg);
        sc.addChild(s);
        sc.addChild(e);
        RESULT=sc;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCI",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // S ::= SA CIERRE S 
            {
              GenericTreeNode RESULT =null;
		int saleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int saright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode sa = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode s1 = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode s = new GenericTreeNode(new Tipo("S", "S"));
        s.addChild(sa);
        s.addChild(s1);
        RESULT=s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // S ::= 
            {
              GenericTreeNode RESULT =null;
		
        GenericTreeNode vacio= new GenericTreeNode(new Tipo("", ""));
        RESULT=vacio;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // S ::= SCI S 
            {
              GenericTreeNode RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode sc = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode s1 = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode s = new GenericTreeNode(new Tipo("S", "S"));
        s.addChild(sc);
        s.addChild(s1);
        RESULT=s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // S ::= LP CIERRE S 
            {
              GenericTreeNode RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode lp = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode s1 = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode s = new GenericTreeNode(new Tipo("S", "S"));
        s.addChild(lp);
        s.addChild(s1);
        RESULT=s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // S ::= EC 
            {
              GenericTreeNode RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ec = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode s = new GenericTreeNode(new Tipo("S", "S"));
        s.addChild(ec);
        RESULT=s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // S ::= MET CIERRE S 
            {
              GenericTreeNode RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode met = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode s1 = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode s = new GenericTreeNode(new Tipo("S", "S"));
        s.addChild(met);
        s.addChild(s1);
        RESULT=s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // S ::= error S 
            {
              GenericTreeNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SA ::= IDA ASSIG AR 
            {
              GenericTreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode id = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ar = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String tipo1 = "";
        if(ar.getData().getTipo().equals("VSTRING")){
            if(simbolo.buscarTipo(id.getData().getNombre())!=null){
               String tipo = simbolo.buscarTipo(id.getData().getNombre()).substring(9,simbolo.buscarTipo(id.getData().getNombre()).length()-8);
                    int m = Integer.parseInt(tipo);
                    if(m>=ar.getData().getNombre().length()){
                       System.out.println("correcto");
                       tipo1= ar.getData().getTipo();
                    }else{
                        System.err.println("El tamaño del string es mayor al de la variable: "+id);
                    }
            }else if(tfuncion.buscarTipo(id.getData().getNombre())!=null){
               String tipo = tfuncion.buscarTipo(id.getData().getNombre()).substring(9,tfuncion.buscarTipo(id.getData().getNombre()).length()-8);
                    int m = Integer.parseInt(tipo);
                    if(m>=ar.getData().getNombre().length()){
                       System.out.println("correcto");
                       tipo1= ar.getData().getTipo();
                    }else{
                        System.err.println("El tamaño del string es mayor al de la variable: "+id);
                    }
            }else{
                System.err.println("No se encuentra: ");
            }

            }else
                if(id.getData().getTipo().equals(ar.getData().getTipo())){
                    System.out.println("correcto");
                    tipo1= ar.getData().getTipo();
                }else
                    System.err.println("Esta asignando un tipo distinto a la variable: "+id.getData().getNombre()+","+ " tipo correcto: "+id.getData().getTipo());

        GenericTreeNode sa = new GenericTreeNode(new Tipo("SA", tipo1));
        sa.addChild(id);
        sa.addChild(ar);
        RESULT=sa;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IDA ::= ID 
            {
              GenericTreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String tipo = "";
        if(simbolo.buscar(id)!=null){
            if(simbolo.prefijo(id, ambito)){
                tipo=simbolo.buscarTipo(id);
            }else{
                System.err.println("La variable "+id+ " no esta en este ambito.");
                tipo=simbolo.buscarTipo(id);
            }

        }else if(tfuncion.buscar(id)!=null){
            if(tfuncion.prefijo(id, ambito)){
                tipo=tfuncion.buscarTipo(id);
            }else{
                System.err.println("La variable "+id+ " no esta en este ambito.");
                tipo=tfuncion.buscarTipo(id);
            }

        }
        else{
            System.err.println("La variable "+id+" no esta declarada");
            tipo=tfuncion.buscarTipo(id);
        }
        GenericTreeNode ida = new GenericTreeNode(new Tipo(id, tipo));
        GenericTreeNode i = new GenericTreeNode(new Tipo(id, id));
        ida.addChild(i);
        RESULT=ida;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDA",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IDA ::= LA 
            {
              GenericTreeNode RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int laright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode la = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            GenericTreeNode ida = new GenericTreeNode(new Tipo("LA", la.getData().getTipo()));
            ida.addChild(la);
            RESULT=ida;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDA",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // AR ::= AR OPSUMA AM 
            {
              GenericTreeNode RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode ar = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int amright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode am = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String tipo = "";
        if(ar.getData().getTipo().equals(am.getData().getTipo()) && ar.getData().getTipo().equals("Integer")){
            tipo=ar.getData().getTipo();
        }else{
            System.err.println("Solo se pueden sumar o restar Enteros");
            tipo=ar.getData().getTipo();
        }
        GenericTreeNode a= new GenericTreeNode(new Tipo("AR"+op, tipo));
        a.addChild(ar);
        a.addChild(am);
        RESULT=a;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AR",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // AR ::= AM 
            {
              GenericTreeNode RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int amright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode am = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode a= new GenericTreeNode(new Tipo("AR", am.getData().getTipo()));
        a.addChild(am);
        RESULT=a;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AR",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // AM ::= AM OP F 
            {
              GenericTreeNode RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode am = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode val = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String tipo = "";
        if(am.getData().getTipo().equals(val.getData().getTipo()) && am.getData().getTipo().equals("Integer")){
            tipo=am.getData().getTipo();
        }else{
            System.err.println("Solo se pueden multiplicar o dividir Enteros");
            tipo=am.getData().getTipo();
        }

        GenericTreeNode a= new GenericTreeNode(new Tipo("AM"+op, tipo));
        a.addChild(am);
        a.addChild(val);
        RESULT=a;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AM",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // AM ::= F 
            {
              GenericTreeNode RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode val = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode a= new GenericTreeNode(new Tipo("AM", val.getData().getTipo()));
        a.addChild(val);
        RESULT=a;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AM",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // F ::= EXPRESION 
            {
              GenericTreeNode RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ex = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode f= new GenericTreeNode(new Tipo(ex.getData().getNombre(), ex.getData().getTipo()));
        f.addChild(ex);
        RESULT=f;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // F ::= PARIZQ AR PARDER 
            {
              GenericTreeNode RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode ar = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        GenericTreeNode f= new GenericTreeNode(new Tipo("AR", ar.getData().getTipo()));
        f.addChild(ar);
        RESULT=f;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OP ::= OPMULT 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=op;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OP ::= DIV 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=op;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OP ::= MOD 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=op;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OL ::= OPLOG 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=op;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OL",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPL ::= OR 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=op;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPL",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPL ::= NOT 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=op;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPL",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPL ::= AND 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=op;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPL",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= LITERAL 
            {
              GenericTreeNode RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode lt = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode ex = new GenericTreeNode(new Tipo(lt.getData().getNombre(), lt.getData().getTipo()));
        ex.addChild(lt);
        RESULT=ex;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= ID 
            {
              GenericTreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String tipo = "";
        if(simbolo.buscar(id)!=null){
            if(simbolo.prefijo(id, ambito)){
                tipo=simbolo.buscarTipo(id);
            }else{
                System.err.println("La variable "+id+ " no esta en este ambito.");
                tipo=simbolo.buscarTipo(id);
            }

        }else if(tfuncion.buscar(id)!=null){
            if(tfuncion.prefijo(id, ambito)){
                tipo=tfuncion.buscarTipo(id);
            }else{
                System.err.println("La variable "+id+ " no esta en este ambito.");
                tipo=tfuncion.buscarTipo(id);
            }

        }
        else{
            System.err.println("La variable "+id+" no esta declarada");
            tipo=tfuncion.buscarTipo(id);
        }

        GenericTreeNode ex = new GenericTreeNode(new Tipo(id, tipo));
        GenericTreeNode i = new GenericTreeNode(new Tipo(id, id));
        ex.addChild(i);
        RESULT=ex;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= LF 
            {
              GenericTreeNode RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode lf = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode ex = new GenericTreeNode(new Tipo(lf.getData().getNombre(), lf.getData().getTipo()));
        ex.addChild(lf);
        RESULT=ex;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= LA 
            {
              GenericTreeNode RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int laright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode la = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode ex = new GenericTreeNode(new Tipo("LA", la.getData().getTipo()));
        ex.addChild(la);
        RESULT=ex;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LA ::= ID LLAVEIZQ EXPRESION LLAVEDER 
            {
              GenericTreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode ex = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        String tipo = "";
                if(simbolo.buscar(id)!=null){
                    if(simbolo.prefijo(id, ambito)==true){
                        if(ex.getData().getTipo().equals("Integer")){
                            tipo=simbolo.buscarTipo(id).substring(11, simbolo.buscarTipo(id).length()-1);
                        }else{
                            System.err.println("El index de: "+id+" debe ser entero");
                            tipo=simbolo.buscarTipo(id).substring(11, simbolo.buscarTipo(id).length()-1);
                        }
                    }else{
                        System.err.println("El array "+id+ " no puede ser llamada en este ambito.");
                        tipo=simbolo.buscarTipo(id).substring(11, simbolo.buscarTipo(id).length()-1);
                    }

                }else if(tfuncion.buscar(id)!=null){
                    if(tfuncion.prefijo(id, ambito)==true){
                        if(ex.getData().getTipo().equals("Integer")){
                            tipo=tfuncion.buscarTipo(id).substring(11, tfuncion.buscarTipo(id).length()-1);

                        }else{
                            System.err.println("El index de: "+id+" debe ser entero");
                            tipo=tfuncion.buscarTipo(id).substring(11, tfuncion.buscarTipo(id).length()-1);
                        }
                    }else{
                        System.err.println("El array "+id+ " no puede ser llamada en este ambito.");
                        tipo=tfuncion.buscarTipo(id).substring(11, tfuncion.buscarTipo(id).length()-1);
                    }

                }
        GenericTreeNode la = new GenericTreeNode(new Tipo(id, tipo));
        GenericTreeNode i = new GenericTreeNode(new Tipo(id, id));
        la.addChild(i);
        la.addChild(ex);
        RESULT=la; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LA",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LITERAL ::= NUM 
            {
              GenericTreeNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String num = "";
        num = String.valueOf(n);
        GenericTreeNode lt = new GenericTreeNode(new Tipo(num, "Integer"));
        RESULT=lt;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITERAL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LITERAL ::= VCHAR 
            {
              GenericTreeNode RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String cadena = vc.substring(1,vc.length()-1);
        GenericTreeNode lt = new GenericTreeNode(new Tipo(cadena, "char"));
        RESULT=lt;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITERAL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LITERAL ::= BOOL 
            {
              GenericTreeNode RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String bl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode lt = new GenericTreeNode(new Tipo(bl, bl));
        RESULT=lt;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITERAL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LITERAL ::= VSTRING 
            {
              GenericTreeNode RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String cadena = vs.substring(1,vs.length()-1);
        GenericTreeNode lt = new GenericTreeNode(new Tipo(cadena, "VSTRING"));
        RESULT=lt;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITERAL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LF ::= ID PARIZQ PAV PARDER 
            {
              GenericTreeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pfvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pfvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode pfv = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        String tipo = "";
        if(fun.buscar(i)!=null){
            if(fun.prefijo(i, ambito)==true){
                if(fun.buscarDominio(i).equals(dominioL)){
                    tipo = fun.buscarRango(i);
                }else{
                    System.err.println("Los parametros no son compatibles con la funcion "+ i);
                    tipo = fun.buscarRango(i);
                }
            }else{
                System.err.println("La funcion "+i+ " no puede ser llamada en este ambito.");
                tipo = fun.buscarRango(i);
            }
        }else{
            System.err.println("La funcion "+i+" no esta declarada");
            tipo = fun.buscarRango(i);
        }
        dominioL = "";

        GenericTreeNode lf= new GenericTreeNode(new Tipo("LF", tipo));
        GenericTreeNode id= new GenericTreeNode(new Tipo(i, i));
        lf.addChild(id);
        lf.addChild(pfv);
        RESULT=lf;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LF ::= ID PARIZQ PARDER 
            {
              GenericTreeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        String tipo = "";

        if(fun.buscar(i)!=null){
            if(fun.prefijo(i, ambito)==true){
                if(fun.buscarDominio(i).equals("void")){
                    tipo = fun.buscarRango(i);
                }else{
                    System.err.println("Los parametros no son compatibles con la funcion "+ i);
                    tipo = fun.buscarRango(i);
                }
            }else{
                System.err.println("La funcion "+i+ " no puede ser llamada en este ambito.");
                tipo = fun.buscarRango(i);
            }
        }else{
            System.err.println("La funcion "+i+" no esta declarada");
            tipo = fun.buscarRango(i);
        }

        GenericTreeNode lf= new GenericTreeNode(new Tipo("LF", tipo));
        GenericTreeNode id= new GenericTreeNode(new Tipo(i, i));
        lf.addChild(id);
        RESULT=lf;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PAV ::= PAV COMA EXPRESION 
            {
              GenericTreeNode RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode pa = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ex = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode pav= new GenericTreeNode(new Tipo("PAV", "PAV"));
        pav.addChild(pa);
        pav.addChild(ex);
        if(dominioL.isEmpty() == true){
                dominioL = ex.getData().getTipo();
            }else{
                dominioL = dominioL+" X "+ex.getData().getTipo();
            }
        RESULT=pav;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAV",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PAV ::= EXPRESION 
            {
              GenericTreeNode RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ex = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode pav= new GenericTreeNode(new Tipo("PAV", "PAV"));
        if(dominioL.isEmpty() == true){
                dominioL = ex.getData().getTipo();
            }else{
                dominioL = dominioL+" X "+ex.getData().getTipo();
            }
        pav.addChild(ex);
        RESULT=pav;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAV",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LP ::= ID PARIZQ PAV PARDER 
            {
              GenericTreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode pa = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        String tipo = "";
        if(fun.buscar(id)!=null){
            if(fun.prefijo(id, ambito)==true){
                if(fun.buscarDominio(id).equals(dominioL)){
                    tipo = fun.buscarRango(id);
                }else{
                    System.err.println("Los parametros no son compatibles con el procedimiento: "+ id);
                    tipo = fun.buscarRango(id);
                }
            }else{
                System.err.println("El procedimiento: "+id+ " no puede ser llamada en este ambito.");
                tipo = fun.buscarRango(id);
            }
        }else{
            System.err.println("El Procedimiento: "+id+" no esta declarada");
            tipo = fun.buscarRango(id);
        }
        dominioL = "";
        GenericTreeNode lp = new GenericTreeNode(new Tipo("LP", tipo));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        lp.addChild(i);
        lp.addChild(pa);
        RESULT=lp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LP",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LP ::= ID PARIZQ PARDER 
            {
              GenericTreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    String tipo = "";

        if(fun.buscar(id)!=null){
            if(fun.prefijo(id, ambito)==true){
                if(fun.buscarDominio(id).equals("void")){
                    tipo = fun.buscarRango(id);
                }else{
                    System.err.println("Los parametros no son compatibles con el procedimiento: "+ id);
                    tipo = fun.buscarRango(id);
                }
            }else{
                System.err.println("El procedimiento: "+id+ " no puede ser llamada en este ambito.");
                tipo = fun.buscarRango(id);
            }
        }else{
            System.err.println("El procedimiento: "+id+" no esta declarada");
            tipo = fun.buscarRango(id);
        }

        GenericTreeNode lp= new GenericTreeNode(new Tipo("LP", tipo));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        lp.addChild(i);
        RESULT=lp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LP",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EC ::= EA 
            {
              GenericTreeNode RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode is = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode ec = new GenericTreeNode(new Tipo("EC", "EC"));
        ec.addChild(is);
        RESULT=ec;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EC",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EC ::= ER 
            {
              GenericTreeNode RESULT =null;
		int erleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode er = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode ec = new GenericTreeNode(new Tipo("EC", "EC"));
        ec.addChild(er);
        RESULT=ec;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EC",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EA ::= IS 
            {
              GenericTreeNode RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode is = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode ec = new GenericTreeNode(new Tipo("EA", "EA"));
        ec.addChild(is);
        RESULT=ec;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EA",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IS ::= IF CONDICION THEN S ELSE S 
            {
              GenericTreeNode RESULT =null;
		int ifcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ifcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String ifc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		GenericTreeNode cd = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode s = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode s1 = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode is = new GenericTreeNode(new Tipo("IS", "IS"));
        //GenericTreeNode fi = new GenericTreeNode(new Tipo(ifc, ifc));
        //GenericTreeNode ten = new GenericTreeNode(new Tipo(tn, tn));
        //is.addChild(fi);
        String act = new_etq();
                      String act2 = new_etq();
                      String act3 = new_etq();
                      etqList.add(act);
                      etqList.add(act2);
                      etqList.add(act3);
        is.addChild(cd);
        //is.addChild(ten);
        is.addChild(s);
        is.addChild(s1);
        RESULT=is;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // IS ::= IF CONDICION THEN S 
            {
              GenericTreeNode RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode cd = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode s = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GenericTreeNode is = new GenericTreeNode(new Tipo("IS", "IS"));
        //GenericTreeNode fi = new GenericTreeNode(new Tipo(ifc, ifc));
        //GenericTreeNode ten = new GenericTreeNode(new Tipo(tn, tn));
        //is.addChild(fi);
        String act = new_etq();
                      etqList.add(act);
        is.addChild(cd);
        //is.addChild(ten);
        is.addChild(s);
        //is.addChild(s1);
        RESULT=is; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ER ::= RW 
            {
              GenericTreeNode RESULT =null;
		int rwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode rw = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode er = new GenericTreeNode(new Tipo("ER", "ER"));
        er.addChild(rw);
        RESULT=er;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ER",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ER ::= RR 
            {
              GenericTreeNode RESULT =null;
		int rrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode rr = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode er = new GenericTreeNode(new Tipo("ER", "ER"));
        er.addChild(rr);
        RESULT=er;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ER",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ER ::= RF 
            {
              GenericTreeNode RESULT =null;
		int rfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode rf = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode er = new GenericTreeNode(new Tipo("ER", "ER"));
        er.addChild(rf);
        RESULT=er;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ER",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // RW ::= WHILE CONDICION DO S 
            {
              GenericTreeNode RESULT =null;
		int wlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String wl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode cd = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode s = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode rw = new GenericTreeNode(new Tipo("RW", "RW"));
        GenericTreeNode f = new GenericTreeNode(new Tipo(wl, wl));
        GenericTreeNode tt = new GenericTreeNode(new Tipo(d, d));
        rw.addChild(f);
        rw.addChild(cd);
        rw.addChild(tt);
        rw.addChild(s);
        RESULT= rw;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RW",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // RR ::= REPEAT S UNTIL CONDICION 
            {
              GenericTreeNode RESULT =null;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String rp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode s = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ulleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ulright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ul = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode cd = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode rr = new GenericTreeNode(new Tipo("RR", "RR"));
        GenericTreeNode f = new GenericTreeNode(new Tipo(rp, rp));
        GenericTreeNode tt = new GenericTreeNode(new Tipo(ul, ul));
        rr.addChild(f);
        rr.addChild(s);
        rr.addChild(tt);
        rr.addChild(cd);
        RESULT= rr;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RR",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // RF ::= FOR SA TO EXPRESION DO S 
            {
              GenericTreeNode RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String fr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int saleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int saright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		GenericTreeNode sa = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode ex = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode s = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String tipo = "";
        if(sa.getData().getTipo().equals("Integer") && ex.getData().getTipo().equals("Integer")){
            tipo = sa.getData().getTipo();
        }else{
            tipo = sa.getData().getTipo();
            System.err.println("Solo se pueden comparar variables de tipo Integer");
        }
        GenericTreeNode rf = new GenericTreeNode(new Tipo("RF", tipo));
        //rf.addChild(f);
        rf.addChild(sa);
        //rf.addChild(tt);
        rf.addChild(ex);
        //rf.addChild(d);
        rf.addChild(s);
        RESULT= rf;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RF",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // RF ::= FOR SA DOWNTO EXPRESION DO S 
            {
              GenericTreeNode RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String fr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int saleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int saright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		GenericTreeNode sa = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode ex = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode s = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String tipo = "";
        if(sa.getData().getTipo().equals("Integer") && ex.getData().getTipo().equals("Integer")){
            tipo = sa.getData().getTipo();
        }else{
            tipo = sa.getData().getTipo();
            System.err.println("Solo se pueden comparar variables de tipo Integer");
        }
        GenericTreeNode rf = new GenericTreeNode(new Tipo("RF", tipo));
        //rf.addChild(f);
        rf.addChild(sa);
        //rf.addChild(tt);
        rf.addChild(ex);
        //rf.addChild(d);
        rf.addChild(s);
        RESULT= rf;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RF",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONDICION ::= CONDICION OL CONDICIONOPL 
            {
              GenericTreeNode RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode ex = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int olleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int olright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ol = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ex2 = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String tipo="";
        if(ex.getData().getTipo().equals("Integer") && ex2.getData().getTipo().equals("Integer")){
            tipo= ex.getData().getTipo();
        }else{
            System.err.println("Las expresiones que esta tratando de comparar tienen tipos distintos");
            tipo=ex.getData().getTipo();
        }
        GenericTreeNode eb = new GenericTreeNode(new Tipo("CONDICION"+ol, tipo));
        eb.addChild(ex);
        eb.addChild(ex2);
        RESULT=eb;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONDICION ::= CONDICIONOPL 
            {
              GenericTreeNode RESULT =null;
		int oplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode opl = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode a= new GenericTreeNode(new Tipo("CONDICION", opl.getData().getTipo()));
        a.addChild(opl);
        RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONDICIONOPL ::= CONDICIONOPL OPL EX 
            {
              GenericTreeNode RESULT =null;
		int oplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode opl = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ex = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String tipo="";
        if(opl.getData().getTipo().equals("Integer") && ex.getData().getTipo().equals("Integer")){
            tipo= opl.getData().getTipo();
        }else{
            System.err.println("Las expresiones que esta tratando de comparar tienen tipos distintos");
            tipo=opl.getData().getTipo();
        }
        GenericTreeNode eb = new GenericTreeNode(new Tipo("CONDICIONOPL"+op, tipo));
        eb.addChild(opl);
        eb.addChild(ex);
        RESULT=eb;

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONOPL",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CONDICIONOPL ::= EX 
            {
              GenericTreeNode RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ar = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode ex = new GenericTreeNode(new Tipo("CONDICIONOPL", ar.getData().getTipo()));
        ex.addChild(ar);
        RESULT=ex;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONOPL",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EX ::= AR 
            {
              GenericTreeNode RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ar = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode ex = new GenericTreeNode(new Tipo(ar.getData().getNombre(), ar.getData().getTipo()));
        ex.addChild(ar);
        RESULT=ex;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EX",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // MET ::= ESCR 
            {
              GenericTreeNode RESULT =null;
		int wtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode wt = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode met = new GenericTreeNode(new Tipo(wt.getData().getNombre(), wt.getData().getTipo()));
        met.addChild(wt);
        RESULT=met;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MET",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // MET ::= LEER 
            {
              GenericTreeNode RESULT =null;
		int lrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode lr = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode escr = new GenericTreeNode(new Tipo(lr.getData().getNombre(), lr.getData().getTipo()));
        escr.addChild(lr);
        RESULT=escr;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MET",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ESCR ::= WRITE PARIZQ VSTRING COMA EXPRESION PARDER 
            {
              GenericTreeNode RESULT =null;
		int wtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int wtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String wt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode id = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        
        fun.crear(wt, "string X "+ id.getData().getTipo()+"->void", ambito, "string X "+ id.getData().getTipo(), "void",num_parametros);
      
        
        GenericTreeNode escr = new GenericTreeNode(new Tipo(wt, "void"));
        escr.addChild(id);
        RESULT=escr;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCR",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ESCR ::= WRITE PARIZQ VSTRING PARDER 
            {
              GenericTreeNode RESULT =null;
		int wtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String wt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
  fun.crear(wt, "string->void", ambito, "string->void", "void",num_parametros);
  GenericTreeNode escr = new GenericTreeNode(new Tipo(wt, "void"));
  RESULT=escr;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCR",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LEER ::= READ PARIZQ EXPRESION PARDER 
            {
              GenericTreeNode RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode id = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

        fun.crear(rd, id.getData().getTipo()+"->void", ambito, id.getData().getTipo(), "void", num_parametros);
        
        
        GenericTreeNode leer = new GenericTreeNode(new Tipo(rd, "void"));
        leer.addChild(id);
        RESULT=leer;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEER",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
