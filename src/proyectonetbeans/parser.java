
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\005\000\002\002\004\000\002\003" +
    "\005\000\002\003\003\000\002\004\004\000\002\004\003" +
    "\000\002\010\004\000\002\011\004\000\002\011\003\000" +
    "\002\016\005\000\002\016\006\000\002\013\003\000\002" +
    "\013\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\017\003\000\002\017\003\000\002\020\013" +
    "\000\002\021\006\000\002\064\003\000\002\064\002\000" +
    "\002\063\004\000\002\063\004\000\002\062\005\000\002" +
    "\046\007\000\002\046\012\000\002\055\003\000\002\055" +
    "\003\000\002\054\003\000\002\006\003\000\002\061\005" +
    "\000\002\047\005\000\002\047\010\000\002\056\003\000" +
    "\002\007\003\000\002\005\003\000\002\022\006\000\002" +
    "\025\006\000\002\023\005\000\002\023\002\000\002\023" +
    "\004\000\002\023\005\000\002\023\003\000\002\023\005" +
    "\000\002\023\004\000\002\024\005\000\002\065\005\000" +
    "\002\065\003\000\002\050\005\000\002\050\003\000\002" +
    "\051\003\000\002\051\005\000\002\073\003\000\002\073" +
    "\003\000\002\073\003\000\002\074\003\000\002\074\003" +
    "\000\002\074\003\000\002\074\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\032" +
    "\006\000\002\071\005\000\002\071\003\000\002\033\006" +
    "\000\002\037\003\000\002\037\003\000\002\041\003\000" +
    "\002\035\007\000\002\036\004\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\042\006\000\002\043" +
    "\006\000\002\044\010\000\002\044\010\000\002\030\005" +
    "\000\002\030\003\000\002\052\003\000\002\067\003\000" +
    "\002\066\007\000\002\066\003\000\002\053\004\000\002" +
    "\053\002\000\002\060\006\000\002\075\003\000\002\075" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\006\003\004\031\007\001\002\000\006\003" +
    "\ufffe\036\ufffe\001\002\000\004\002\274\001\002\000\006" +
    "\003\014\036\012\001\002\000\004\047\010\001\002\000" +
    "\004\045\011\001\002\000\006\003\uffff\036\uffff\001\002" +
    "\000\004\047\033\001\002\000\004\032\101\001\002\000" +
    "\004\032\ufffc\001\002\000\010\032\uffec\034\020\035\024" +
    "\001\002\000\010\032\uffec\034\020\035\024\001\002\000" +
    "\004\032\uffed\001\002\000\004\047\261\001\002\000\004" +
    "\032\ufffd\001\002\000\006\003\014\036\012\001\002\000" +
    "\006\003\014\036\012\001\002\000\004\047\027\001\002" +
    "\000\010\032\uffec\034\020\035\024\001\002\000\004\032" +
    "\uffeb\001\002\000\006\005\030\010\031\001\002\000\012" +
    "\052\041\053\046\054\044\055\042\001\002\000\004\047" +
    "\033\001\002\000\006\011\uffe4\047\033\001\002\000\006" +
    "\005\054\012\053\001\002\000\014\011\ufff9\032\ufff9\034" +
    "\ufff9\035\ufff9\047\ufff9\001\002\000\004\011\036\001\002" +
    "\000\004\005\037\001\002\000\012\052\041\053\046\054" +
    "\044\055\042\001\002\000\004\045\052\001\002\000\004" +
    "\045\ufff4\001\002\000\004\006\047\001\002\000\004\045" +
    "\uffe6\001\002\000\004\045\ufff3\001\002\000\004\045\uffe5" +
    "\001\002\000\004\045\ufff2\001\002\000\004\064\050\001" +
    "\002\000\004\007\051\001\002\000\004\045\uffee\001\002" +
    "\000\006\003\uffe7\036\uffe7\001\002\000\004\047\033\001" +
    "\002\000\014\052\041\053\046\054\044\055\042\056\056" +
    "\001\002\000\004\045\ufff6\001\002\000\004\006\064\001" +
    "\002\000\004\045\ufff0\001\002\000\004\045\ufff5\001\002" +
    "\000\004\045\063\001\002\000\004\045\ufff1\001\002\000" +
    "\014\011\ufff7\032\ufff7\034\ufff7\035\ufff7\047\ufff7\001\002" +
    "\000\004\064\065\001\002\000\004\015\066\001\002\000" +
    "\004\015\067\001\002\000\004\064\070\001\002\000\004" +
    "\007\071\001\002\000\004\016\072\001\002\000\014\052" +
    "\041\053\046\054\044\055\042\056\056\001\002\000\004" +
    "\045\uffef\001\002\000\014\011\ufff8\032\ufff8\034\ufff8\035" +
    "\ufff8\047\ufff8\001\002\000\014\011\ufffa\032\ufffa\034\ufffa" +
    "\035\ufffa\047\ufffa\001\002\000\004\045\077\001\002\000" +
    "\006\003\uffe8\036\uffe8\001\002\000\004\032\101\001\002" +
    "\000\026\003\126\017\121\022\114\024\132\026\131\032" +
    "\125\033\uffd9\047\123\062\104\063\122\001\002\000\010" +
    "\032\uffe9\034\uffe9\035\uffe9\001\002\000\010\032\uffe3\034" +
    "\uffe3\035\uffe3\001\002\000\004\010\253\001\002\000\010" +
    "\020\uffb5\025\uffb5\033\uffb5\001\002\000\010\020\uffd6\025" +
    "\uffd6\033\uffd6\001\002\000\010\020\uffb8\025\uffb8\033\uffb8" +
    "\001\002\000\010\020\uffba\025\uffba\033\uffba\001\002\000" +
    "\004\045\251\001\002\000\010\020\uffb4\025\uffb4\033\uffb4" +
    "\001\002\000\032\003\126\017\121\020\uffd9\022\114\024" +
    "\132\025\uffd9\026\131\032\125\033\uffd9\047\123\062\104" +
    "\063\122\001\002\000\016\010\144\046\140\047\145\050" +
    "\142\051\151\064\135\001\002\000\004\033\243\001\002" +
    "\000\004\045\uffa9\001\002\000\004\045\uffab\001\002\000" +
    "\004\045\241\001\002\000\016\010\144\046\140\047\145" +
    "\050\142\051\151\064\135\001\002\000\004\010\225\001" +
    "\002\000\006\004\212\010\222\001\002\000\010\020\uffb3" +
    "\025\uffb3\033\uffb3\001\002\000\026\003\126\017\121\022" +
    "\114\024\132\026\131\032\125\033\uffd9\047\123\062\104" +
    "\063\122\001\002\000\032\003\126\017\121\020\uffd9\022" +
    "\114\024\132\025\uffd9\026\131\032\125\033\uffd9\047\123" +
    "\062\104\063\122\001\002\000\010\020\uffb9\025\uffb9\033" +
    "\uffb9\001\002\000\004\045\214\001\002\000\004\047\200" +
    "\001\002\000\026\003\126\017\121\022\114\024\132\025" +
    "\uffd9\026\131\032\125\047\123\062\104\063\122\001\002" +
    "\000\004\025\134\001\002\000\016\010\144\046\140\047" +
    "\145\050\142\051\151\064\135\001\002\000\044\011\uffc2" +
    "\020\uffc2\021\uffc2\023\uffc2\025\uffc2\027\uffc2\030\uffc2\033" +
    "\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2" +
    "\057\uffc2\060\uffc2\061\uffc2\001\002\000\044\011\uffd1\020" +
    "\uffd1\021\uffd1\023\uffd1\025\uffd1\027\uffd1\030\uffd1\033\uffd1" +
    "\040\157\041\156\042\uffd1\043\uffd1\044\uffd1\045\uffd1\057" +
    "\uffd1\060\160\061\uffd1\001\002\000\024\020\uffad\021\uffad" +
    "\023\uffad\025\uffad\033\uffad\042\176\043\172\044\173\061" +
    "\175\001\002\000\044\011\uffc0\020\uffc0\021\uffc0\023\uffc0" +
    "\025\uffc0\027\uffc0\030\uffc0\033\uffc0\040\uffc0\041\uffc0\042" +
    "\uffc0\043\uffc0\044\uffc0\045\uffc0\057\uffc0\060\uffc0\061\uffc0" +
    "\001\002\000\044\011\uffc5\020\uffc5\021\uffc5\023\uffc5\025" +
    "\uffc5\027\uffc5\030\uffc5\033\uffc5\040\uffc5\041\uffc5\042\uffc5" +
    "\043\uffc5\044\uffc5\045\uffc5\057\uffc5\060\uffc5\061\uffc5\001" +
    "\002\000\044\011\uffc1\020\uffc1\021\uffc1\023\uffc1\025\uffc1" +
    "\027\uffc1\030\uffc1\033\uffc1\040\uffc1\041\uffc1\042\uffc1\043" +
    "\uffc1\044\uffc1\045\uffc1\057\uffc1\060\uffc1\061\uffc1\001\002" +
    "\000\044\011\uffc3\020\uffc3\021\uffc3\023\uffc3\025\uffc3\027" +
    "\uffc3\030\uffc3\033\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3" +
    "\044\uffc3\045\uffc3\057\uffc3\060\uffc3\061\uffc3\001\002\000" +
    "\016\010\144\046\140\047\145\050\142\051\151\064\135" +
    "\001\002\000\046\010\162\011\uffc4\020\uffc4\021\uffc4\023" +
    "\uffc4\025\uffc4\027\uffc4\030\uffc4\033\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\044\uffc4\045\uffc4\057\uffc4\060\uffc4\061" +
    "\uffc4\001\002\000\026\020\uffac\021\uffac\023\uffac\025\uffac" +
    "\033\uffac\042\uffac\043\uffac\044\uffac\057\153\061\uffac\001" +
    "\002\000\044\011\uffce\020\uffce\021\uffce\023\uffce\025\uffce" +
    "\027\uffce\030\uffce\033\uffce\040\uffce\041\uffce\042\uffce\043" +
    "\uffce\044\uffce\045\uffce\057\uffce\060\uffce\061\uffce\001\002" +
    "\000\044\011\uffcf\020\uffcf\021\uffcf\023\uffcf\025\uffcf\027" +
    "\uffcf\030\uffcf\033\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf" +
    "\044\uffcf\045\uffcf\057\uffcf\060\uffcf\061\uffcf\001\002\000" +
    "\044\011\uffbf\020\uffbf\021\uffbf\023\uffbf\025\uffbf\027\uffbf" +
    "\030\uffbf\033\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044" +
    "\uffbf\045\uffbf\057\uffbf\060\uffbf\061\uffbf\001\002\000\010" +
    "\020\uffb1\025\uffb1\033\uffb1\001\002\000\016\010\144\046" +
    "\140\047\145\050\142\051\151\064\135\001\002\000\044" +
    "\011\uffd2\020\uffd2\021\uffd2\023\uffd2\025\uffd2\027\uffd2\030" +
    "\uffd2\033\uffd2\040\157\041\156\042\uffd2\043\uffd2\044\uffd2" +
    "\045\uffd2\057\uffd2\060\160\061\uffd2\001\002\000\016\010" +
    "\144\046\140\047\145\050\142\051\151\064\135\001\002" +
    "\000\016\010\uffca\046\uffca\047\uffca\050\uffca\051\uffca\064" +
    "\uffca\001\002\000\016\010\uffcb\046\uffcb\047\uffcb\050\uffcb" +
    "\051\uffcb\064\uffcb\001\002\000\016\010\uffcc\046\uffcc\047" +
    "\uffcc\050\uffcc\051\uffcc\064\uffcc\001\002\000\044\011\uffd0" +
    "\020\uffd0\021\uffd0\023\uffd0\025\uffd0\027\uffd0\030\uffd0\033" +
    "\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0" +
    "\057\uffd0\060\uffd0\061\uffd0\001\002\000\014\046\140\047" +
    "\145\050\142\051\151\064\135\001\002\000\006\011\165" +
    "\045\166\001\002\000\006\011\uffbc\045\uffbc\001\002\000" +
    "\044\011\uffbe\020\uffbe\021\uffbe\023\uffbe\025\uffbe\027\uffbe" +
    "\030\uffbe\033\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044" +
    "\uffbe\045\uffbe\057\uffbe\060\uffbe\061\uffbe\001\002\000\014" +
    "\046\140\047\145\050\142\051\151\064\135\001\002\000" +
    "\006\011\uffbd\045\uffbd\001\002\000\006\011\171\057\153" +
    "\001\002\000\044\011\uffcd\020\uffcd\021\uffcd\023\uffcd\025" +
    "\uffcd\027\uffcd\030\uffcd\033\uffcd\040\uffcd\041\uffcd\042\uffcd" +
    "\043\uffcd\044\uffcd\045\uffcd\057\uffcd\060\uffcd\061\uffcd\001" +
    "\002\000\016\010\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7" +
    "\064\uffc7\001\002\000\016\010\uffc6\046\uffc6\047\uffc6\050" +
    "\uffc6\051\uffc6\064\uffc6\001\002\000\016\010\144\046\140" +
    "\047\145\050\142\051\151\064\135\001\002\000\016\010" +
    "\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\064\uffc9\001\002" +
    "\000\016\010\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\064" +
    "\uffc8\001\002\000\014\020\uffae\021\uffae\023\uffae\025\uffae" +
    "\033\uffae\001\002\000\004\004\212\001\002\000\006\027" +
    "\202\030\203\001\002\000\014\046\140\047\145\050\142" +
    "\051\151\064\135\001\002\000\014\046\140\047\145\050" +
    "\142\051\151\064\135\001\002\000\004\023\205\001\002" +
    "\000\032\003\126\017\121\020\uffd9\022\114\024\132\025" +
    "\uffd9\026\131\032\125\033\uffd9\047\123\062\104\063\122" +
    "\001\002\000\010\020\uffaf\025\uffaf\033\uffaf\001\002\000" +
    "\004\023\210\001\002\000\032\003\126\017\121\020\uffd9" +
    "\022\114\024\132\025\uffd9\026\131\032\125\033\uffd9\047" +
    "\123\062\104\063\122\001\002\000\010\020\uffb0\025\uffb0" +
    "\033\uffb0\001\002\000\016\010\144\046\140\047\145\050" +
    "\142\051\151\064\135\001\002\000\012\027\uffd3\030\uffd3" +
    "\045\uffd3\057\153\001\002\000\032\003\126\017\121\020" +
    "\uffd9\022\114\024\132\025\uffd9\026\131\032\125\033\uffd9" +
    "\047\123\062\104\063\122\001\002\000\010\020\uffda\025" +
    "\uffda\033\uffda\001\002\000\010\020\uffd4\025\uffd4\033\uffd4" +
    "\001\002\000\004\033\220\001\002\000\004\045\221\001" +
    "\002\000\032\003\uffdb\017\uffdb\020\uffdb\022\uffdb\024\uffdb" +
    "\025\uffdb\026\uffdb\032\uffdb\033\uffdb\047\uffdb\062\uffdb\063" +
    "\uffdb\001\002\000\014\046\140\047\145\050\142\051\151" +
    "\064\135\001\002\000\006\011\224\045\166\001\002\000" +
    "\004\045\uffbb\001\002\000\004\051\226\001\002\000\006" +
    "\011\uffa7\012\227\001\002\000\004\047\232\001\002\000" +
    "\004\011\231\001\002\000\004\045\uffaa\001\002\000\004" +
    "\011\uffa8\001\002\000\004\021\234\001\002\000\026\003" +
    "\126\017\121\020\uffd9\022\114\024\132\026\131\032\125" +
    "\047\123\062\104\063\122\001\002\000\004\020\236\001" +
    "\002\000\032\003\126\017\121\020\uffd9\022\114\024\132" +
    "\025\uffd9\026\131\032\125\033\uffd9\047\123\062\104\063" +
    "\122\001\002\000\010\020\uffb7\025\uffb7\033\uffb7\001\002" +
    "\000\010\020\uffb6\025\uffb6\033\uffb6\001\002\000\032\003" +
    "\126\017\121\020\uffd9\022\114\024\132\025\uffd9\026\131" +
    "\032\125\033\uffd9\047\123\062\104\063\122\001\002\000" +
    "\010\020\uffd5\025\uffd5\033\uffd5\001\002\000\004\015\244" +
    "\001\002\000\012\002\uffdc\032\uffdc\034\uffdc\035\uffdc\001" +
    "\002\000\004\023\246\001\002\000\032\003\126\017\121" +
    "\020\uffd9\022\114\024\132\025\uffd9\026\131\032\125\033" +
    "\uffd9\047\123\062\104\063\122\001\002\000\010\020\uffb2" +
    "\025\uffb2\033\uffb2\001\002\000\010\020\uffd8\025\uffd8\033" +
    "\uffd8\001\002\000\032\003\126\017\121\020\uffd9\022\114" +
    "\024\132\025\uffd9\026\131\032\125\033\uffd9\047\123\062" +
    "\104\063\122\001\002\000\010\020\uffd7\025\uffd7\033\uffd7" +
    "\001\002\000\004\047\254\001\002\000\004\011\255\001" +
    "\002\000\004\045\uffa6\001\002\000\004\032\101\001\002" +
    "\000\010\032\uffe2\034\uffe2\035\uffe2\001\002\000\010\032" +
    "\uffde\034\uffde\035\uffde\001\002\000\006\010\262\045\263" +
    "\001\002\000\004\047\033\001\002\000\006\003\uffe1\036" +
    "\uffe1\001\002\000\004\011\266\001\002\000\004\011\uffdf" +
    "\001\002\000\004\045\267\001\002\000\006\003\uffe0\036" +
    "\uffe0\001\002\000\004\032\uffea\001\002\000\004\002\001" +
    "\001\002\000\004\002\uffdd\001\002\000\012\032\ufffb\034" +
    "\ufffb\035\ufffb\047\033\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\012\010\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\272\016\033\001\001\000\006\005\270\022\271" +
    "\001\001\000\002\001\001\000\016\046\022\047\021\061" +
    "\015\062\024\063\016\064\020\001\001\000\016\046\022" +
    "\047\021\061\015\062\024\063\016\064\267\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\255\010\014\001\001\000\006\004\077\010\014\001" +
    "\001\000\002\001\001\000\016\046\022\047\021\061\015" +
    "\062\024\063\016\064\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\042\021\044\055\075\001\001" +
    "\000\010\011\031\016\033\054\034\001\001\000\004\016" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\042\021\044\055" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\073\001" +
    "\001\000\014\013\060\014\054\017\057\020\061\021\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\013\072\014\054\017\057\020\061\021" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\101\022\102\001\001\000\036\023\114\024\127\025\112" +
    "\033\110\035\106\037\105\040\126\041\107\042\104\043" +
    "\111\044\123\060\115\066\116\067\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\023\247\024" +
    "\127\025\112\033\110\035\106\037\105\040\126\041\107" +
    "\042\104\043\111\044\123\060\115\066\116\067\117\001" +
    "\001\000\022\026\140\027\146\030\244\032\142\050\135" +
    "\051\147\052\136\065\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\026\140\027\146\030\232\032\142\050\135\051\147\052" +
    "\136\065\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\023\216\024\127\025\112\033" +
    "\110\035\106\037\105\040\126\041\107\042\104\043\111" +
    "\044\123\060\115\066\116\067\117\001\001\000\036\023" +
    "\215\024\127\025\112\033\110\035\106\037\105\040\126" +
    "\041\107\042\104\043\111\044\123\060\115\066\116\067" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\200\001\001\000\036\023\132\024\127\025\112\033" +
    "\110\035\106\037\105\040\126\041\107\042\104\043\111" +
    "\044\123\060\115\066\116\067\117\001\001\000\002\001" +
    "\001\000\022\026\140\027\146\030\151\032\142\050\135" +
    "\051\147\052\136\065\145\001\001\000\002\001\001\000" +
    "\004\073\154\001\001\000\004\074\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\026\140\027\146\032\142\050\135\051\147" +
    "\065\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\026\140\027\146\032\142\050\153\051" +
    "\147\001\001\000\004\073\154\001\001\000\012\026\140" +
    "\027\146\032\142\051\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\026\140\027\163\032\142\071\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\026\140" +
    "\027\166\032\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\026\140\027\146\030\176\032\142\050\135\051" +
    "\147\052\136\065\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\026\140\027\206\032\142\001\001\000\010" +
    "\026\140\027\203\032\142\001\001\000\002\001\001\000" +
    "\036\023\205\024\127\025\112\033\110\035\106\037\105" +
    "\040\126\041\107\042\104\043\111\044\123\060\115\066" +
    "\116\067\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\023\210\024\127\025\112\033\110\035\106\037" +
    "\105\040\126\041\107\042\104\043\111\044\123\060\115" +
    "\066\116\067\117\001\001\000\002\001\001\000\016\026" +
    "\140\027\146\032\142\050\135\051\147\065\212\001\001" +
    "\000\002\001\001\000\036\023\214\024\127\025\112\033" +
    "\110\035\106\037\105\040\126\041\107\042\104\043\111" +
    "\044\123\060\115\066\116\067\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\026\140\027\163\032\142\071" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\023\234\024\127\025\112\033\110\035" +
    "\106\037\105\040\126\041\107\042\104\043\111\044\123" +
    "\060\115\066\116\067\117\001\001\000\004\036\236\001" +
    "\001\000\036\023\237\024\127\025\112\033\110\035\106" +
    "\037\105\040\126\041\107\042\104\043\111\044\123\060" +
    "\115\066\116\067\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\023\241\024\127\025\112\033\110\035" +
    "\106\037\105\040\126\041\107\042\104\043\111\044\123" +
    "\060\115\066\116\067\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\023\246\024\127\025\112\033\110\035\106\037\105\040" +
    "\126\041\107\042\104\043\111\044\123\060\115\066\116" +
    "\067\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\023\251\024\127\025\112\033\110\035\106\037\105" +
    "\040\126\041\107\042\104\043\111\044\123\060\115\066" +
    "\116\067\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\256\022" +
    "\257\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\011\031\016\033\054\264\056\263\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\074\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    @Override
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" en la linea "+(s.left + 1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }
        System.err.println(m);
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error(message, info);
        System.exit(1); //To change body of generated methods, choose Tools | Templates.
    }
    
    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            parser p = new parser(
                    new Proyecto( new FileReader(args[0])));
            Object result = p.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    TablaSimbolos simbolo = new TablaSimbolos();
    TablaSimbolosFunciones tfuncion = new TablaSimbolosFunciones();
    boolean Declaracion = true;
    boolean Funcion = false;
    String ambito = "main";
    String idMetodo = "";
    String ambitoF = ambito;
    TablaIntermedio cuadruTable = new TablaIntermedio();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



    public TablaIntermedio inta(GenericTree arbol){
      List<GenericTreeNode> nodos = arbol.buscar("SA");
      TablaIntermedio Table = new TablaIntermedio();
        System.out.println(nodos.size());
      for( int i = 0 ; i < nodos.size() ; i++ ){
        GenericTreeNode nodo = nodos.get(i);
        int a = nodos.get(i).getNumberOfChildren();
        switch (a){
          case 2:

            Table.Ingresar(":=", nodos.get(1).getData().getNombre(), nodos.get(0).getData().getNombre());
            break;
        }

      }
        return Table;
      //cuadruTable.PrintTabla();
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= CP ZD CUP 
            {
              GenericTree RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode cp = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int zdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int zdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode zd = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cupleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cupright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode cup = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTree tree= new GenericTree();
        GenericTreeNode pro= new GenericTreeNode(new Tipo("Programa","Programa"));
        pro.addChild(cp);
        pro.addChild(zd);
        pro.addChild(cup);
        tree.setRoot(pro);

        System.out.println("Raiz:" +tree.getRoot().getData().getNombre());
        System.out.println("--------------------------");
        for (int i = 0; i < tree.list().size(); i++) {
            System.out.println("Padre:"+tree.list().get(i).getData().getNombre());
            System.out.println();
            try{
                System.out.println("Hijos:" + tree.Imprimir(i));
            }
            catch(IndexOutOfBoundsException e){
                System.out.println("Hijos: ");
            }
            System.out.println("-------------------------------");
        }

        cuadruTable = inta(tree);
        cuadruTable.PrintTabla();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTree start_val = (GenericTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CP ::= PROGRAM ID CIERRE 
            {
              GenericTreeNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                GenericTreeNode cp= new GenericTreeNode(new Tipo("CP", "CP"));
                GenericTreeNode pr= new GenericTreeNode(new Tipo(p, p));
                GenericTreeNode id= new GenericTreeNode(new Tipo(i, i));
                cp.addChild(pr);
                cp.addChild(id);
                RESULT=cp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CP ::= error 
            {
              GenericTreeNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ZD ::= ZDV ZDSP 
            {
              GenericTreeNode RESULT =null;
		int zdvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int zdvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode zdv = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int zdspleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int zdspright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode zdsp = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode zd = new GenericTreeNode(new Tipo("ZD", "ZD"));
        zd.addChild(zdv);
        zd.addChild(zdsp);
        RESULT=zd;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ZD",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ZD ::= error 
            {
              GenericTreeNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ZD",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ZDV ::= VAR DE 
            {
              GenericTreeNode RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int deleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode de = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode zdv= new GenericTreeNode(new Tipo("ZDV", "ZDV"));
        GenericTreeNode v= new GenericTreeNode(new Tipo(var, var));
        zdv.addChild(v);
        zdv.addChild(de);
        RESULT=zdv;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ZDV",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DE ::= DE DEI 
            {
              GenericTreeNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode d = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int deileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode dei = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode de= new GenericTreeNode(new Tipo("DE", "DE"));
        de.addChild(d);de.addChild(dei);
        RESULT=de;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DE ::= DEI 
            {
              GenericTreeNode RESULT =null;
		int deileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode dei = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode de= new GenericTreeNode(new Tipo("DE", "DE"));
        de.addChild(dei);
        RESULT=de;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DEI ::= ID COMA DEI 
            {
              GenericTreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int deleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode de = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode dei= new GenericTreeNode(new Tipo("DEI", "DEI"));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        dei.addChild(i);dei.addChild(de);
        /*if(Declaracion == true){
                    simbolo.crear(id, simbolo.getTipo(),ambito);
                    simbolo.creartipo(simbolo.getTipo());
                }else if(Funcion== true){
                    tfuncion.crear(id, tfuncion.getTipo(), ambito);
                    tfuncion.creartipo(tfuncion.getTipo());
                }*/
        RESULT=dei;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEI",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEI ::= ID DECLARACION TD CIERRE 
            {
              GenericTreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode td = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        GenericTreeNode dei= new GenericTreeNode(new Tipo("DEI", "DEI"));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        dei.addChild(i);
        dei.addChild(td);

        /*if(Declaracion == true){

              if(td.toString().equals("Array")){


                  String tipo = simbolo.getTipo();

                  simbolo.crear(id, tipo,ambito);
                  simbolo.creartipo(tipo);
              }else if(td.toString().equals("string")){
                  String tipo = simbolo.getTipo();
                  System.out.println(tipo);
                  simbolo.crear(id, tipo,ambito);
                  simbolo.creartipo(tipo);
              }else{
              simbolo.crear(id, td.toString(),ambito);
              simbolo.creartipo(td.toString());
              }
          }
          if(Funcion == true){
              if(td.toString().equals("Array")){
                  String tipof = tfuncion.getTipo();
                  tfuncion.crear(id, tipof,ambito);
                  tfuncion.creartipo(tipof);
              }else if(td.toString().equals("string")){
                  String tipof = tfuncion.getTipo();
                  System.out.println(tipof);
                  tfuncion.crear(id, tipof,ambito);
                  tfuncion.creartipo(tipof);
              }else{
                  tfuncion.crear(id, td.toString(),ambito);
                  tfuncion.creartipo(td.toString());
              }
          }*/
        RESULT=dei;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEI",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TD ::= TS 
            {
              GenericTreeNode RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ss = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode td = new GenericTreeNode(new Tipo("TS", ss.getData().getTipo()));
        td.addChild(ss);
        RESULT=td;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TD",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TD ::= TE 
            {
              GenericTreeNode RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode te = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode td = new GenericTreeNode(new Tipo("TE", te.getData().getTipo()));
        td.addChild(te);
        RESULT=td;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TD",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TS ::= INTEGER 
            {
              GenericTreeNode RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode ts= new GenericTreeNode(new Tipo(in, in));
        RESULT= ts;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TS ::= CHAR 
            {
              GenericTreeNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode ts= new GenericTreeNode(new Tipo(c, c));
        RESULT= ts;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TS ::= BOOLEAN 
            {
              GenericTreeNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    GenericTreeNode ts= new GenericTreeNode(new Tipo(b, b));
    RESULT= ts;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TE ::= TA 
            {
              GenericTreeNode RESULT =null;
		int taleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int taright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ta = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode te = new GenericTreeNode(new Tipo("TA", ta.getData().getTipo()));
        te.addChild(ta);
        RESULT=te;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TE ::= TST 
            {
              GenericTreeNode RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode tst = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode te = new GenericTreeNode(new Tipo("TST", tst.getData().getTipo()));
        te.addChild(tst);
        RESULT=te;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TA ::= ARRAY LLAVEIZQ NUM PUNTO PUNTO NUM LLAVEDER OF TD 
            {
              GenericTreeNode RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String ar = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String li = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ld = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode td = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode ta = new GenericTreeNode(new Tipo(ar, ar));
        GenericTreeNode s = new GenericTreeNode(new Tipo(ar, ar));
        GenericTreeNode f = new GenericTreeNode(new Tipo(o, o));
        GenericTreeNode num = new GenericTreeNode(new Tipo("NUM", "NUM"));
        GenericTreeNode num2 = new GenericTreeNode(new Tipo("NUM2","NUM2"));
        ta.addChild(s);
        ta.addChild(num);
        ta.addChild(num2);
        ta.addChild(f);

        /*if(Declaracion == true){
            simbolo.creartipo(ar+"("+n+".."+n1+","+td.toString()+")");
        }

        if(Funcion == true){
            tfuncion.creartipo(ar+"("+n+".."+n1+","+td.toString()+")");
        }*/

        RESULT=ta;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TST ::= STRING LLAVEIZQ NUM LLAVEDER 
            {
              GenericTreeNode RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String li = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ld = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode tst = new GenericTreeNode(new Tipo(st, st));
        GenericTreeNode s = new GenericTreeNode(new Tipo(st, st));
        GenericTreeNode num = new GenericTreeNode(new Tipo("NUM", "NUM"));
        tst.addChild(s);
        tst.addChild(num);

        RESULT=tst;

        /*if(Declaracion == true){
            simbolo.creartipo("Array"+"("+1+".."+n+","+"String"+")");
        }

        if(Funcion == true){
            tfuncion.creartipo("Array"+"("+1+".."+n+","+"String"+")");
        }*/

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TST",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ZDSP ::= DSP 
            {
              GenericTreeNode RESULT =null;
		int dspleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dspright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode dsp = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode zdsp = new GenericTreeNode(new Tipo("ZDSP", "ZDSP"));
        zdsp.addChild(dsp);
        RESULT=zdsp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ZDSP",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ZDSP ::= 
            {
              GenericTreeNode RESULT =null;
		
        GenericTreeNode vacio = new GenericTreeNode(new Tipo("", ""));
        RESULT=vacio;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ZDSP",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DSP ::= DF ZDSP 
            {
              GenericTreeNode RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode df = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int zdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int zdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode zd = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode dsp = new GenericTreeNode(new Tipo("DSP", "DSP"));
        dsp.addChild(df);
        dsp.addChild(zd);
        RESULT=dsp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DSP",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DSP ::= DP ZDSP 
            {
              GenericTreeNode RESULT =null;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode dp = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int zdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int zdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode zd = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode dsp = new GenericTreeNode(new Tipo("DSP", "DSP"));
        dsp.addChild(dp);
        dsp.addChild(zd);
        RESULT=dsp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DSP",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DF ::= CF ZD CUF 
            {
              GenericTreeNode RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode fc = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int zdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int zdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode zd = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode sc = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode df = new GenericTreeNode(new Tipo("DF", "DF")); 
        df.addChild(fc); 
        df.addChild(zd); 
        df.addChild(sc);
        RESULT=df;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DF",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CF ::= FUNCTION ID DECLARACION TEL CIERRE 
            {
              GenericTreeNode RESULT =null;
		int ftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ft = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int telleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int telright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode tel = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        GenericTreeNode proce= new GenericTreeNode(new Tipo("FUNCION", "FUNCION"));
        GenericTreeNode fc= new GenericTreeNode(new Tipo(ft, ft)); 
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        proce.addChild(fc);
        proce.addChild(i);
        proce.addChild(tel);
              
       /* Declaracion = false;
        Funcion = true;
        idMetodo = id;
        tfuncion.crearid(id);
        simbolo.crear(id, "void->"+tel.toString(), ambito);
        ambitoF = ambitoF+"."+idMetodo;
        ambito = ambitoF;*/
        
    RESULT=proce;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CF",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CF ::= FUNCTION ID PARIZQ PFV PARDER DECLARACION TEL CIERRE 
            {
              GenericTreeNode RESULT =null;
		int ftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String ft = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pfvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pfvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		GenericTreeNode pfv = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int telleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int telright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode tel = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        GenericTreeNode proce= new GenericTreeNode(new Tipo("FUNCION", "FUNCION"));
        GenericTreeNode fc= new GenericTreeNode(new Tipo(ft, ft)); 
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id)); 
        proce.addChild(fc);
        proce.addChild(i);
        proce.addChild(pfv); 
        proce.addChild(tel); 
        RESULT=proce;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CF",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TEL ::= TS 
            {
              GenericTreeNode RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ts = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode tel = new GenericTreeNode(new Tipo("TS", ts.getData().getTipo()));
        tel.addChild(ts); 
        RESULT= tel;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEL",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TEL ::= TST 
            {
              GenericTreeNode RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode tst = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode tel = new GenericTreeNode(new Tipo("TST", tst.getData().getTipo()));
        tel.addChild(tst); 
        RESULT= tst;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEL",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PFV ::= DE 
            {
              GenericTreeNode RESULT =null;
		int deileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode dei = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode pfv= new GenericTreeNode(new Tipo("PFV", "PFV"));
        pfv.addChild(dei); 
        RESULT=pfv;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PFV",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CUF ::= SC 
            {
              GenericTreeNode RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode sc = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode cup = new GenericTreeNode(new Tipo("CUF", "CUF")); 
        cup.addChild(sc);
        //ambito=tfuncion.quitarAmbito(ambito,tfuncion.getId());
        RESULT=cup;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUF",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DP ::= CPR ZD CUPR 
            {
              GenericTreeNode RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode pc = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int zdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int zdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode zd = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode sc = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode dp = new GenericTreeNode(new Tipo("DP", "DP")); 
        dp.addChild(pc); 
        dp.addChild(zd); 
        dp.addChild(sc); 
        RESULT=dp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DP",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CPR ::= PROCEDURE ID CIERRE 
            {
              GenericTreeNode RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
        GenericTreeNode proce= new GenericTreeNode(new Tipo("PROCEDURE", "PROCEDURE"));
        GenericTreeNode p= new GenericTreeNode(new Tipo(pc, pc)); 
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id)); 
        proce.addChild(p);
        proce.addChild(i);
        /*Declaracion = false;
        Funcion = true;
        idMetodo = id;
        tfuncion.crearid(id);
        simbolo.crear(id, "void->void", ambito);
        ambito = ambito+"."+idMetodo;*/

        RESULT=proce;
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPR",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CPR ::= PROCEDURE ID PARIZQ PF PARDER CIERRE 
            {
              GenericTreeNode RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode pf = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        GenericTreeNode proce= new GenericTreeNode(new Tipo("PROCEDURE", "PROCEDURE"));
        GenericTreeNode p= new GenericTreeNode(new Tipo(pc, pc)); 
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id)); 
        GenericTreeNode pa= new GenericTreeNode(new Tipo("PF", pf.getData().getTipo()));
        proce.addChild(p);
        proce.addChild(i);
        proce.addChild(pa); 
        RESULT=proce;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPR",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PF ::= PFV 
            {
              GenericTreeNode RESULT =null;
		int pfvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pfvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode pfv = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        GenericTreeNode pf = new GenericTreeNode(new Tipo("PF", "PF")); 
        pf.addChild(pfv); 
        RESULT= pf;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PF",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CUPR ::= SC 
            {
              GenericTreeNode RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode sc = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode cup = new GenericTreeNode(new Tipo("CUPR", "CUPR")); 
        cup.addChild(sc);
        //ambito=tfuncion.quitarAmbito(ambito,tfuncion.getId());
        RESULT=cup;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUPR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CUP ::= SC 
            {
              GenericTreeNode RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode sc = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode cup = new GenericTreeNode(new Tipo("CUP", "CUP")); 
        cup.addChild(sc); 
        RESULT=cup;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SC ::= BEGIN S END PUNTO 
            {
              GenericTreeNode RESULT =null;
		int bnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String bn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode s = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int edleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int edright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ed = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        GenericTreeNode sc = new GenericTreeNode(new Tipo("SC", "SC"));
        GenericTreeNode bg = new GenericTreeNode(new Tipo(bn, bn));
        GenericTreeNode e = new GenericTreeNode(new Tipo(ed, ed)); 
        sc.addChild(bg); 
        sc.addChild(s); 
        sc.addChild(e); 
        RESULT=sc;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SC",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SCI ::= BEGIN S END CIERRE 
            {
              GenericTreeNode RESULT =null;
		int bnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String bn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode s = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int edleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int edright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ed = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        GenericTreeNode sc = new GenericTreeNode(new Tipo("SC", "SC"));
        GenericTreeNode bg = new GenericTreeNode(new Tipo(bn, bn));
        GenericTreeNode e = new GenericTreeNode(new Tipo(ed, ed)); 
        sc.addChild(bg); 
        sc.addChild(s); 
        sc.addChild(e); 
        RESULT=sc;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCI",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // S ::= SA CIERRE S 
            {
              GenericTreeNode RESULT =null;
		int saleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int saright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode sa = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode s1 = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        GenericTreeNode s = new GenericTreeNode(new Tipo("S", "S")); 
        s.addChild(sa); 
        s.addChild(s1); 
        RESULT=s;
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // S ::= 
            {
              GenericTreeNode RESULT =null;
		
        GenericTreeNode vacio= new GenericTreeNode(new Tipo("", ""));
        RESULT=vacio;
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // S ::= SCI S 
            {
              GenericTreeNode RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode sc = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode s1 = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode s = new GenericTreeNode(new Tipo("S", "S")); 
        s.addChild(sc); 
        s.addChild(s1); 
        RESULT=s;
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // S ::= LP CIERRE S 
            {
              GenericTreeNode RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode lp = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode s1 = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode s = new GenericTreeNode(new Tipo("S", "S")); 
        s.addChild(lp); 
        s.addChild(s1); 
        RESULT=s;
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // S ::= EC 
            {
              GenericTreeNode RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ec = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode s = new GenericTreeNode(new Tipo("S", "S")); 
        s.addChild(ec); 
        RESULT=s; 
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // S ::= MET CIERRE S 
            {
              GenericTreeNode RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode met = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode s1 = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        GenericTreeNode s = new GenericTreeNode(new Tipo("S", "S")); 
        s.addChild(met);
        s.addChild(s1); 
        RESULT=s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // S ::= error S 
            {
              GenericTreeNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SA ::= ID ASSIG AR 
            {
              GenericTreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ar = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        GenericTreeNode sa = new GenericTreeNode(new Tipo("SA", "SA"));
        GenericTreeNode i = new GenericTreeNode(new Tipo(id, id)); 
        sa.addChild(i); 
        sa.addChild(ar);
        
        /*if(simbolo.buscarTipo(id).equals(simbolo.getTipo()))
            System.out.println("correcto");
        else
            System.err.println("Esta asignando un tipo distinto a la variable: "+id+","+ " tipo correcto: "+simbolo.buscarTipo(id));*/

        RESULT=sa; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // AR ::= AR OPSUMA AM 
            {
              GenericTreeNode RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode ar = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int amright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode am = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

        GenericTreeNode a= new GenericTreeNode(new Tipo("AR","AR"));
        a.addChild(ar);
        a.addChild(am); 
        RESULT=a;

        /*String tipov = "";
        String tipov2 = "";

        if(simbolo.isinteger(am.toString())){
           tipov="Integer";
        }else{
            //System.out.println(simbolo.buscarTipo(am.toString()));
            tipov=simbolo.buscarTipo(am.toString());
        }
        if(simbolo.isinteger(ar.toString())){
           tipov2="Integer";
        }else{
            //System.out.println(simbolo.buscarTipo(am.toString()));
            tipov2=simbolo.buscarTipo(ar.toString());
        }
        //System.out.println(tipov);
        if(tipov.equals(tipov2) && tipov.equals("Integer")){
            simbolo.creartipo(tipov);
        }else{
            System.err.println("Solo se pueden sumar o restar Enteros");
        }*/
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AR",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // AR ::= AM 
            {
              GenericTreeNode RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int amright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode am = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode a= new GenericTreeNode(new Tipo("AM", am.getData().getTipo()));
        a.addChild(am); 
        RESULT=a;

        /*String tipov="";
        if(am.toString()=="VCHAR"){
                tipov = "char";
                simbolo.creartipo(tipov);
        }else if(simbolo.isinteger(am.toString())==true){
                tipov = "Integer";
                simbolo.creartipo(tipov);
        }else{
            tipov=simbolo.buscarTipo(am.toString());
            simbolo.creartipo(tipov);
        }*/

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AR",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // AM ::= AM OP F 
            {
              GenericTreeNode RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode am = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode val = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode a= new GenericTreeNode(new Tipo("AM", am.getData().getTipo()));
        a.addChild(am);
        a.addChild(val); 
        RESULT=a;

        /*String tipov = "";
        String tipov2 = "";
    
        if(simbolo.isinteger(am.toString())==true){
           tipov="Integer";
        }else{
            //System.out.println(simbolo.buscarTipo(am.toString()));
            tipov=simbolo.buscarTipo(am.toString());
        }
        if(simbolo.isinteger(val.toString())==true){
           tipov2="Integer";
        }else{
            //System.out.println(simbolo.buscarTipo(am.toString()));
            tipov2=simbolo.buscarTipo(val.toString());
        }
        //System.out.println(tipov);
        if(tipov.equals(tipov2) && tipov.equals("Integer")){
            simbolo.creartipo(tipov);
        }else{
            System.err.println("Solo se pueden multiplicar o dividir Enteros");
        }*/


              CUP$parser$result = parser.getSymbolFactory().newSymbol("AM",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // AM ::= F 
            {
              GenericTreeNode RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode val = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode a= new GenericTreeNode(new Tipo("VAL", val.getData().getNombre()));
        a.addChild(val); 
        RESULT=a;

        /*String tipov="";
        if(val.toString()=="VCHAR"){
                tipov = "char";
                simbolo.creartipo(tipov);
        }else if(simbolo.isinteger(val.toString())==true){
                tipov = "Integer";
                simbolo.creartipo(tipov);
        }else{
            tipov=simbolo.buscarTipo(val.toString());
            simbolo.creartipo(tipov);
        }*/

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AM",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // F ::= EXPRESION 
            {
              GenericTreeNode RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ex = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode f= new GenericTreeNode(new Tipo("EX", ex.getData().getNombre()));
        f.addChild(ex); 
        RESULT=f;

        /*String tipov = "";
        if(ex.toString()=="VCHAR"){
                tipov = "char";
                simbolo.creartipo(tipov);
        }else if(simbolo.isinteger(ex.toString())==true){
                tipov = "Integer";
                simbolo.creartipo(tipov);
        }else{
            tipov=simbolo.buscarTipo(ex.toString());
            simbolo.creartipo(tipov);
        }*/


              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // F ::= PARIZQ AR PARDER 
            {
              GenericTreeNode RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode ar = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        GenericTreeNode f= new GenericTreeNode(new Tipo("F", "F")); 
        f.addChild(ar); 
        RESULT=f;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OP ::= OPMULT 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=op;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OP ::= DIV 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=op;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OP ::= MOD 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=op;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OL ::= OPLOG 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=op;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("OL",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OL ::= OR 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=op;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("OL",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OL ::= NOT 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=op;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("OL",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OL ::= AND 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=op;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OL",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= LITERAL 
            {
              GenericTreeNode RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode lt = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode ex = new GenericTreeNode(new Tipo("LT", lt.getData().getTipo()));
        ex.addChild(lt);
        RESULT=ex;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= ID 
            {
              GenericTreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode ex = new GenericTreeNode(new Tipo(id, id));
        GenericTreeNode i = new GenericTreeNode(new Tipo(id, id));
        ex.addChild(i);
        RESULT=ex;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= LF 
            {
              GenericTreeNode RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode lf = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode ex = new GenericTreeNode(new Tipo("FUNCION","FUNCION") );
        ex.addChild(lf);
        RESULT=ex;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LITERAL ::= NUM 
            {
              GenericTreeNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String num = String.valueOf(n);
        GenericTreeNode lt = new GenericTreeNode(new Tipo(num, num));
        RESULT=lt;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITERAL",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LITERAL ::= VCHAR 
            {
              GenericTreeNode RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode lt = new GenericTreeNode(new Tipo("VCHAR", "VCHAR"));
        RESULT=lt;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITERAL",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LITERAL ::= BOOL 
            {
              GenericTreeNode RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String bl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode lt = new GenericTreeNode(new Tipo(bl, bl));
        RESULT=lt;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITERAL",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LITERAL ::= VSTRING 
            {
              GenericTreeNode RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode lt = new GenericTreeNode(new Tipo("VSTRING", "VSTRING"));
        RESULT=lt;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITERAL",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LF ::= ID PARIZQ PAV PARDER 
            {
              GenericTreeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pfvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pfvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode pfv = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        GenericTreeNode lf= new GenericTreeNode(new Tipo("LF", "LF"));
        GenericTreeNode id= new GenericTreeNode(new Tipo(i, i));
        lf.addChild(id);
        lf.addChild(pfv);
        RESULT=lf;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LF",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PAV ::= PAV CIERRE EXPRESION 
            {
              GenericTreeNode RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode pa = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ex = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode pav= new GenericTreeNode(new Tipo("PAV", "PAV"));
        pav.addChild(pa);
        pav.addChild(ex);
        RESULT=pav;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAV",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PAV ::= EXPRESION 
            {
              GenericTreeNode RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ex = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode pav= new GenericTreeNode(new Tipo("PAV", "PAV"));
        pav.addChild(ex);
        RESULT=pav;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAV",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LP ::= ID PARIZQ PAV PARDER 
            {
              GenericTreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode pa = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        GenericTreeNode lp = new GenericTreeNode(new Tipo("LP", "LP"));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        lp.addChild(i);
        lp.addChild(pa);
        RESULT=lp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LP",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EC ::= EA 
            {
              GenericTreeNode RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode is = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode ec = new GenericTreeNode(new Tipo("EC", "EC"));
        ec.addChild(is);
        RESULT=ec;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("EC",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EC ::= ER 
            {
              GenericTreeNode RESULT =null;
		int erleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode er = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode ec = new GenericTreeNode(new Tipo("EC", "EC"));
        ec.addChild(er);
        RESULT=ec;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EC",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EA ::= IS 
            {
              GenericTreeNode RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode is = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode ec = new GenericTreeNode(new Tipo("EA", "EA"));
        ec.addChild(is);
        RESULT=ec;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EA",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IS ::= IF CONDICION THEN S IDO 
            {
              GenericTreeNode RESULT =null;
		int ifcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ifcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ifc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		GenericTreeNode cd = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode s = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ido = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode is = new GenericTreeNode(new Tipo("IS", "IS"));
        GenericTreeNode fi = new GenericTreeNode(new Tipo(ifc, ifc));
        GenericTreeNode ten = new GenericTreeNode(new Tipo(tn, tn));
        is.addChild(fi);
        is.addChild(cd);
        is.addChild(ten);
        is.addChild(s);
        is.addChild(s);
        RESULT=is;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IDO ::= ELSE S 
            {
              GenericTreeNode RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode s1 = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode ido = new GenericTreeNode(new Tipo("IDO", "IDO"));
        GenericTreeNode els = new GenericTreeNode(new Tipo("el", "el"));
        ido.addChild(els);
        ido.addChild(s1);
        RESULT=ido;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDO",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ER ::= RW 
            {
              GenericTreeNode RESULT =null;
		int rwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode rw = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode er = new GenericTreeNode(new Tipo("ER", "ER"));
        er.addChild(rw);
        RESULT=er;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("ER",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ER ::= RR 
            {
              GenericTreeNode RESULT =null;
		int rrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode rr = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode er = new GenericTreeNode(new Tipo("ER", "ER"));
        er.addChild(rr);
        RESULT=er;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("ER",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ER ::= RF 
            {
              GenericTreeNode RESULT =null;
		int rfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode rf = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode er = new GenericTreeNode(new Tipo("ER", "ER"));
        er.addChild(rf);
        RESULT=er;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ER",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // RW ::= WHILE CONDICION DO S 
            {
              GenericTreeNode RESULT =null;
		int wlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String wl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode cd = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode s = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode rw = new GenericTreeNode(new Tipo("RW", "RW"));
        GenericTreeNode f = new GenericTreeNode(new Tipo(wl, wl));
        GenericTreeNode tt = new GenericTreeNode(new Tipo(d, d));
        rw.addChild(f);
        rw.addChild(cd);
        rw.addChild(tt);
        rw.addChild(s);
        RESULT= rw;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RW",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // RR ::= REPEAT S UNTIL CONDICION 
            {
              GenericTreeNode RESULT =null;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String rp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode s = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ulleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ulright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ul = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode cd = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode rr = new GenericTreeNode(new Tipo("RR", "RR"));
        GenericTreeNode f = new GenericTreeNode(new Tipo(rp, rp));
        GenericTreeNode tt = new GenericTreeNode(new Tipo(ul, ul));
        rr.addChild(f);
        rr.addChild(s);
        rr.addChild(tt);
        rr.addChild(cd);
        RESULT= rr;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // RF ::= FOR SA TO EXPRESION DO S 
            {
              GenericTreeNode RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String fr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int saleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int saright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		GenericTreeNode sa = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode ex = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode s = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode rf = new GenericTreeNode(new Tipo("RF", "RF"));
        GenericTreeNode f = new GenericTreeNode(new Tipo(fr, fr));
        GenericTreeNode tt = new GenericTreeNode(new Tipo(t, t));
        GenericTreeNode dd = new GenericTreeNode(new Tipo(d, d));
        rf.addChild(f);
        rf.addChild(sa);
        rf.addChild(tt);
        rf.addChild(ex);
        rf.addChild(dd);
        rf.addChild(s);
        RESULT= rf;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("RF",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // RF ::= FOR SA DOWNTO EXPRESION DO S 
            {
              GenericTreeNode RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String fr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int saleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int saright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		GenericTreeNode sa = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode ex = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode s = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode rf = new GenericTreeNode(new Tipo("RF", "RF"));
        GenericTreeNode f = new GenericTreeNode(new Tipo(fr, fr));
        GenericTreeNode tt = new GenericTreeNode(new Tipo(t, t));
        GenericTreeNode dd = new GenericTreeNode(new Tipo(d, d));
        rf.addChild(f);
        rf.addChild(sa);
        rf.addChild(tt);
        rf.addChild(ex);
        rf.addChild(dd);
        rf.addChild(s);
        RESULT= rf;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RF",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONDICION ::= EX OL CONDICION 
            {
              GenericTreeNode RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode ex = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ex2 = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode eb = new GenericTreeNode(new Tipo("CONDICION", "CONDICION"));
        eb.addChild(ex);
        eb.addChild(ex2);
        RESULT=eb;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONDICION ::= EX 
            {
              GenericTreeNode RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ar = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode ex = new GenericTreeNode(new Tipo("EB", "EB"));
        ex.addChild(ar);
        RESULT=ex;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EX ::= AR 
            {
              GenericTreeNode RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ar = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode ex = new GenericTreeNode(new Tipo("EXPRESION", "EXPRESION"));
        ex.addChild(ar);
        RESULT=ex;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EX",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // MET ::= ESCR 
            {
              GenericTreeNode RESULT =null;
		int wtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode wt = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode met = new GenericTreeNode(new Tipo("metodo", "metodo"));
        met.addChild(wt);
        RESULT=met;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MET",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ESCR ::= WRITE PARIZQ VSTRING WRT PARDER 
            {
              GenericTreeNode RESULT =null;
		int wtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String wt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int wrtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wrtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode wrt = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        GenericTreeNode escr = new GenericTreeNode(new Tipo(wt, wt));
        GenericTreeNode str = new GenericTreeNode(new Tipo(vs, vs));
        escr.addChild(str);
        escr.addChild(wrt);
        RESULT=escr;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCR",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ESCR ::= LEER 
            {
              GenericTreeNode RESULT =null;
		int lrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode lr = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode escr = new GenericTreeNode(new Tipo("READ", "READ"));
        escr.addChild(lr);
        RESULT=escr;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCR",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // WRT ::= COMA ID 
            {
              GenericTreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        GenericTreeNode wrt= new GenericTreeNode(new Tipo("WRT", "WRT"));
        GenericTreeNode i= new GenericTreeNode(new Tipo(id, id));
        wrt.addChild(i);
        RESULT=wrt;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("WRT",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // WRT ::= 
            {
              GenericTreeNode RESULT =null;
		
        GenericTreeNode wrt= new GenericTreeNode(new Tipo("WRT", "WRT"));
        RESULT=wrt;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WRT",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LEER ::= READ PARIZQ ID PARDER 
            {
              GenericTreeNode RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        GenericTreeNode leer = new GenericTreeNode(new Tipo(rd, rd));
        GenericTreeNode i = new GenericTreeNode(new Tipo(id, id));
        leer.addChild(i);
        RESULT=leer;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEER",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // COMENT ::= COMENTARIO 
            {
              String RESULT =null;
		int cmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=cm;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMENT",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // COMENT ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMENT",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
