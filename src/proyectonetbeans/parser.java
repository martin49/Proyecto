
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.FileReader;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\005\000\002\002\004\000\002\003" +
    "\005\000\002\003\003\000\002\004\004\000\002\004\003" +
    "\000\002\006\005\000\002\006\002\000\002\065\003\000" +
    "\002\065\002\000\002\007\007\000\002\007\002\000\002" +
    "\007\006\000\002\014\003\000\002\014\005\000\002\013" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\005" +
    "\000\002\011\003\000\002\016\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\015\003\000\002" +
    "\015\003\000\002\020\013\000\002\021\006\000\002\005" +
    "\003\000\002\023\005\000\002\024\005\000\002\024\002" +
    "\000\002\024\004\000\002\024\005\000\002\024\003\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\004\000\002\025\005\000\002\066\005\000\002\066" +
    "\003\000\002\047\005\000\002\047\003\000\002\050\003" +
    "\000\002\050\005\000\002\072\003\000\002\072\003\000" +
    "\002\072\003\000\002\073\003\000\002\073\003\000\002" +
    "\073\003\000\002\073\003\000\002\027\003\000\002\027" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\033\006\000\002\034\003\000" +
    "\002\037\003\000\002\037\003\000\002\035\007\000\002" +
    "\036\004\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\041\006\000\002\042\006\000\002\043\010" +
    "\000\002\043\010\000\002\031\005\000\002\051\003\000" +
    "\002\030\003\000\002\070\003\000\002\067\007\000\002" +
    "\067\003\000\002\052\004\000\002\052\002\000\002\057" +
    "\006\000\002\044\003\000\002\064\003\000\002\064\003" +
    "\000\002\062\006\000\002\063\006\000\002\045\006\000" +
    "\002\045\012\000\002\054\003\000\002\054\003\000\002" +
    "\046\004\000\002\046\007\000\002\055\003\000\002\055" +
    "\003\000\002\053\003\000\002\053\005\000\002\056\004" +
    "\000\002\071\006\000\002\071\002\000\002\060\003\000" +
    "\002\060\005\000\002\061\003\000\002\012\005\000\002" +
    "\032\006\000\002\074\003\000\002\074\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\006\003\004\031\007\001\002\000\014\003" +
    "\ufffe\032\ufffe\034\ufffe\035\ufffe\036\ufffe\001\002\000\004" +
    "\002\320\001\002\000\014\003\014\032\ufffa\034\ufffa\035" +
    "\ufffa\036\012\001\002\000\004\047\010\001\002\000\004" +
    "\045\011\001\002\000\014\003\uffff\032\uffff\034\uffff\035" +
    "\uffff\036\uffff\001\002\000\016\003\071\032\ufff6\034\ufff6" +
    "\035\ufff6\036\ufff6\047\065\001\002\000\004\032\074\001" +
    "\002\000\004\032\ufffc\001\002\000\010\032\ufff8\034\020" +
    "\035\024\001\002\000\004\032\ufff9\001\002\000\004\032" +
    "\uffae\001\002\000\004\047\275\001\002\000\004\045\272" +
    "\001\002\000\004\045\267\001\002\000\004\032\ufffd\001" +
    "\002\000\004\047\026\001\002\000\004\032\uffaf\001\002" +
    "\000\006\005\027\010\030\001\002\000\012\052\036\053" +
    "\041\054\046\055\042\001\002\000\004\047\031\001\002" +
    "\000\004\005\055\001\002\000\006\011\uffa3\012\053\001" +
    "\002\000\004\011\034\001\002\000\004\005\035\001\002" +
    "\000\012\052\036\053\041\054\046\055\042\001\002\000" +
    "\014\003\uffec\011\uffec\012\uffec\045\uffec\047\uffec\001\002" +
    "\000\004\045\uffa9\001\002\000\014\003\uffed\011\uffed\012" +
    "\uffed\045\uffed\047\uffed\001\002\000\014\003\uffea\011\uffea" +
    "\012\uffea\045\uffea\047\uffea\001\002\000\004\006\050\001" +
    "\002\000\004\045\uffa8\001\002\000\014\003\uffee\011\uffee" +
    "\012\uffee\045\uffee\047\uffee\001\002\000\004\045\047\001" +
    "\002\000\014\003\uffeb\011\uffeb\012\uffeb\045\uffeb\047\uffeb" +
    "\001\002\000\004\045\uffaa\001\002\000\004\064\051\001" +
    "\002\000\004\007\052\001\002\000\014\003\uffe6\011\uffe6" +
    "\012\uffe6\045\uffe6\047\uffe6\001\002\000\004\047\031\001" +
    "\002\000\004\011\uffa2\001\002\000\016\003\060\052\036" +
    "\053\041\054\046\055\042\056\057\001\002\000\014\003" +
    "\ufff1\011\ufff1\012\ufff1\045\ufff1\047\ufff1\001\002\000\004" +
    "\006\256\001\002\000\010\003\071\032\ufff6\047\065\001" +
    "\002\000\014\003\uffe8\011\uffe8\012\uffe8\045\uffe8\047\uffe8" +
    "\001\002\000\014\003\ufff0\011\ufff0\012\ufff0\045\ufff0\047" +
    "\ufff0\001\002\000\006\011\uff9b\012\uff9b\001\002\000\014" +
    "\003\uffe9\011\uffe9\012\uffe9\045\uffe9\047\uffe9\001\002\000" +
    "\006\005\ufff2\012\ufff2\001\002\000\004\032\074\001\002" +
    "\000\006\005\250\012\247\001\002\000\006\005\ufff4\012" +
    "\ufff4\001\002\000\012\003\071\032\ufff6\036\ufff6\047\065" +
    "\001\002\000\006\032\ufffa\036\012\001\002\000\004\032" +
    "\074\001\002\000\026\003\120\017\113\022\105\024\125" +
    "\026\124\032\074\033\uffe2\047\116\062\101\063\115\001" +
    "\002\000\014\011\ufff5\032\ufff5\034\ufff5\035\ufff5\036\ufff5" +
    "\001\002\000\026\002\uffe5\003\uffe5\011\uffe5\012\uffe5\032" +
    "\uffe5\034\uffe5\035\uffe5\036\uffe5\045\uffe5\047\uffe5\001\002" +
    "\000\010\020\uffdf\025\uffdf\033\uffdf\001\002\000\010\020" +
    "\uffc0\025\uffc0\033\uffc0\001\002\000\004\010\244\001\002" +
    "\000\010\020\uffc4\025\uffc4\033\uffc4\001\002\000\010\020" +
    "\uffbf\025\uffbf\033\uffbf\001\002\000\004\045\242\001\002" +
    "\000\014\046\132\047\135\050\134\051\137\064\130\001" +
    "\002\000\004\033\236\001\002\000\004\045\uffb4\001\002" +
    "\000\004\045\uffb6\001\002\000\004\045\234\001\002\000" +
    "\004\045\232\001\002\000\014\046\132\047\135\050\134" +
    "\051\137\064\130\001\002\000\004\045\222\001\002\000" +
    "\004\010\214\001\002\000\010\004\177\010\205\045\uffb0" +
    "\001\002\000\010\020\uffbe\025\uffbe\033\uffbe\001\002\000" +
    "\032\003\120\017\113\020\uffe2\022\105\024\125\025\uffe2" +
    "\026\124\032\074\033\uffe2\047\116\062\101\063\115\001" +
    "\002\000\010\020\uffc3\025\uffc3\033\uffc3\001\002\000\032" +
    "\003\120\017\113\020\uffe2\022\105\024\125\025\uffe2\026" +
    "\124\032\074\033\uffe2\047\116\062\101\063\115\001\002" +
    "\000\004\045\201\001\002\000\004\047\165\001\002\000" +
    "\026\003\120\017\113\022\105\024\125\025\uffe2\026\124" +
    "\032\074\047\116\062\101\063\115\001\002\000\004\025" +
    "\127\001\002\000\014\046\132\047\135\050\134\051\137" +
    "\064\130\001\002\000\044\011\uffca\020\uffca\021\uffca\023" +
    "\uffca\025\uffca\027\uffca\030\uffca\033\uffca\040\uffca\041\uffca" +
    "\042\uffca\043\uffca\044\uffca\045\uffca\057\uffca\060\uffca\061" +
    "\uffca\001\002\000\014\020\uffb7\021\uffb7\023\uffb7\025\uffb7" +
    "\033\uffb7\001\002\000\044\011\uffc8\020\uffc8\021\uffc8\023" +
    "\uffc8\025\uffc8\027\uffc8\030\uffc8\033\uffc8\040\uffc8\041\uffc8" +
    "\042\uffc8\043\uffc8\044\uffc8\045\uffc8\057\uffc8\060\uffc8\061" +
    "\uffc8\001\002\000\044\011\uffcc\020\uffcc\021\uffcc\023\uffcc" +
    "\025\uffcc\027\uffcc\030\uffcc\033\uffcc\040\uffcc\041\uffcc\042" +
    "\uffcc\043\uffcc\044\uffcc\045\uffcc\057\uffcc\060\uffcc\061\uffcc" +
    "\001\002\000\044\011\uffc9\020\uffc9\021\uffc9\023\uffc9\025" +
    "\uffc9\027\uffc9\030\uffc9\033\uffc9\040\uffc9\041\uffc9\042\uffc9" +
    "\043\uffc9\044\uffc9\045\uffc9\057\uffc9\060\uffc9\061\uffc9\001" +
    "\002\000\044\011\uffcb\020\uffcb\021\uffcb\023\uffcb\025\uffcb" +
    "\027\uffcb\030\uffcb\033\uffcb\040\uffcb\041\uffcb\042\uffcb\043" +
    "\uffcb\044\uffcb\045\uffcb\057\uffcb\060\uffcb\061\uffcb\001\002" +
    "\000\012\042\145\043\141\044\142\061\144\001\002\000" +
    "\044\011\uffc7\020\uffc7\021\uffc7\023\uffc7\025\uffc7\027\uffc7" +
    "\030\uffc7\033\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044" +
    "\uffc7\045\uffc7\057\uffc7\060\uffc7\061\uffc7\001\002\000\010" +
    "\020\uffbc\025\uffbc\033\uffbc\001\002\000\016\010\uffce\046" +
    "\uffce\047\uffce\050\uffce\051\uffce\064\uffce\001\002\000\016" +
    "\010\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\064\uffcd\001" +
    "\002\000\016\010\150\046\132\047\135\050\134\051\137" +
    "\064\130\001\002\000\016\010\uffd0\046\uffd0\047\uffd0\050" +
    "\uffd0\051\uffd0\064\uffd0\001\002\000\016\010\uffcf\046\uffcf" +
    "\047\uffcf\050\uffcf\051\uffcf\064\uffcf\001\002\000\034\011" +
    "\uffd8\020\uffd8\021\uffd8\023\uffd8\025\uffd8\027\uffd8\030\uffd8" +
    "\033\uffd8\040\160\041\157\045\uffd8\057\uffd8\060\161\001" +
    "\002\000\014\020\uffb9\021\uffb9\023\uffb9\025\uffb9\033\uffb9" +
    "\001\002\000\016\010\150\046\132\047\135\050\134\051" +
    "\137\064\130\001\002\000\016\020\uffb8\021\uffb8\023\uffb8" +
    "\025\uffb8\033\uffb8\057\154\001\002\000\034\011\uffd5\020" +
    "\uffd5\021\uffd5\023\uffd5\025\uffd5\027\uffd5\030\uffd5\033\uffd5" +
    "\040\uffd5\041\uffd5\045\uffd5\057\uffd5\060\uffd5\001\002\000" +
    "\034\011\uffd6\020\uffd6\021\uffd6\023\uffd6\025\uffd6\027\uffd6" +
    "\030\uffd6\033\uffd6\040\uffd6\041\uffd6\045\uffd6\057\uffd6\060" +
    "\uffd6\001\002\000\016\010\150\046\132\047\135\050\134" +
    "\051\137\064\130\001\002\000\034\011\uffd9\020\uffd9\021" +
    "\uffd9\023\uffd9\025\uffd9\027\uffd9\030\uffd9\033\uffd9\040\160" +
    "\041\157\045\uffd9\057\uffd9\060\161\001\002\000\016\010" +
    "\150\046\132\047\135\050\134\051\137\064\130\001\002" +
    "\000\016\010\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\064" +
    "\uffd1\001\002\000\016\010\uffd2\046\uffd2\047\uffd2\050\uffd2" +
    "\051\uffd2\064\uffd2\001\002\000\016\010\uffd3\046\uffd3\047" +
    "\uffd3\050\uffd3\051\uffd3\064\uffd3\001\002\000\034\011\uffd7" +
    "\020\uffd7\021\uffd7\023\uffd7\025\uffd7\027\uffd7\030\uffd7\033" +
    "\uffd7\040\uffd7\041\uffd7\045\uffd7\057\uffd7\060\uffd7\001\002" +
    "\000\006\011\164\057\154\001\002\000\034\011\uffd4\020" +
    "\uffd4\021\uffd4\023\uffd4\025\uffd4\027\uffd4\030\uffd4\033\uffd4" +
    "\040\uffd4\041\uffd4\045\uffd4\057\uffd4\060\uffd4\001\002\000" +
    "\004\004\177\001\002\000\006\027\167\030\170\001\002" +
    "\000\014\046\132\047\135\050\134\051\137\064\130\001" +
    "\002\000\014\046\132\047\135\050\134\051\137\064\130" +
    "\001\002\000\004\023\172\001\002\000\032\003\120\017" +
    "\113\020\uffe2\022\105\024\125\025\uffe2\026\124\032\074" +
    "\033\uffe2\047\116\062\101\063\115\001\002\000\010\020" +
    "\uffba\025\uffba\033\uffba\001\002\000\004\023\175\001\002" +
    "\000\032\003\120\017\113\020\uffe2\022\105\024\125\025" +
    "\uffe2\026\124\032\074\033\uffe2\047\116\062\101\063\115" +
    "\001\002\000\010\020\uffbb\025\uffbb\033\uffbb\001\002\000" +
    "\016\010\150\046\132\047\135\050\134\051\137\064\130" +
    "\001\002\000\012\027\uffda\030\uffda\045\uffda\057\154\001" +
    "\002\000\032\003\120\017\113\020\uffe2\022\105\024\125" +
    "\025\uffe2\026\124\032\074\033\uffe2\047\116\062\101\063" +
    "\115\001\002\000\010\020\uffe3\025\uffe3\033\uffe3\001\002" +
    "\000\010\020\uffe1\025\uffe1\033\uffe1\001\002\000\010\020" +
    "\uffdb\025\uffdb\033\uffdb\001\002\000\014\046\132\047\210" +
    "\050\134\051\137\064\130\001\002\000\004\011\213\001" +
    "\002\000\004\011\212\001\002\000\006\005\055\011\uffcb" +
    "\001\002\000\004\011\uffc5\001\002\000\004\045\uffc6\001" +
    "\002\000\004\045\uff9a\001\002\000\004\051\215\001\002" +
    "\000\006\011\uffb2\012\216\001\002\000\004\047\221\001" +
    "\002\000\004\011\220\001\002\000\004\045\uffb5\001\002" +
    "\000\004\011\uffb3\001\002\000\032\003\120\017\113\020" +
    "\uffe2\022\105\024\125\025\uffe2\026\124\032\074\033\uffe2" +
    "\047\116\062\101\063\115\001\002\000\010\020\uffdc\025" +
    "\uffdc\033\uffdc\001\002\000\004\021\225\001\002\000\026" +
    "\003\120\017\113\020\uffe2\022\105\024\125\026\124\032" +
    "\074\047\116\062\101\063\115\001\002\000\004\020\227" +
    "\001\002\000\032\003\120\017\113\020\uffe2\022\105\024" +
    "\125\025\uffe2\026\124\032\074\033\uffe2\047\116\062\101" +
    "\063\115\001\002\000\010\020\uffc2\025\uffc2\033\uffc2\001" +
    "\002\000\010\020\uffc1\025\uffc1\033\uffc1\001\002\000\032" +
    "\003\120\017\113\020\uffe2\022\105\024\125\025\uffe2\026" +
    "\124\032\074\033\uffe2\047\116\062\101\063\115\001\002" +
    "\000\010\020\uffdd\025\uffdd\033\uffdd\001\002\000\032\003" +
    "\120\017\113\020\uffe2\022\105\024\125\025\uffe2\026\124" +
    "\032\074\033\uffe2\047\116\062\101\063\115\001\002\000" +
    "\010\020\uffde\025\uffde\033\uffde\001\002\000\050\002\uffe4" +
    "\003\uffe4\011\uffe4\012\uffe4\017\uffe4\020\uffe4\022\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\036\uffe4\045\uffe4\047\uffe4\062\uffe4\063\uffe4\001\002\000" +
    "\004\023\240\001\002\000\032\003\120\017\113\020\uffe2" +
    "\022\105\024\125\025\uffe2\026\124\032\074\033\uffe2\047" +
    "\116\062\101\063\115\001\002\000\010\020\uffbd\025\uffbd" +
    "\033\uffbd\001\002\000\032\003\120\017\113\020\uffe2\022" +
    "\105\024\125\025\uffe2\026\124\032\074\033\uffe2\047\116" +
    "\062\101\063\115\001\002\000\010\020\uffe0\025\uffe0\033" +
    "\uffe0\001\002\000\004\047\245\001\002\000\004\011\246" +
    "\001\002\000\004\045\uffb1\001\002\000\004\047\065\001" +
    "\002\000\016\003\060\052\036\053\041\054\046\055\042" +
    "\056\057\001\002\000\004\045\252\001\002\000\020\003" +
    "\071\011\ufff6\032\ufff6\034\ufff6\035\ufff6\036\ufff6\047\065" +
    "\001\002\000\014\011\ufff7\032\ufff7\034\ufff7\035\ufff7\036" +
    "\ufff7\001\002\000\006\005\ufff3\012\ufff3\001\002\000\014" +
    "\003\uffef\011\uffef\012\uffef\045\uffef\047\uffef\001\002\000" +
    "\004\064\257\001\002\000\004\015\260\001\002\000\004" +
    "\015\261\001\002\000\004\064\262\001\002\000\004\007" +
    "\263\001\002\000\004\016\264\001\002\000\016\003\060" +
    "\052\036\053\041\054\046\055\042\056\057\001\002\000" +
    "\014\003\uffe7\011\uffe7\012\uffe7\045\uffe7\047\uffe7\001\002" +
    "\000\004\045\uffab\001\002\000\014\003\014\032\ufffa\034" +
    "\ufffa\035\ufffa\036\012\001\002\000\004\032\074\001\002" +
    "\000\004\032\uffac\001\002\000\014\003\014\032\ufffa\034" +
    "\ufffa\035\ufffa\036\012\001\002\000\004\032\074\001\002" +
    "\000\004\032\uffad\001\002\000\006\010\276\045\uffa7\001" +
    "\002\000\006\036\277\047\031\001\002\000\006\011\uff9f" +
    "\047\305\001\002\000\004\011\303\001\002\000\004\011" +
    "\uffa4\001\002\000\004\011\uffa5\001\002\000\004\045\uffa6" +
    "\001\002\000\004\011\uffa1\001\002\000\006\005\uff9c\012" +
    "\uff9c\001\002\000\006\005\uff9e\012\uff9e\001\002\000\006" +
    "\005\311\012\310\001\002\000\004\047\305\001\002\000" +
    "\016\003\060\052\036\053\041\054\046\055\042\056\057" +
    "\001\002\000\010\003\071\011\ufff6\047\065\001\002\000" +
    "\004\011\uffa0\001\002\000\006\005\uff9d\012\uff9d\001\002" +
    "\000\004\002\001\001\002\000\012\032\ufffa\034\ufffa\035" +
    "\ufffa\036\012\001\002\000\010\032\ufffb\034\ufffb\035\ufffb" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\012\006\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\315\013\067\014\066\001\001\000\006\005\314" +
    "\023\075\001\001\000\002\001\001\000\016\045\021\046" +
    "\020\062\016\063\024\064\015\065\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\011\036\016" +
    "\043\017\037\021\042\054\265\001\001\000\006\012\031" +
    "\053\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\011\036\016\043" +
    "\017\037\021\042\054\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\031\053" +
    "\053\001\001\000\002\001\001\000\020\010\062\011\055" +
    "\015\061\016\043\017\037\020\063\021\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\065\013\067" +
    "\014\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\254\023\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\071\013\067\014\066\001\001\000\004" +
    "\006\072\001\001\000\006\005\074\023\075\001\001\000" +
    "\040\023\121\024\105\025\122\032\113\033\103\035\101" +
    "\037\076\040\120\041\077\042\102\043\116\044\111\057" +
    "\106\067\107\070\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\026\132\027\135\030\236\031\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\026\132\027\135\030" +
    "\223\031\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\023\121\024" +
    "\203\025\122\032\113\033\103\035\101\037\076\040\120" +
    "\041\077\042\102\043\116\044\111\057\106\067\107\070" +
    "\110\001\001\000\002\001\001\000\040\023\121\024\202" +
    "\025\122\032\113\033\103\035\101\037\076\040\120\041" +
    "\077\042\102\043\116\044\111\057\106\067\107\070\110" +
    "\001\001\000\002\001\001\000\004\025\165\001\001\000" +
    "\040\023\121\024\125\025\122\032\113\033\103\035\101" +
    "\037\076\040\120\041\077\042\102\043\116\044\111\057" +
    "\106\067\107\070\110\001\001\000\002\001\001\000\012" +
    "\026\132\027\135\030\137\031\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\073\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\026\132\027\151\047\145\050" +
    "\152\051\146\066\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\072\155\001\001\000\002\001\001\000" +
    "\014\026\132\027\151\047\145\050\152\066\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\026\132\027\151\047\154\050\152\001\001\000\004" +
    "\072\155\001\001\000\010\026\132\027\151\050\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\132\027\173" +
    "\001\001\000\006\026\132\027\170\001\001\000\002\001" +
    "\001\000\040\023\121\024\172\025\122\032\113\033\103" +
    "\035\101\037\076\040\120\041\077\042\102\043\116\044" +
    "\111\057\106\067\107\070\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\023\121\024\175\025\122\032" +
    "\113\033\103\035\101\037\076\040\120\041\077\042\102" +
    "\043\116\044\111\057\106\067\107\070\110\001\001\000" +
    "\002\001\001\000\014\026\132\027\151\047\145\050\152" +
    "\066\177\001\001\000\002\001\001\000\040\023\121\024" +
    "\201\025\122\032\113\033\103\035\101\037\076\040\120" +
    "\041\077\042\102\043\116\044\111\057\106\067\107\070" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\012\031\026\132\027\210\034\206\053" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\023\121\024\222\025\122\032\113\033\103" +
    "\035\101\037\076\040\120\041\077\042\102\043\116\044" +
    "\111\057\106\067\107\070\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\023\121\024\225\025\122\032" +
    "\113\033\103\035\101\037\076\040\120\041\077\042\102" +
    "\043\116\044\111\057\106\067\107\070\110\001\001\000" +
    "\004\036\227\001\001\000\040\023\121\024\230\025\122" +
    "\032\113\033\103\035\101\037\076\040\120\041\077\042" +
    "\102\043\116\044\111\057\106\067\107\070\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\023\121\024" +
    "\232\025\122\032\113\033\103\035\101\037\076\040\120" +
    "\041\077\042\102\043\116\044\111\057\106\067\107\070" +
    "\110\001\001\000\002\001\001\000\040\023\121\024\234" +
    "\025\122\032\113\033\103\035\101\037\076\040\120\041" +
    "\077\042\102\043\116\044\111\057\106\067\107\070\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\023\121\024\240\025\122\032\113\033\103" +
    "\035\101\037\076\040\120\041\077\042\102\043\116\044" +
    "\111\057\106\067\107\070\110\001\001\000\002\001\001" +
    "\000\040\023\121\024\242\025\122\032\113\033\103\035" +
    "\101\037\076\040\120\041\077\042\102\043\116\044\111" +
    "\057\106\067\107\070\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\253\001\001\000\020\010\250\011\055\015\061\016" +
    "\043\017\037\020\063\021\060\001\001\000\002\001\001" +
    "\000\010\007\252\013\067\014\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\010\264\011\055" +
    "\015\061\016\043\017\037\020\063\021\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\267\006\014" +
    "\001\001\000\004\023\270\001\001\000\002\001\001\000" +
    "\006\004\272\006\014\001\001\000\004\023\273\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\031\053" +
    "\301\055\277\056\300\001\001\000\010\060\306\061\305" +
    "\071\303\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\061" +
    "\313\001\001\000\020\010\311\011\055\015\061\016\043" +
    "\017\037\020\063\021\060\001\001\000\010\007\312\013" +
    "\067\014\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\316\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            parser p = new parser(
                    new Proyecto( new FileReader(args[0])));
            Object result = p.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= CP ZD CUP 
            {
              GenericTree RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode cp = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int zdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int zdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode zd = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cupleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cupright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode cup = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTree<String> tree= new GenericTree<String>();GenericTreeNode<String> pro= new GenericTreeNode<String>("Programa"); pro.addChild(cp);pro.addChild(zd); pro.addChild(cup); tree.setRoot(pro); System.out.println(tree.toString());
                System.out.println("Raiz:"+tree.getRoot());
                System.out.println("--------------------------");
                for (int i = 0; i < tree.list().size(); i++) {
                    System.out.println("Padre:"+tree.Imprimir(i).toString());
                    System.out.println();
                    System.out.println("Hijos:"+tree.Imprimir(i).getChildren());
                    System.out.println("-------------------------------");
                }

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTree start_val = (GenericTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CP ::= PROGRAM ID CIERRE 
            {
              GenericTreeNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int crleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int crright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GenericTreeNode<String> cp= new GenericTreeNode<String>("CP");GenericTreeNode<String> pr= new GenericTreeNode<String>(p);GenericTreeNode<String> id= new GenericTreeNode<String>(i); cp.addChild(pr);cp.addChild(id); RESULT=cp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CP ::= error 
            {
              GenericTreeNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ZD ::= ZDV ZDSP 
            {
              GenericTreeNode RESULT =null;
		int zdvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int zdvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode zdv = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int zdspleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int zdspright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode zdsp = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> zd = new GenericTreeNode<String>("ZD"); zd.addChild(zdv); zd.addChild(zdsp); RESULT=zd;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ZD",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ZD ::= error 
            {
              GenericTreeNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ZD",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ZDV ::= VAR DE ZDV 
            {
              GenericTreeNode RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int deleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int deright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode de = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode z = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> zdv= new GenericTreeNode<String>("ZDV");GenericTreeNode<String> v= new GenericTreeNode<String>(var); zdv.addChild(v);zdv.addChild(de); zdv.addChild(z); RESULT=zdv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ZDV",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ZDV ::= 
            {
              GenericTreeNode RESULT =null;
		GenericTreeNode<String> zdv= new GenericTreeNode<String>("ZDV");RESULT=zdv;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ZDV",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ZDSP ::= DSP 
            {
              GenericTreeNode RESULT =null;
		int dspleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dspright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode dsp = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> zdsp = new GenericTreeNode<String>("ZDSP"); zdsp.addChild(dsp); RESULT=zdsp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ZDSP",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ZDSP ::= 
            {
              GenericTreeNode RESULT =null;
		GenericTreeNode<String> zdsp= new GenericTreeNode<String>("ZDSP");GenericTreeNode<String> vacio= new GenericTreeNode<String>(" ");zdsp.addChild(vacio);RESULT=zdsp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ZDSP",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DE ::= DEI DECLARACION TD CIERRE DE 
            {
              GenericTreeNode RESULT =null;
		int deileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int deiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		GenericTreeNode dei = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String dcl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode td = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int crleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int crright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode d = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> de= new GenericTreeNode<String>("DE");de.addChild(dei);de.addChild(td); RESULT=de;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DE ::= 
            {
              GenericTreeNode RESULT =null;
		GenericTreeNode<String> de= new GenericTreeNode<String>("DE");RESULT=de;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DE ::= error DE ZDV CUP 
            {
              GenericTreeNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DEI ::= VR 
            {
              GenericTreeNode RESULT =null;
		int vrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode vr = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> dei= new GenericTreeNode<String>("DEI");dei.addChild(vr); RESULT=dei;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEI",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DEI ::= DEI COMA VR 
            {
              GenericTreeNode RESULT =null;
		int deleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int deright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode de = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode vr = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> dei= new GenericTreeNode<String>("DEI");dei.addChild(de); dei.addChild(vr); RESULT=dei;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEI",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VR ::= ID 
            {
              GenericTreeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> vr= new GenericTreeNode<String>("VR");GenericTreeNode<String> id= new GenericTreeNode<String>(i); vr.addChild(id); RESULT=vr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TD ::= TS 
            {
              GenericTreeNode RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ss = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> td = new GenericTreeNode<String>("TD"); td.addChild(ss); RESULT=td;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TD",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TD ::= TE 
            {
              GenericTreeNode RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode te = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GenericTreeNode<String> td = new GenericTreeNode<String>("TD"); td.addChild(te); RESULT=td; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TD",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TD ::= error DE CUP 
            {
              GenericTreeNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TD",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TS ::= TOC 
            {
              GenericTreeNode RESULT =null;
		int toleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int toright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode to = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> ts = new GenericTreeNode<String>("TS"); ts.addChild(to); RESULT=ts;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TOC ::= TOP 
            {
              GenericTreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode t = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> toc = new GenericTreeNode<String>("TOC"); toc.addChild(t); RESULT=toc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TOC",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TOP ::= INTEGER 
            {
              GenericTreeNode RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> top= new GenericTreeNode<String>(in);RESULT= top;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TOP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TOP ::= CHAR 
            {
              GenericTreeNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> top= new GenericTreeNode<String>(c);RESULT= top;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TOP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TOP ::= BOOLEAN 
            {
              GenericTreeNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> top= new GenericTreeNode<String>(b);RESULT= top;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TOP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TE ::= TA 
            {
              GenericTreeNode RESULT =null;
		int taleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int taright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ta = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> te = new GenericTreeNode<String>("TE"); te.addChild(ta); RESULT=te;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TE ::= TST 
            {
              GenericTreeNode RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode tst = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> te = new GenericTreeNode<String>("TE"); te.addChild(tst); RESULT=te;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TA ::= ARRAY LLAVEIZQ NUM PUNTO PUNTO NUM LLAVEDER OF TD 
            {
              GenericTreeNode RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String ar = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String li = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ld = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode td = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> ta = new GenericTreeNode<String>("TA"); GenericTreeNode<String> s = new GenericTreeNode<String>(ar); GenericTreeNode<String> f = new GenericTreeNode<String>(o); GenericTreeNode<String> num = new GenericTreeNode<String>("NUM"); GenericTreeNode<String> num2 = new GenericTreeNode<String>("NUM2");ta.addChild(s); ta.addChild(num); ta.addChild(num2); ta.addChild(f); RESULT=ta;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TST ::= STRING LLAVEIZQ NUM LLAVEDER 
            {
              GenericTreeNode RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String li = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ld = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> tst = new GenericTreeNode<String>("TST");GenericTreeNode<String> s = new GenericTreeNode<String>(st); GenericTreeNode<String> num = new GenericTreeNode<String>("NUM"); tst.addChild(s); tst.addChild(num); RESULT=tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TST",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CUP ::= SC 
            {
              GenericTreeNode RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode sc = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> cup = new GenericTreeNode<String>("CUP"); cup.addChild(sc); RESULT=cup;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SC ::= BEGIN S END 
            {
              GenericTreeNode RESULT =null;
		int bnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String bn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode s = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int edleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int edright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ed = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> sc = new GenericTreeNode<String>("SC");GenericTreeNode<String> bg = new GenericTreeNode<String>(bn);GenericTreeNode<String> e = new GenericTreeNode<String>(ed); sc.addChild(bg); sc.addChild(s); sc.addChild(e); RESULT=sc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SC",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // S ::= SA CIERRE S 
            {
              GenericTreeNode RESULT =null;
		int saleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int saright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode sa = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int crleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int crright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode s1 = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GenericTreeNode<String> s = new GenericTreeNode<String>("S"); s.addChild(sa); s.addChild(s1); RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // S ::= 
            {
              GenericTreeNode RESULT =null;
		 GenericTreeNode<String> s = new GenericTreeNode<String>("S"); RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // S ::= SC S 
            {
              GenericTreeNode RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode sc = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode s1 = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> s = new GenericTreeNode<String>("S"); s.addChild(sc); s.addChild(s1); RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // S ::= LP CIERRE S 
            {
              GenericTreeNode RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode lp = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode s1 = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> s = new GenericTreeNode<String>("S"); s.addChild(lp); s.addChild(s1); RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // S ::= EC 
            {
              GenericTreeNode RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ec = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> s = new GenericTreeNode<String>("S"); s.addChild(ec); RESULT=s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // S ::= MET CIERRE S 
            {
              GenericTreeNode RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode met = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode s1 = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GenericTreeNode<String> s = new GenericTreeNode<String>("S"); s.addChild(met);s.addChild(s1); RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // S ::= VARIABLE CIERRE S 
            {
              GenericTreeNode RESULT =null;
		int vrlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vrlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode vrl = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode s1 = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GenericTreeNode<String> s = new GenericTreeNode<String>("S"); s.addChild(vrl);s.addChild(s1); RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // S ::= LF CIERRE S 
            {
              GenericTreeNode RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode lf = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode s1 = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GenericTreeNode<String> s = new GenericTreeNode<String>("S"); s.addChild(lf);s.addChild(s1); RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // S ::= error S 
            {
              GenericTreeNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SA ::= ID ASSIG AR 
            {
              GenericTreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String as = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ar = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GenericTreeNode<String> sa = new GenericTreeNode<String>("SA");GenericTreeNode<String> i = new GenericTreeNode<String>(id); sa.addChild(i); sa.addChild(ar);RESULT=sa; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AR ::= AR OPSUMA AM 
            {
              GenericTreeNode RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode ar = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int amright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode am = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> a= new GenericTreeNode<String>("AR"); a.addChild(ar);a.addChild(am); RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AR",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // AR ::= AM 
            {
              GenericTreeNode RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int amright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode am = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> a= new GenericTreeNode<String>("AR"); a.addChild(am); RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AR",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // AM ::= AM OP F 
            {
              GenericTreeNode RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode am = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode val = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> a= new GenericTreeNode<String>("AM"); a.addChild(am);a.addChild(val); RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AM",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // AM ::= F 
            {
              GenericTreeNode RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode val = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> a= new GenericTreeNode<String>("AM"); a.addChild(val); RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AM",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // F ::= EXPRESION 
            {
              GenericTreeNode RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ex = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> f= new GenericTreeNode<String>("F"); f.addChild(ex); RESULT=f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // F ::= PARIZQ AR PARDER 
            {
              GenericTreeNode RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode ar = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		GenericTreeNode<String> f= new GenericTreeNode<String>("F"); f.addChild(ar); RESULT=f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OP ::= OPMULT 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OP ::= DIV 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OP ::= MOD 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OL ::= OPLOG 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OL",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OL ::= OR 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OL",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OL ::= NOT 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OL",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OL ::= AND 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OL",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= LITERAL 
            {
              GenericTreeNode RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode lt = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GenericTreeNode<String> ex = new GenericTreeNode<String>("EXPRESION"); ex.addChild(lt); RESULT=ex;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= ID 
            {
              GenericTreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> ex = new GenericTreeNode<String>("EXPRESION"); GenericTreeNode<String> i = new GenericTreeNode<String>(id); ex.addChild(i); RESULT=ex; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LITERAL ::= NUM 
            {
              GenericTreeNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GenericTreeNode<String> lt = new GenericTreeNode<String>("LITERAL"); GenericTreeNode<String> num = new GenericTreeNode<String>("NUM"); lt.addChild(num); RESULT=lt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITERAL",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LITERAL ::= VCHAR 
            {
              GenericTreeNode RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GenericTreeNode<String> lt = new GenericTreeNode<String>("LITERAL"); GenericTreeNode<String> c = new GenericTreeNode<String>(vc); lt.addChild(c); RESULT=lt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITERAL",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LITERAL ::= BOOL 
            {
              GenericTreeNode RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String bl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GenericTreeNode<String> lt = new GenericTreeNode<String>("LITERAL"); GenericTreeNode<String> b = new GenericTreeNode<String>(bl); lt.addChild(b); RESULT=lt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITERAL",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LITERAL ::= VSTRING 
            {
              GenericTreeNode RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GenericTreeNode<String> lt = new GenericTreeNode<String>("LITERAL"); GenericTreeNode<String> v = new GenericTreeNode<String>(vs); lt.addChild(v); RESULT=lt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITERAL",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LP ::= ID PARIZQ PA PARDER 
            {
              GenericTreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode pa = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		GenericTreeNode<String> lp = new GenericTreeNode<String>("LP"); GenericTreeNode<String> i= new GenericTreeNode<String>(id); lp.addChild(i);lp.addChild(pa);RESULT=lp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LP",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PA ::= EXPRESION 
            {
              GenericTreeNode RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ex = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> pa = new GenericTreeNode<String>("PA"); pa.addChild(ex);RESULT=pa;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PA",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EC ::= IS 
            {
              GenericTreeNode RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode is = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GenericTreeNode<String> ec = new GenericTreeNode<String>("EC"); ec.addChild(is);RESULT=ec;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EC",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EC ::= ER 
            {
              GenericTreeNode RESULT =null;
		int erleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode er = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GenericTreeNode<String> ec = new GenericTreeNode<String>("EC"); ec.addChild(er);RESULT=ec;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EC",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IS ::= IF CONDICION THEN S IDO 
            {
              GenericTreeNode RESULT =null;
		int ifcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ifcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ifc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		GenericTreeNode cd = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode s = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ido = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GenericTreeNode<String> is = new GenericTreeNode<String>("IS"); GenericTreeNode<String> fi = new GenericTreeNode<String>(ifc); GenericTreeNode<String> ten = new GenericTreeNode<String>(tn); is.addChild(fi); is.addChild(cd);is.addChild(ten);is.addChild(s);is.addChild(ido); RESULT=is; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IDO ::= ELSE S 
            {
              GenericTreeNode RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode s = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> ido = new GenericTreeNode<String>("IDO"); GenericTreeNode<String> els = new GenericTreeNode<String>(el); ido.addChild(els); ido.addChild(s);RESULT=ido;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDO",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ER ::= RW 
            {
              GenericTreeNode RESULT =null;
		int rwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode rw = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GenericTreeNode<String> er = new GenericTreeNode<String>("ER"); er.addChild(rw);RESULT=er; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ER",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ER ::= RR 
            {
              GenericTreeNode RESULT =null;
		int rrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode rr = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GenericTreeNode<String> er = new GenericTreeNode<String>("ER"); er.addChild(rr);RESULT=er; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ER",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ER ::= RF 
            {
              GenericTreeNode RESULT =null;
		int rfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode rf = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GenericTreeNode<String> er = new GenericTreeNode<String>("ER"); er.addChild(rf);RESULT=er; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ER",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // RW ::= WHILE CONDICION DO S 
            {
              GenericTreeNode RESULT =null;
		int wlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String wl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode cd = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode s = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GenericTreeNode<String> rw = new GenericTreeNode<String>("RW"); GenericTreeNode<String> f = new GenericTreeNode<String>(wl);GenericTreeNode<String> tt = new GenericTreeNode<String>(d); rw.addChild(f); rw.addChild(cd); rw.addChild(tt); rw.addChild(s); RESULT= rw; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RW",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // RR ::= REPEAT S UNTIL CONDICION 
            {
              GenericTreeNode RESULT =null;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String rp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode s = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ulleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ulright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ul = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode cd = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> rr = new GenericTreeNode<String>("RR"); GenericTreeNode<String> f = new GenericTreeNode<String>(rp);GenericTreeNode<String> tt = new GenericTreeNode<String>(ul); rr.addChild(f); rr.addChild(s); rr.addChild(tt); rr.addChild(cd); RESULT= rr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RR",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // RF ::= FOR SA TO EXPRESION DO S 
            {
              GenericTreeNode RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String fr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int saleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int saright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		GenericTreeNode sa = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode ex = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode s = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> rf = new GenericTreeNode<String>("RF"); GenericTreeNode<String> f = new GenericTreeNode<String>(fr);GenericTreeNode<String> tt = new GenericTreeNode<String>(t); GenericTreeNode<String> dd = new GenericTreeNode<String>(d);rf.addChild(f); rf.addChild(sa); rf.addChild(tt); rf.addChild(ex); rf.addChild(dd); rf.addChild(s);  RESULT= rf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RF",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // RF ::= FOR SA DOWNTO EXPRESION DO S 
            {
              GenericTreeNode RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String fr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int saleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int saright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		GenericTreeNode sa = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode ex = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode s = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> rf = new GenericTreeNode<String>("RF"); GenericTreeNode<String> f = new GenericTreeNode<String>(fr);GenericTreeNode<String> tt = new GenericTreeNode<String>(t); GenericTreeNode<String> dd = new GenericTreeNode<String>(d);rf.addChild(f); rf.addChild(sa); rf.addChild(tt); rf.addChild(ex); rf.addChild(dd); rf.addChild(s); RESULT= rf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RF",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EB ::= EXPRESION OL EX 
            {
              GenericTreeNode RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode ex = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ex2 = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> eb = new GenericTreeNode<String>("EB"); eb.addChild(ex); eb.addChild(ex2); RESULT=eb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EB",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EX ::= AR 
            {
              GenericTreeNode RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ar = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GenericTreeNode<String> ex = new GenericTreeNode<String>("EXPRESION "); ex.addChild(ar); RESULT=ex; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EX",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONDICION ::= EB 
            {
              GenericTreeNode RESULT =null;
		int ebleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode eb = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GenericTreeNode<String> cd = new GenericTreeNode<String>("CONDICION"); cd.addChild(eb); RESULT=cd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // MET ::= ESCR 
            {
              GenericTreeNode RESULT =null;
		int wtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode wt = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> met = new GenericTreeNode<String>("Metodo"); met.addChild(wt);RESULT=met;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MET",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ESCR ::= WRITE PARIZQ VSTRING WRT PARDER 
            {
              GenericTreeNode RESULT =null;
		int wtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String wt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int wrtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wrtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode wrt = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		GenericTreeNode<String> escr = new GenericTreeNode<String>(wt); GenericTreeNode<String> str = new GenericTreeNode<String>(vs); escr.addChild(str);escr.addChild(wrt);  RESULT=escr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCR",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ESCR ::= LEER 
            {
              GenericTreeNode RESULT =null;
		int lrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode lr = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> escr = new GenericTreeNode<String>("READ"); escr.addChild(lr); RESULT=escr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCR",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // WRT ::= COMA ID 
            {
              GenericTreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> wrt= new GenericTreeNode<String>("WRT"); GenericTreeNode<String> i= new GenericTreeNode<String>(id); wrt.addChild(i); RESULT=wrt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WRT",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // WRT ::= 
            {
              GenericTreeNode RESULT =null;
		GenericTreeNode<String> wrt= new GenericTreeNode<String>("WRT"); RESULT=wrt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WRT",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LEER ::= READ PARIZQ ID PARDER 
            {
              GenericTreeNode RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		GenericTreeNode<String> leer = new GenericTreeNode<String>(rd); GenericTreeNode<String> i = new GenericTreeNode<String>(id); leer.addChild(i);RESULT=leer;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEER",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VARIABLE ::= ID 
            {
              GenericTreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> vrl = new GenericTreeNode<String>("VARIABLE"); GenericTreeNode<String> i = new GenericTreeNode<String>("ID"); vrl.addChild(i); RESULT=vrl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DSP ::= DF 
            {
              GenericTreeNode RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode df = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> dsp = new GenericTreeNode<String>("DSP"); dsp.addChild(df);RESULT=dsp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DSP",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DSP ::= DP 
            {
              GenericTreeNode RESULT =null;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode dp = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> dsp = new GenericTreeNode<String>("DSP"); dsp.addChild(dp); RESULT=dsp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DSP",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DP ::= PROCE CIERRE ZD SC 
            {
              GenericTreeNode RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		GenericTreeNode pc = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int zdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int zdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode zd = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode sc = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> dp = new GenericTreeNode<String>("DP"); dp.addChild(pc); dp.addChild(zd); dp.addChild(sc); RESULT=dp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DP",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DF ::= FUNCION CIERRE ZD SC 
            {
              GenericTreeNode RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		GenericTreeNode fc = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int zdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int zdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode zd = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode sc = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> df = new GenericTreeNode<String>("DF"); df.addChild(fc); df.addChild(zd); df.addChild(sc);RESULT=df;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DF",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FUNCION ::= FUNCTION ID DECLARACION TEL 
            {
              GenericTreeNode RESULT =null;
		int ftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ft = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int telleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int telright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode tel = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> proce= new GenericTreeNode<String>("FUNCION");GenericTreeNode<String> fc= new GenericTreeNode<String>(ft); GenericTreeNode<String> i= new GenericTreeNode<String>(id); proce.addChild(fc);proce.addChild(i);proce.addChild(tel); RESULT=proce;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FUNCION ::= FUNCTION ID PARIZQ PFV PARDER DECLARACION TEL CIERRE 
            {
              GenericTreeNode RESULT =null;
		int ftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String ft = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pfvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pfvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		GenericTreeNode pfv = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int telleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int telright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode tel = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		GenericTreeNode<String> proce= new GenericTreeNode<String>("FUNCION");GenericTreeNode<String> fc= new GenericTreeNode<String>(ft); GenericTreeNode<String> i= new GenericTreeNode<String>(id); proce.addChild(fc);proce.addChild(i);proce.addChild(pfv); proce.addChild(tel); RESULT=proce;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TEL ::= TS 
            {
              GenericTreeNode RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode ts = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> tel = new GenericTreeNode<String>("TEL"); tel.addChild(ts); RESULT= tel;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEL",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TEL ::= TST 
            {
              GenericTreeNode RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode tst = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> tel = new GenericTreeNode<String>("TEL"); tel.addChild(tst); RESULT= tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEL",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PROCE ::= PROCEDURE ID 
            {
              GenericTreeNode RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> proce= new GenericTreeNode<String>("PROCEDURE");GenericTreeNode<String> p= new GenericTreeNode<String>(pc); GenericTreeNode<String> i= new GenericTreeNode<String>(id); proce.addChild(p);proce.addChild(i); RESULT=proce;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCE",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PROCE ::= PROCEDURE ID PARIZQ PF PARDER 
            {
              GenericTreeNode RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode pf = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		GenericTreeNode<String> proce= new GenericTreeNode<String>("PROCEDURE");GenericTreeNode<String> p= new GenericTreeNode<String>(pc); GenericTreeNode<String> i= new GenericTreeNode<String>(id); GenericTreeNode<String> pa= new GenericTreeNode<String>(pf.toString()); proce.addChild(p);proce.addChild(i);proce.addChild(pa); RESULT=proce;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCE",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PF ::= PFV 
            {
              GenericTreeNode RESULT =null;
		int pfvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pfvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode pfv = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GenericTreeNode<String> pf = new GenericTreeNode<String>("PF"); pf.addChild(pfv); RESULT= pf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PF",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PF ::= PFVA 
            {
              GenericTreeNode RESULT =null;
		int pfvaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pfvaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode pfva = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> pf = new GenericTreeNode<String>("PF");pf.addChild(pfva); RESULT= pf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PF",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PFV ::= TH 
            {
              GenericTreeNode RESULT =null;
		int thleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int thright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode th = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> pfv = new GenericTreeNode<String>("PFV"); pfv.addChild(th); RESULT= pfv;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PFV",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PFV ::= TH COMA PFV 
            {
              GenericTreeNode RESULT =null;
		int thleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int thright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode th = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode pf = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> pfv = new GenericTreeNode<String>("PFV"); pfv.addChild(th); pfv.addChild(pf); RESULT= pfv;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PFV",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PFVA ::= VAR PFVADE 
            {
              GenericTreeNode RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int deleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode de = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> pfva= new GenericTreeNode<String>("PFVA");GenericTreeNode<String> v= new GenericTreeNode<String>(var); pfva.addChild(v);pfva.addChild(de); RESULT=pfva; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PFVA",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PFVADE ::= DEIPF DECLARACION TD DE 
            {
              GenericTreeNode RESULT =null;
		int deileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int deiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		GenericTreeNode dei = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode td = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode d = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> pfvade= new GenericTreeNode<String>("DE");pfvade.addChild(dei);pfvade.addChild(td); RESULT=pfvade;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PFVADE",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PFVADE ::= 
            {
              GenericTreeNode RESULT =null;
		GenericTreeNode<String> pfvade= new GenericTreeNode<String>("DE");GenericTreeNode<String> vacio= new GenericTreeNode<String>(" ");pfvade.addChild(vacio);RESULT=pfvade;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PFVADE",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DEIPF ::= VRPF 
            {
              GenericTreeNode RESULT =null;
		int vrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode vr = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> deipf= new GenericTreeNode<String>("DEI");deipf.addChild(vr); RESULT=deipf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEIPF",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DEIPF ::= DEIPF COMA VRPF 
            {
              GenericTreeNode RESULT =null;
		int deleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int deright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericTreeNode de = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode vr = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> deipf= new GenericTreeNode<String>("DEI");deipf.addChild(de); deipf.addChild(vr); RESULT=deipf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEIPF",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VRPF ::= ID 
            {
              GenericTreeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> vrpf= new GenericTreeNode<String>("VR");GenericTreeNode<String> id= new GenericTreeNode<String>(i); vrpf.addChild(id); RESULT=vrpf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VRPF",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TH ::= ID DECLARACION TD 
            {
              GenericTreeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericTreeNode td = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		GenericTreeNode<String> th= new GenericTreeNode<String>("TH");GenericTreeNode<String> id= new GenericTreeNode<String>(i); th.addChild(id);th.addChild(td);RESULT=th;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TH",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LF ::= ID PARIZQ PFV PARDER 
            {
              GenericTreeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pfvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pfvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericTreeNode pfv = (GenericTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		GenericTreeNode<String> lf= new GenericTreeNode<String>("LF");GenericTreeNode<String> id= new GenericTreeNode<String>(i); lf.addChild(id);lf.addChild(pfv); RESULT=lf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LF",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // COMENT ::= COMENTARIO 
            {
              String RESULT =null;
		int cmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cm;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMENT",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // COMENT ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMENT",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
